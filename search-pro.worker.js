const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":514,\"nextId\":514,\"documentIds\":{\"0\":\"0\",\"1\":\"0#介绍\",\"2\":\"0#关于学习\",\"3\":\"2\",\"4\":\"2#一、计算机系统概论\",\"5\":\"2#计算机发展\",\"6\":\"2#计算机应用\",\"7\":\"2#计算机组成\",\"8\":\"2#硬件\",\"9\":\"2#软件\",\"10\":\"2#计算机系统的层次结构\",\"11\":\"2#传统冯诺依曼计算机结构与现代的计算机系统结构\",\"12\":\"2#二、计算机中数据表示\",\"13\":\"2#进位计数制及其之间的转换\",\"14\":\"2#定点数的表示\",\"15\":\"2#浮点数的表示\",\"16\":\"2#非数值数据的表示\",\"17\":\"2#数据校验码\",\"18\":\"2#三、运算方法与运算器\",\"19\":\"2#定点数的算术运算与实现\",\"20\":\"2#逻辑运算与移位操作\",\"21\":\"2#定点运算器\",\"22\":\"2#浮点数的算术运算与浮点数运算器\",\"23\":\"2#四、存储器系统\",\"24\":\"2#多级存储体系结构\",\"25\":\"2#技术指标\",\"26\":\"2#存储元电路\",\"27\":\"2#五、指令系统\",\"28\":\"2#指令系统与性能\",\"29\":\"2#六、控制器\",\"30\":\"2#七、接口与输入输出\",\"31\":\"2#接口概述-输入接口与输出接口\",\"32\":\"2#输入输出方式\",\"33\":\"2#八、外围设备\",\"34\":\"2#外围设备概述\",\"35\":\"2#输入设备\",\"36\":\"2#输出设备\",\"37\":\"2#外存储设备\",\"38\":\"2#九、总线\",\"39\":\"2#总线技术概述\",\"40\":\"2#总线系统结构\",\"41\":\"2#总线信息传送方式及定时\",\"42\":\"2#总线的仲裁\",\"43\":\"2#计算机中的总线\",\"44\":\"2#新一代总线\",\"45\":\"2#十、并行处理与互连设备\",\"46\":\"2#并行处理的概念\",\"47\":\"2#并行处理机基本结构\",\"48\":\"2#simd-计算机基本结构\",\"49\":\"2#simd-计算机的应用\",\"50\":\"2#互连网络的概念\",\"51\":\"2#静态互连网络\",\"52\":\"2#动态互连网络\",\"53\":\"2#互连网络的消息传递机制\",\"54\":\"2#十一、多处理机与机群系统\",\"55\":\"2#多处理机系统特点与分类\",\"56\":\"2#多处理机软件和典型的多处理机系统\",\"57\":\"2#机群系统\",\"58\":\"2#码点\",\"59\":\"2#操作系统\",\"60\":\"3\",\"61\":\"3#description\",\"62\":\"4\",\"63\":\"5\",\"64\":\"6\",\"65\":\"7\",\"66\":\"8\",\"67\":\"9\",\"68\":\"10\",\"69\":\"10#运算器\",\"70\":\"10#控制器\",\"71\":\"11\",\"72\":\"12\",\"73\":\"13\",\"74\":\"13#passwd-root\",\"75\":\"13#reboot\",\"76\":\"13#安装mysql\",\"77\":\"14\",\"78\":\"14#linux介绍\",\"79\":\"14#_1-distributions-发行版\",\"80\":\"14#快速搭建带后台的php模板网站-宝塔-linux\",\"81\":\"14#_1-安装\",\"82\":\"14#_2-上传代码\",\"83\":\"14#_3-安装环境-创建网站\",\"84\":\"14#_4-进入网站域名\",\"85\":\"14#linux操作-基本命令\",\"86\":\"14#linux上传下载工具\",\"87\":\"14#_1-filezilla\",\"88\":\"14#_2-lrzsz\",\"89\":\"14#_3-sftp\",\"90\":\"14#linux-下载解压文件过程\",\"91\":\"15\",\"92\":\"15#卸载软件\",\"93\":\"16\",\"94\":\"17\",\"95\":\"17#intro-how-to-learn-vim\",\"96\":\"17#four-steps\",\"97\":\"17#linux中打开文件\",\"98\":\"17#模式切换\",\"99\":\"17#各种命令操作\",\"100\":\"17#appendix\",\"101\":\"17@0\",\"102\":\"17@1\",\"103\":\"18\",\"104\":\"19\",\"105\":\"19@0\",\"106\":\"19@1\",\"107\":\"20\",\"108\":\"20@0\",\"109\":\"20@1\",\"110\":\"21\",\"111\":\"21#markdown-introduction\",\"112\":\"21#markdown-config\",\"113\":\"21#markdown-extension\",\"114\":\"21#vuepress-enhancement\",\"115\":\"21#theme-enhancement\",\"116\":\"21#code-tabs\",\"117\":\"21#tabs\",\"118\":\"21#footnote\",\"119\":\"21#include-files\",\"120\":\"21#tex\",\"121\":\"21#tasklist\",\"122\":\"21#image-enhancement\",\"123\":\"21#superscript-and-subscript\",\"124\":\"21#component\",\"125\":\"21@0\",\"126\":\"21@1\",\"127\":\"22\",\"128\":\"22#page-title\",\"129\":\"22#page-information\",\"130\":\"22#page-content\",\"131\":\"22#components\",\"132\":\"22@0\",\"133\":\"22@1\",\"134\":\"23\",\"135\":\"23@0\",\"136\":\"24\",\"137\":\"24#highlight-features\",\"138\":\"24#bar\",\"139\":\"24#foo\",\"140\":\"25\",\"141\":\"25#定义\",\"142\":\"25#五个重要特性\",\"143\":\"25#好的算法\",\"144\":\"25#复杂度的渐进表示\",\"145\":\"25#最大子列和问题\",\"146\":\"25#排序算法\",\"147\":\"25#二分法\",\"148\":\"25#快速排序算法\",\"149\":\"25#内排序\",\"150\":\"25#外排序\",\"151\":\"25#查找算法\",\"152\":\"25#搜索算法\",\"153\":\"25#滑动窗口\",\"154\":\"26\",\"155\":\"26#介绍\",\"156\":\"26#引言\",\"157\":\"27\",\"158\":\"28\",\"159\":\"28#背景及目标\",\"160\":\"28#定义\",\"161\":\"28#逻辑结构\",\"162\":\"28#存储结构\",\"163\":\"28#抽象数据类型\",\"164\":\"28#线性结构\",\"165\":\"28#线性表\",\"166\":\"28#一元多项式及其运算\",\"167\":\"28#栈\",\"168\":\"28#队列\",\"169\":\"28#树\",\"170\":\"28#二叉树\",\"171\":\"28#堆\",\"172\":\"28#图\",\"173\":\"28#高级数据结构\",\"174\":\"29\",\"175\":\"30\",\"176\":\"31\",\"177\":\"32\",\"178\":\"33\",\"179\":\"33#介绍\",\"180\":\"33#_1-gof-gang-of-four\",\"181\":\"33#一、分类\",\"182\":\"33#_1-创作设计模式-创建型模式creational-design-patterns\",\"183\":\"33#_2-结构设计模式-结构型模式structural-design-patterns\",\"184\":\"33#_3-行为设计模式-行为型模式behavioral-design-patterns\",\"185\":\"33#_4-j2ee设计模式-特别关注表示层\",\"186\":\"33#二、详述\",\"187\":\"33#_1-适配器模式\",\"188\":\"33#_2-建造者模式\",\"189\":\"33#_3-工厂模式\",\"190\":\"33#_4-抽象工厂模式\",\"191\":\"33#_1-javascript设计模式\",\"192\":\"33#_2-javascript-mv-模式\",\"193\":\"33#_3-现代模块化设计模式\",\"194\":\"33#_4-javascript命名空间模式\",\"195\":\"33#_5-插件设计模式\",\"196\":\"33#一、单例模式\",\"197\":\"33#二、二段构建模式\",\"198\":\"33#三、管理者模式\",\"199\":\"33#四、外观模式\",\"200\":\"33#五、防御编程模式\",\"201\":\"33#六、组合模式\",\"202\":\"33#七、观察者模式\",\"203\":\"33#八、中介者模式\",\"204\":\"33#九、委托模式\",\"205\":\"33#练习\",\"206\":\"33#工厂模式-factory-pattern\",\"207\":\"33#抽象工厂模式-abstract-factory-pattern\",\"208\":\"33#单例模式-singleton-pattern\",\"209\":\"33#原型模式-prototype-pattern\",\"210\":\"33#桥接-bridge\",\"211\":\"33#过滤器模式-filter-pattern-或标准模式-criteria-pattern\",\"212\":\"33#组合模式-composite-pattern\",\"213\":\"33#装饰器模式-decorator-pattern\",\"214\":\"33#外观模式-facade-pattern\",\"215\":\"33#享元模式-flyweight-pattern\",\"216\":\"33#代理模式-proxy-pattern\",\"217\":\"33#责任链模式-chain-of-responsibility-pattern\",\"218\":\"33#命令模式-command-pattern\",\"219\":\"33#解释器模式-interpreter-pattern\",\"220\":\"33#迭代器模式-iterator-pattern\",\"221\":\"33#中介者模式-mediator-pattern\",\"222\":\"33#备忘录模式-memento-pattern\",\"223\":\"33#当对象间存在一对多关系时-则使用观察者模式-observer-pattern\",\"224\":\"33#状态模式-state-pattern\",\"225\":\"33#空对象模式-null-object-pattern\",\"226\":\"33#策略模式-strategy-pattern\",\"227\":\"33#模板模式-template-pattern\",\"228\":\"33#访问者模式-visitor-pattern\",\"229\":\"33#mvc-模式\",\"230\":\"33#业务代表模式-business-delegate-pattern\",\"231\":\"33#组合实体模式-composite-entity-pattern\",\"232\":\"33#数据访问对象模式-data-access-object-pattern-或-dao-模式\",\"233\":\"33#前端控制器模式-front-controller-pattern\",\"234\":\"33#拦截过滤器模式-intercepting-filter-pattern\",\"235\":\"33#服务定位器模式-service-locator-pattern\",\"236\":\"33#传输对象模式-transfer-object-pattern\",\"237\":\"33#设计模式相关的网站\",\"238\":\"34\",\"239\":\"34#一、开闭原则-open-close-principle\",\"240\":\"34#二、里氏替换原则-liskov-substitution-principle\",\"241\":\"34#三、依赖倒置原则-dependence-inversion-principle\",\"242\":\"34#四、单一职责原则\",\"243\":\"34#五、接口隔离原则-interface-segregation-principle\",\"244\":\"34#六、迪米特法则\",\"245\":\"34#七、合成复用原则-composite-reuse-principle\",\"246\":\"34@0\",\"247\":\"36\",\"248\":\"37\",\"249\":\"38\",\"250\":\"39\",\"251\":\"40\",\"252\":\"40#submodule-操作\",\"253\":\"40#clone-tag\",\"254\":\"40@0\",\"255\":\"40@1\",\"256\":\"41\",\"257\":\"41#介绍\",\"258\":\"41#常用命令\",\"259\":\"41#pnpm\",\"260\":\"41#npx\",\"261\":\"41@0\",\"262\":\"41@1\",\"263\":\"42\",\"264\":\"43\",\"265\":\"43#introduction\",\"266\":\"43#details\",\"267\":\"44\",\"268\":\"45\",\"269\":\"45#introduction\",\"270\":\"45#details\",\"271\":\"46\",\"272\":\"47\",\"273\":\"47#安装\",\"274\":\"47#虚拟环境\",\"275\":\"47#基础语法\",\"276\":\"47#界面\",\"277\":\"47#学习资料\",\"278\":\"48\",\"279\":\"49\",\"280\":\"50\",\"281\":\"51\",\"282\":\"51#概况\",\"283\":\"51#核心概念\",\"284\":\"51#主要使用步骤\",\"285\":\"52\",\"286\":\"52#nodejs版本切换工具\",\"287\":\"52#restful规范\",\"288\":\"53\",\"289\":\"53#关于编程\",\"290\":\"53#html\",\"291\":\"53#css\",\"292\":\"53#javascript\",\"293\":\"54\",\"294\":\"55\",\"295\":\"56\",\"296\":\"57\",\"297\":\"57#安装与编译\",\"298\":\"57#数据类型\",\"299\":\"57#变量声明\",\"300\":\"57#接口\",\"301\":\"57#函数\",\"302\":\"57#代码检查\",\"303\":\"57#一、使用tslint\",\"304\":\"57#二、使用eslint\",\"305\":\"58\",\"306\":\"59\",\"307\":\"59#fetch\",\"308\":\"59#eventloop\",\"309\":\"59#强缓存与协商缓存的区别\",\"310\":\"59#eventsource和长轮询的差别\",\"311\":\"59#websocket-是怎么保持的长连接\",\"312\":\"59#transform是否会调用gpu\",\"313\":\"59#浏览器渲染原理-重绘和重排-回流的区别-gc的两种类型是什么\",\"314\":\"60\",\"315\":\"60#_1-在div进行css3动画时-translate-scale-容易发生字体变模糊的情况\",\"316\":\"60#_2\",\"317\":\"61\",\"318\":\"61#核心知识点\",\"319\":\"64\",\"320\":\"64#_1-本地开发时-main-js中-import-scss未生效-编译build后生效\",\"321\":\"64#_2-luckysheet-无法导入图片问题-未处理onecellanchor\",\"322\":\"64#_3-chrome浏览器中如何防止input-type-password-自动选择存储的账号密码-230816\",\"323\":\"64#_4-vue中有没有好的方式处理中英文转换后的样式问题-230816\",\"324\":\"65\",\"325\":\"65#学好js-es标准是最好的资料\",\"326\":\"65#详细内容\",\"327\":\"65#基础\",\"328\":\"65#核心\",\"329\":\"65#进阶\",\"330\":\"65#推荐书籍\",\"331\":\"65#初级\",\"332\":\"65#中级\",\"333\":\"65#高级\",\"334\":\"66\",\"335\":\"66#强制类型转换\",\"336\":\"66@0\",\"337\":\"66@1\",\"338\":\"67\",\"339\":\"67#文档类型声明-doctype\",\"340\":\"67#各种标签\",\"341\":\"67#dom操作\",\"342\":\"67@0\",\"343\":\"67@1\",\"344\":\"68\",\"345\":\"68#grid布局实现自定义表格\",\"346\":\"68@0\",\"347\":\"68@1\",\"348\":\"69\",\"349\":\"69#_1-语义化标签\",\"350\":\"69#_2-video-audio\",\"351\":\"70\",\"352\":\"70#早期-固定宽度布局\",\"353\":\"70#早期-流式布局\",\"354\":\"70#弹性布局\",\"355\":\"70#响应式布局\",\"356\":\"70@0\",\"357\":\"70@1\",\"358\":\"71\",\"359\":\"71#markdown-introduction\",\"360\":\"71#markdown-config\",\"361\":\"71#markdown-extension\",\"362\":\"71#vuepress-enhancement\",\"363\":\"71#theme-enhancement\",\"364\":\"71#custom-container\",\"365\":\"71#tabs\",\"366\":\"71#code-tabs\",\"367\":\"71#superscript-and-subscript\",\"368\":\"71#align\",\"369\":\"71#attrs\",\"370\":\"71#footnote\",\"371\":\"71#mark\",\"372\":\"71#tasklist\",\"373\":\"71#image-enhancement\",\"374\":\"71#chart\",\"375\":\"71#echarts\",\"376\":\"71#flowchart\",\"377\":\"71#mermaid\",\"378\":\"71#tex\",\"379\":\"71#include-files\",\"380\":\"71#markdown-config-1\",\"381\":\"71#code-demo\",\"382\":\"71#stylize\",\"383\":\"71#playground\",\"384\":\"71#vue-playground\",\"385\":\"71@0\",\"386\":\"71@1\",\"387\":\"72\",\"388\":\"73\",\"389\":\"73#virtual-dom\",\"390\":\"73#ssr\",\"391\":\"74\",\"392\":\"74#inline\",\"393\":\"74#inline-block\",\"394\":\"74#block\",\"395\":\"74#flex\",\"396\":\"74#inline-flex\",\"397\":\"74#grid\",\"398\":\"74#inline-grid\",\"399\":\"74#table\",\"400\":\"74#none\",\"401\":\"75\",\"402\":\"75#settimeout-callback\",\"403\":\"75#generator\",\"404\":\"75#promise\",\"405\":\"75#async-await\",\"406\":\"76\",\"407\":\"76#什么是ecmascript-这里后续都用es代替\",\"408\":\"76#如何演变到现在的es-6-版本\",\"409\":\"76#如何查看各浏览器-nodejs对es6的支持度\",\"410\":\"76#如何处理es6的兼容问题-即如何使用babel转码器\",\"411\":\"76#新版本es7-请跳转es7\",\"412\":\"76#es6新特性有哪些\",\"413\":\"76#_1-let-和-const\",\"414\":\"76#_2-变量的解构赋值\",\"415\":\"76#_3-字符串扩展\",\"416\":\"76#_4-正则的扩展\",\"417\":\"76#_5-数值的扩展\",\"418\":\"76#_6-数组的扩展\",\"419\":\"76#_7-函数的扩展\",\"420\":\"76#_8-对象的扩展\",\"421\":\"76#_9-symbol\",\"422\":\"76#_10-proxy和reflect\",\"423\":\"76#_11-二进制数组\",\"424\":\"76#_12-set和map数据结构\",\"425\":\"76#_13-iterator和for-of循环\",\"426\":\"76#_14-generator函数\",\"427\":\"76#_15-promise对象\",\"428\":\"76#_16-异步操作和async函数\",\"429\":\"76#_17-class\",\"430\":\"76#_18-修饰器\",\"431\":\"76#_19-module\",\"432\":\"77\",\"433\":\"78\",\"434\":\"79\",\"435\":\"79#箭头函数\",\"436\":\"79#iife\",\"437\":\"80\",\"438\":\"80#原型链\",\"439\":\"81\",\"440\":\"81#this\",\"441\":\"81#call\",\"442\":\"81#apply\",\"443\":\"81#闭包\",\"444\":\"82\",\"445\":\"82#变量\",\"446\":\"82#关键字与保留字\",\"447\":\"82#严格模式\",\"448\":\"82#数据类型\",\"449\":\"82#操作符\",\"450\":\"82#语句\",\"451\":\"83\",\"452\":\"84\",\"453\":\"84#内置类型-七种\",\"454\":\"84#基本数据类型\",\"455\":\"84#引用数据类型\",\"456\":\"84#null\",\"457\":\"84#undefined\",\"458\":\"84#boolean\",\"459\":\"84#number\",\"460\":\"84#bigint\",\"461\":\"84#string\",\"462\":\"84#symbol\",\"463\":\"84#object\",\"464\":\"84#date\",\"465\":\"84#json\",\"466\":\"84@0\",\"467\":\"84@1\",\"468\":\"85\",\"469\":\"86\",\"470\":\"90\",\"471\":\"90#webpack\",\"472\":\"90#vite\",\"473\":\"90#两者的区别\",\"474\":\"91\",\"475\":\"91#单例模式\",\"476\":\"91#策略模式\",\"477\":\"91#代理模式\",\"478\":\"91#迭代器模式\",\"479\":\"91#发布-订阅者模式\",\"480\":\"91#命令模式\",\"481\":\"91#组合模式\",\"482\":\"91#模板方法模式\",\"483\":\"91#享元模式\",\"484\":\"91#职责链模式\",\"485\":\"91#中介者模式\",\"486\":\"91#装饰者模式\",\"487\":\"91#状态模式\",\"488\":\"91#适配器模式\",\"489\":\"92\",\"490\":\"92#单一职责\",\"491\":\"92#最少知识\",\"492\":\"92#开闭\",\"493\":\"93\",\"494\":\"93#commonjs\",\"495\":\"93#amd\",\"496\":\"93#cmd\",\"497\":\"94\",\"498\":\"94#接口与面向接口编程\",\"499\":\"94#合理使用三元运算符\",\"500\":\"94#合理使用链式调用\",\"501\":\"95\",\"502\":\"96\",\"503\":\"97\",\"504\":\"98\",\"505\":\"99\",\"506\":\"100\",\"507\":\"101\",\"508\":\"102\",\"509\":\"103\",\"510\":\"104\",\"511\":\"105\",\"512\":\"106\",\"513\":\"107\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2],\"1\":[1,51],\"2\":[1,11],\"3\":[5,69],\"4\":[2],\"5\":[1,7],\"6\":[1,12],\"7\":[1],\"8\":[1,7],\"9\":[1,3],\"10\":[1,5],\"11\":[1,7],\"12\":[2,4],\"13\":[1,53],\"14\":[1,18],\"15\":[1],\"16\":[1,2],\"17\":[1],\"18\":[2],\"19\":[1],\"20\":[1],\"21\":[1],\"22\":[1],\"23\":[1,4],\"24\":[1,42],\"25\":[1,7],\"26\":[1,26],\"27\":[2,4],\"28\":[1],\"29\":[2,27],\"30\":[2],\"31\":[3,4],\"32\":[1,7],\"33\":[2],\"34\":[1,3],\"35\":[1,3],\"36\":[1,2],\"37\":[1,5],\"38\":[2],\"39\":[1],\"40\":[1,2],\"41\":[1,2],\"42\":[1,2],\"43\":[1,2],\"44\":[1,4],\"45\":[2],\"46\":[1,1],\"47\":[1,1],\"48\":[2],\"49\":[2],\"50\":[1,4],\"51\":[1],\"52\":[1],\"53\":[1],\"54\":[2],\"55\":[1],\"56\":[1],\"57\":[1,3],\"58\":[1],\"59\":[1,5],\"60\":[2],\"61\":[1,28],\"62\":[2,42],\"63\":[1],\"64\":[1],\"65\":[2],\"66\":[1],\"67\":[1],\"68\":[1],\"69\":[1],\"70\":[1],\"71\":[1],\"72\":[1,13],\"73\":[1],\"74\":[2],\"75\":[1],\"76\":[1,9],\"77\":[1],\"78\":[1],\"79\":[4,4],\"80\":[2,3],\"81\":[2,18],\"82\":[2,9],\"83\":[3,9],\"84\":[2,6],\"85\":[3,83],\"86\":[1],\"87\":[2],\"88\":[2,9],\"89\":[2,7],\"90\":[2,30],\"91\":[1],\"92\":[1,5],\"93\":[1],\"94\":[1],\"95\":[1,8],\"96\":[2,7],\"97\":[1,4],\"98\":[1,27],\"99\":[1,163],\"100\":[1,1],\"101\":[null,null,1],\"102\":[null,null,2],\"103\":[2,17],\"104\":[4,40],\"105\":[null,null,1],\"106\":[null,null,1],\"107\":[1,44],\"108\":[null,null,1],\"109\":[null,null,1],\"110\":[2,32],\"111\":[2,19],\"112\":[2,25],\"113\":[2,18],\"114\":[2,16],\"115\":[2,18],\"116\":[2,2],\"117\":[1,2],\"118\":[1,7],\"119\":[2,2],\"120\":[1,26],\"121\":[1,6],\"122\":[2,8],\"123\":[3,4],\"124\":[1],\"125\":[null,null,1],\"126\":[null,null,1],\"127\":[2,10],\"128\":[2,20],\"129\":[2,27],\"130\":[2,30],\"131\":[1,29],\"132\":[null,null,1],\"133\":[null,null,3],\"134\":[2],\"135\":[null,null,1],\"136\":[1],\"137\":[2],\"138\":[1,2],\"139\":[1,2],\"140\":[1],\"141\":[1,19],\"142\":[1,30],\"143\":[1,17],\"144\":[1],\"145\":[1,14],\"146\":[1],\"147\":[1,34],\"148\":[1,75],\"149\":[1],\"150\":[1],\"151\":[1],\"152\":[1,6],\"153\":[1],\"154\":[1],\"155\":[1,8],\"156\":[1,18],\"157\":[1],\"158\":[1],\"159\":[1,13],\"160\":[1,34],\"161\":[1,13],\"162\":[1,6],\"163\":[1,54],\"164\":[1],\"165\":[1,33],\"166\":[1],\"167\":[1,37],\"168\":[1,9],\"169\":[1],\"170\":[1],\"171\":[1],\"172\":[1],\"173\":[1,2],\"174\":[1],\"175\":[1],\"176\":[1],\"177\":[1],\"178\":[1],\"179\":[1,11],\"180\":[6,3],\"181\":[2],\"182\":[6,16],\"183\":[6,22],\"184\":[6,33],\"185\":[4,25],\"186\":[2,1],\"187\":[2,96],\"188\":[2,53],\"189\":[2,68],\"190\":[2],\"191\":[2,175],\"192\":[4],\"193\":[2,5],\"194\":[2],\"195\":[2],\"196\":[2,8],\"197\":[2],\"198\":[2],\"199\":[2],\"200\":[2],\"201\":[2],\"202\":[2],\"203\":[2],\"204\":[2],\"205\":[1,36],\"206\":[4,128],\"207\":[5,175],\"208\":[4,285],\"209\":[4,177],\"210\":[3,125],\"211\":[6,107],\"212\":[4,141],\"213\":[4,126],\"214\":[4,97],\"215\":[4,176],\"216\":[4,132],\"217\":[6,145],\"218\":[4,146],\"219\":[4,118],\"220\":[4,107],\"221\":[4,117],\"222\":[4,108],\"223\":[5,135],\"224\":[4,126],\"225\":[5,86],\"226\":[4,103],\"227\":[4,111],\"228\":[4,108],\"229\":[2,84],\"230\":[5,86],\"231\":[5,94],\"232\":[8,115],\"233\":[5,83],\"234\":[5,96],\"235\":[5,118],\"236\":[5,111],\"237\":[1,36],\"238\":[1],\"239\":[6,25],\"240\":[6,21],\"241\":[6,15],\"242\":[2,13],\"243\":[6,1],\"244\":[2,11],\"245\":[6,3],\"246\":[null,null,1],\"247\":[1],\"248\":[1],\"249\":[3],\"250\":[1],\"251\":[1],\"252\":[2,12],\"253\":[2,8],\"254\":[null,null,1],\"255\":[null,null,1],\"256\":[1],\"257\":[1,4],\"258\":[1,8],\"259\":[1,8],\"260\":[1,7],\"261\":[null,null,1],\"262\":[null,null,1],\"263\":[1,4],\"264\":[2],\"265\":[1,5],\"266\":[1,2],\"267\":[1,4],\"268\":[2],\"269\":[1,5],\"270\":[1,2],\"271\":[1],\"272\":[1],\"273\":[1,22],\"274\":[1],\"275\":[1],\"276\":[1],\"277\":[1,2],\"278\":[1],\"279\":[1],\"280\":[1],\"281\":[1,1],\"282\":[1,1],\"283\":[1,4],\"284\":[1,25],\"285\":[1],\"286\":[1,16],\"287\":[1,6],\"288\":[1],\"289\":[1,1],\"290\":[1],\"291\":[1],\"292\":[1,7],\"293\":[1],\"294\":[1],\"295\":[1],\"296\":[1,4],\"297\":[1,23],\"298\":[1,144],\"299\":[1,1],\"300\":[1,4],\"301\":[1,100],\"302\":[1,29],\"303\":[2,36],\"304\":[2],\"305\":[1,34],\"306\":[1,7],\"307\":[1,5],\"308\":[1],\"309\":[1],\"310\":[1],\"311\":[2],\"312\":[1],\"313\":[4],\"314\":[1],\"315\":[5,31],\"316\":[2],\"317\":[1],\"318\":[1,6],\"319\":[1],\"320\":[7],\"321\":[4],\"322\":[6],\"323\":[4],\"324\":[1],\"325\":[1,19],\"326\":[1],\"327\":[1,10],\"328\":[1,15],\"329\":[1,11],\"330\":[1],\"331\":[1,8],\"332\":[1,8],\"333\":[1,7],\"334\":[1],\"335\":[1],\"336\":[null,null,2],\"337\":[null,null,1],\"338\":[1],\"339\":[3,8],\"340\":[1,6],\"341\":[1],\"342\":[null,null,2],\"343\":[null,null,1],\"344\":[1],\"345\":[1],\"346\":[null,null,2],\"347\":[null,null,1],\"348\":[1],\"349\":[2],\"350\":[3],\"351\":[1],\"352\":[2],\"353\":[2,2],\"354\":[1],\"355\":[1,11],\"356\":[null,null,2],\"357\":[null,null,2],\"358\":[1],\"359\":[2,19],\"360\":[2,26],\"361\":[2,18],\"362\":[2,16],\"363\":[2,18],\"364\":[2,28],\"365\":[1,2],\"366\":[2,2],\"367\":[3,4],\"368\":[1,7],\"369\":[1,6],\"370\":[1,7],\"371\":[1,7],\"372\":[1,6],\"373\":[2,8],\"374\":[1,28],\"375\":[1,28],\"376\":[1,12],\"377\":[1,17],\"378\":[1,26],\"379\":[2,30],\"380\":[2,14],\"381\":[2,2],\"382\":[1,10],\"383\":[1,2],\"384\":[2,10],\"385\":[null,null,2],\"386\":[null,null,1],\"387\":[1],\"388\":[1],\"389\":[2],\"390\":[1],\"391\":[1,1],\"392\":[1,10],\"393\":[2,5],\"394\":[1,2],\"395\":[1,20],\"396\":[2,1],\"397\":[1],\"398\":[2],\"399\":[1],\"400\":[1,7],\"401\":[1],\"402\":[3],\"403\":[1],\"404\":[1],\"405\":[2],\"406\":[1],\"407\":[3,24],\"408\":[3,36],\"409\":[2,21],\"410\":[3,9],\"411\":[3],\"412\":[1],\"413\":[4,30],\"414\":[2],\"415\":[2],\"416\":[2],\"417\":[2],\"418\":[2],\"419\":[2],\"420\":[2],\"421\":[2],\"422\":[2],\"423\":[2],\"424\":[2],\"425\":[3],\"426\":[2],\"427\":[2],\"428\":[2],\"429\":[2],\"430\":[2],\"431\":[2],\"432\":[1],\"433\":[1],\"434\":[1],\"435\":[1],\"436\":[1],\"437\":[1],\"438\":[1],\"439\":[1,2],\"440\":[1],\"441\":[1],\"442\":[1],\"443\":[1],\"444\":[1],\"445\":[1],\"446\":[1],\"447\":[1],\"448\":[1],\"449\":[1],\"450\":[1],\"451\":[1],\"452\":[1,27],\"453\":[3],\"454\":[1,7],\"455\":[1,4],\"456\":[1,5],\"457\":[1],\"458\":[1],\"459\":[1],\"460\":[2],\"461\":[1],\"462\":[1,5],\"463\":[1,7],\"464\":[1],\"465\":[1],\"466\":[null,null,2],\"467\":[null,null,1],\"468\":[1],\"469\":[1],\"470\":[1],\"471\":[1],\"472\":[1],\"473\":[1],\"474\":[1,11],\"475\":[1],\"476\":[1],\"477\":[1],\"478\":[1],\"479\":[3],\"480\":[1],\"481\":[1],\"482\":[1],\"483\":[1],\"484\":[1],\"485\":[1],\"486\":[1],\"487\":[1],\"488\":[1],\"489\":[1],\"490\":[1],\"491\":[1],\"492\":[1],\"493\":[1],\"494\":[1],\"495\":[1],\"496\":[1],\"497\":[1],\"498\":[1],\"499\":[1,3],\"500\":[1,3],\"501\":[1,12],\"502\":[1,3],\"503\":[1],\"504\":[1],\"505\":[1],\"506\":[1],\"507\":[1],\"508\":[1],\"509\":[1],\"510\":[1],\"511\":[1],\"512\":[1],\"513\":[1]},\"averageFieldLength\":[1.693395985731987,27.42392278748536,0.1783294326889521],\"storedFields\":{\"0\":{\"h\":\"About Author\"},\"1\":{\"h\":\"介绍\",\"t\":[\"Li Peng is a Front End Developer and a Pharmacist.\",\"He has experiences in Front End Developing and Pharmaceutical industry for a couple of years.\",\"He always believes that a good attitude is the basis of doing anything well. Keeping a passion for technics is natural to him.\",\"He also has a lot of interests. While he is free, he likes keeping fit, playing the guitar, playing basketball and so on.\"]},\"2\":{\"h\":\"关于学习\",\"t\":[\"提示\",\"What、Why、When、How、Notice\",\"定义、优缺点、简单示例、各个场景的用法、注意事项\"]},\"3\":{\"h\":\"计算机基础（原理，以硬件为主，软件建立在硬件的基础之上）\",\"t\":[\"一、计算机系统概论\",\"计算机发展\",\"计算机应用\",\"计算机组成\",\"硬件\",\"软件\",\"计算机系统的层次结构\",\"传统冯诺依曼计算机结构与现代的计算机系统结构\",\"二、计算机中数据表示\",\"进位计数制及其之间的转换\",\"定点数的表示\",\"浮点数的表示\",\"非数值数据的表示\",\"数据校验码\",\"三、运算方法与运算器\",\"定点数的算术运算与实现\",\"逻辑运算与移位操作\",\"定点运算器\",\"浮点数的算术运算与浮点数运算器\",\"四、存储器系统\",\"多级存储体系结构\",\"技术指标\",\"存储元电路\",\"五、指令系统\",\"指令系统与性能\",\"六、控制器\",\"七、接口与输入输出\",\"接口概述（输入接口与输出接口）\",\"输入输出方式\",\"八、外围设备\",\"外围设备概述\",\"输入设备\",\"输出设备\",\"外存储设备\",\"九、总线\",\"总线技术概述\",\"总线系统结构\",\"总线信息传送方式及定时\",\"总线的仲裁\",\"计算机中的总线\",\"新一代总线\",\"十、并行处理与互连设备\",\"并行处理的概念\",\"并行处理机基本结构\",\"SIMD 计算机基本结构\",\"SIMD 计算机的应用\",\"互连网络的概念\",\"静态互连网络\",\"动态互连网络\",\"互连网络的消息传递机制\",\"十一、多处理机与机群系统\",\"多处理机系统特点与分类\",\"多处理机软件和典型的多处理机系统\",\"机群系统\",\"码点\",\"操作系统\"]},\"4\":{\"h\":\"一、计算机系统概论\"},\"5\":{\"h\":\"计算机发展\",\"t\":[\"划分为5个阶段\",\"电子管时代\",\"晶体管时代\",\"集成电路时代\",\"大规模/超大规模集成电路时代\",\"超级规模集成电路时代\"]},\"6\":{\"h\":\"计算机应用\",\"t\":[\"科学计算\",\"数据处理\",\"实时控制 \",\"机械\",\"导弹军事\",\"等等\",\"计算机辅助系统 \",\"设计\",\"制造\",\"等等\",\"人工智能\",\"远程教育\",\"电子商务\"]},\"7\":{\"h\":\"计算机组成\"},\"8\":{\"h\":\"硬件\",\"t\":[\"五大组成部分，其中运算器和控制器结合起来称为CPU\",\"运算器\",\"控制器\",\"存储器\",\"输入设备\",\"输出设备\"]},\"9\":{\"h\":\"软件\",\"t\":[\"系统软件\",\"应用软件： 用户为解决某个应用领域中的各类问题而编写开发的程序\"]},\"10\":{\"h\":\"计算机系统的层次结构\",\"t\":[\"微程序设计层\",\"指令系统层\",\"操作系统层\",\"汇编语言层\",\"高级语言层\"]},\"11\":{\"h\":\"传统冯诺依曼计算机结构与现代的计算机系统结构\",\"t\":[\"前者以CPU为中心，集中顺序控制的串行机制（数据直接进入CPU进行处理），后者以存储器为中心（存储器的数据流进入CPU，CPU再进行控制）\"]},\"12\":{\"h\":\"二、计算机中数据表示\",\"t\":[\"计算机处理的是数据是二进制，形式上最简单，物理上最可靠 数据包括数值型数据和非数值型数据\"]},\"13\":{\"h\":\"进位计数制及其之间的转换\",\"t\":[\"计算机内部职能识别二进制数，程序设计时，数据往往使用十进制或十六进制表示 进位计数制的两个特征：\",\"基数R： 指进制数中数码所允许取值的个数，且计数规则是 逢R进1\",\"位权W： 指基数R的i次幂，表示进制数中第i位的位权\",\"十进制\",\"后缀为D\",\"二进制\",\"后缀为B\",\"十六进制\",\"后缀为H，当十六进制数首位为A~F时，其前必须加“0”\",\"四位二进制数的编码与一位十六进制数的数码之间存在着一一对应的关系，所以转换比较方便\",\"0000 - 0 0001 - 1 0010 - 2 0011 - 3 0100 - 4 0101 - 5 0110 - 6 0111 - 7 1000 - 8 1001 - 9 1010 - A 1011 - B 1100 - C 1101 - D 1110 - E 1111 - F\"]},\"14\":{\"h\":\"定点数的表示\",\"t\":[\"计算机本身是无法识别数据的符号的，所以也必须用0和1来表示符号，规定：数据字的最高位为符号位，并且用 0 表示 + ; 1 表示 - 我们把书写形式（正、负符号加绝对值）的数据称为真值，机器内的存储形式（符号位加二进制数值）的数据称为机器数 数据中的小数点在计算机中有两种表示方法，即定点表示法和浮点表示法\"]},\"15\":{\"h\":\"浮点数的表示\"},\"16\":{\"h\":\"非数值数据的表示\",\"t\":[\"ASCII码\",\"字符串\"]},\"17\":{\"h\":\"数据校验码\"},\"18\":{\"h\":\"三、运算方法与运算器\"},\"19\":{\"h\":\"定点数的算术运算与实现\"},\"20\":{\"h\":\"逻辑运算与移位操作\"},\"21\":{\"h\":\"定点运算器\"},\"22\":{\"h\":\"浮点数的算术运算与浮点数运算器\"},\"23\":{\"h\":\"\",\"t\":[\"视频, 世界上有太多令人震撼的事情了，每一颗螺丝钉造就了这个精彩的世界！\"]},\"24\":{\"h\":\"多级存储体系结构\",\"t\":[\"cache\",\"高速缓冲处理器 作用： 解决CPU与主存之间速度匹配问题，分为指令cache和数据cache 又称： 高速小容量存储器，可以在CPU内部（内部cache）、又可以在CPU外部（外部cache），\",\"主存（内存）\",\"主要是半导体存储器，用于存放当前运行的程序和数据结构 存储单元，存储地址，一一对应，一般是按字节编址\",\"只读存储器（ROM）FE2PROM\",\"系统断电后不会丢失存储信息\",\"随机存储器（RAM），主要是这个\",\"系统断电后自动丢失其中存储信息\",\"闪速存储器\",\"并行存储器\",\"顺序存储器（SAM）=> 与物理位置有关\",\"辅存结构\",\"虚拟存储器：包括硬盘（一般磁表面存储器）、U盘、光盘等\",\"页式虚拟存储器\",\"段式虚拟存储器\",\"段页式虚拟存储器\"]},\"25\":{\"h\":\"技术指标\",\"t\":[\"存储容量\",\"存取时间\",\"存储周期\",\"存储带宽\",\"可靠性\",\"性能/性价比\"]},\"26\":{\"h\":\"存储元电路\",\"t\":[\"存储 1， 0的电路， 存储器芯片：N(字数，2的n次方)*m(位数，一般为1，4，8) (bit) 总共需要这么多个存储元电路，这些个电路排成矩阵，成为存储体 存储体与外围电路集成在一块硅片上，称为存储器组件\",\"六管静态存储元\",\"单管动态存储元\",\"只读存储器存储元\",\"CPU通过地址信号线、数据信号线、控制信号线，传到地址总线，再与存储器进行交流\"]},\"27\":{\"h\":\"五、指令系统\",\"t\":[\"指计算机所能执行的全部指令的集合，成为指令集，软件设计的基础 一台计算机指令系统的优劣直接影响着计算机系统的性能和功能\"]},\"28\":{\"h\":\"指令系统与性能\"},\"29\":{\"h\":\"六、控制器\",\"t\":[\"1、CPU -> 运算器（数据加工） + 控制器（指令操作控制、时序控制）\",\"作用：保证程序中指令执行顺序的正确； 实现一条指令的功能\",\"2、控制器： 程序计数器、指令寄存器、指令译码器、时序产生器、操作控制器； 取指令、分享指令、执行指令\",\"运算器： 算术逻辑单元、累加寄存器、数据缓冲寄存器、状态寄存器；\",\"3、\"]},\"30\":{\"h\":\"七、接口与输入输出\"},\"31\":{\"h\":\"接口概述（输入接口与输出接口）\",\"t\":[\"接口的功能与组成\",\"I/O 端口的编址方式\"]},\"32\":{\"h\":\"输入输出方式\",\"t\":[\"直接存储器传输（DMA）方式\",\"程序控制传送方式\",\"中断方式\",\"直接存储器方式\",\"通道方式\"]},\"33\":{\"h\":\"八、外围设备\"},\"34\":{\"h\":\"外围设备概述\",\"t\":[\"外围设备的概述\",\"外围设备的分类\",\"外围设备的功能\"]},\"35\":{\"h\":\"输入设备\",\"t\":[\"键盘\",\"鼠标\",\"其他输入设备\"]},\"36\":{\"h\":\"输出设备\",\"t\":[\"显示器\",\"打印机\"]},\"37\":{\"h\":\"外存储设备\",\"t\":[\"磁表面存储器的原理\",\"磁记录方式\",\"硬磁盘存储器\",\"光盘存储设备\",\"闪存\"]},\"38\":{\"h\":\"九、总线\"},\"39\":{\"h\":\"总线技术概述\"},\"40\":{\"h\":\"总线系统结构\",\"t\":[\"总线通道组成\",\"总线结构类型\"]},\"41\":{\"h\":\"总线信息传送方式及定时\",\"t\":[\"总线信息传送方式\",\"总线定时\"]},\"42\":{\"h\":\"总线的仲裁\",\"t\":[\"集中式仲裁\",\"分布式仲裁\"]},\"43\":{\"h\":\"计算机中的总线\",\"t\":[\"内部总线\",\"外部通信总线\"]},\"44\":{\"h\":\"新一代总线\",\"t\":[\"PCI Express 总线\",\"USB 总线\"]},\"45\":{\"h\":\"十、并行处理与互连设备\"},\"46\":{\"h\":\"并行处理的概念\",\"t\":[\"并行性\"]},\"47\":{\"h\":\"并行处理机基本结构\",\"t\":[\"并行处理机的两种典型结构\"]},\"48\":{\"h\":\"SIMD 计算机基本结构\"},\"49\":{\"h\":\"SIMD 计算机的应用\"},\"50\":{\"h\":\"互连网络的概念\",\"t\":[\"是一种由开关元件按照一定的拓扑结构和控制方式将集中式系统或分布式系统中的结点连接起来所构成的网络，这些结点可能是处理器、存储模块或者其他设备，他们通过互连网络相互连接并进行信息交换\"]},\"51\":{\"h\":\"静态互连网络\"},\"52\":{\"h\":\"动态互连网络\"},\"53\":{\"h\":\"互连网络的消息传递机制\"},\"54\":{\"h\":\"十一、多处理机与机群系统\"},\"55\":{\"h\":\"多处理机系统特点与分类\"},\"56\":{\"h\":\"多处理机软件和典型的多处理机系统\"},\"57\":{\"h\":\"机群系统\",\"t\":[\"宏： 就是一些命令组织在一起，作为一个单独命令完成一个特定任务\"]},\"58\":{\"h\":\"码点\"},\"59\":{\"h\":\"操作系统\",\"t\":[\"Windows\",\"Linux\",\"MacOS\",\"Android\",\"iOS\"]},\"60\":{\"h\":\"Portfolio Home\"},\"61\":{\"h\":\"Description\",\"t\":[\"This is a portfolio home page demo.\",\"To use this layout, you should set home: true and portfolio: true in the page front matter.\",\"For related configuration docs, please see portfolio homepage.\"]},\"62\":{\"h\":\"Project home\",\"t\":[\"This is an example of a project homepage. You can place your main content here.\",\"To use this layout, you need to set home: true in the page front matter.\",\"For related descriptions of configuration items, please see Project HomePage Layout Config.\"]},\"63\":{\"h\":\"程序设计\"},\"64\":{\"h\":\"软件开发\"},\"65\":{\"h\":\"E-R模型\"},\"66\":{\"h\":\"CPU\"},\"67\":{\"h\":\"数据表示\"},\"68\":{\"h\":\"硬件基本组成\"},\"69\":{\"h\":\"运算器\"},\"70\":{\"h\":\"控制器\"},\"71\":{\"h\":\"计算机网络\"},\"72\":{\"h\":\"TCP\",\"t\":[\"A (Address) 记录是用来指定主机名（或域名）对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的web server，FTP server等上面。同时也可以设置域名的子域名。 通俗的来讲A记录就是服务器的IP,域名绑定A记录就是告诉DNS,当你输入域名的时候给你引导向设置在DNS的A记录所对应的服务器\"]},\"73\":{\"h\":\"Command\"},\"74\":{\"h\":\"passwd root\"},\"75\":{\"h\":\"reboot\"},\"76\":{\"h\":\"\",\"t\":[\"vi /etc/yum.repos.d/mysql-community.repo\",\"gpgcheck=0\"]},\"77\":{\"h\":\"Linux\"},\"78\":{\"h\":\"Linux介绍\"},\"79\":{\"h\":\"1. Distributions（发行版）\",\"t\":[\"每个distribution除了架构的严谨度与选择的套件内容外，其实差异不太大\",\"Ubuntu\",\"CentOS\"]},\"80\":{\"h\":\"，linux）\",\"t\":[\"宝塔是一个运维工具，没必要深入去了解学习，知道基本怎么用就OK\"]},\"81\":{\"h\":\"1. 安装\",\"t\":[\"通过xshell等工具，进入主机空间（以阿里云，主机空间最好干净一些些，以免发生莫名其妙的情况）\",\"yum install -y wget && wget -O install.sh http://download.bt.cn/install/install.sh && sh install.sh\",\"等待安装完成即可；安装完最后可以看到log中有登录账号和密码等；\"]},\"82\":{\"h\":\"2. 上传代码\",\"t\":[\"进入宝塔登录界面（一般是 域名:8888）进行登录；\",\"【文件】 - 【上传代码包】-【解压】；\"]},\"83\":{\"h\":\"3. 安装环境，创建网站\",\"t\":[\"【软件管理】 - 安装相关的环境（注意版本）；\",\"【数据库】- 【root密码】；\",\"【网站】-【添加站点】-【指定好根目录和环境版本】；\"]},\"84\":{\"h\":\"4. 进入网站域名\",\"t\":[\"【一般为install文件夹】- 【设置项目的数据库，数据之类的】- 【完成】；\",\"完成之后即可访问对应的页面；\"]},\"85\":{\"h\":\"Linux操作(基本命令)\",\"t\":[\"ls # -al 显示包括隐藏文件 ll # 显示文件列表详细信息 mkdir # 目录名 建立目录 touch # 新建文件 uname # 显示版本信息 dir # 显示当前目录文件 pwd # 查询当前所在的目录位置 cd # cd ..回到上一层目录，注意cd 与..之间有空格。cd /返回到根目录。 cat # 文件名 查看文件内容 cat >abc.txt # 往abc.txt文件中写上内容。 more # 文件名 以一页一页的方式显示一个文本文件。 cp # 复制文件 mv # 移动文件 rm 文件名 # 删除文件，rm -a 目录名删除目录及子目录 rmdir # 删除子目录，目录内没有文档。 chmod # 设定档案或目录的存取权限 grep # 在档案中查找字符串 diff # 档案文件比较 find # 档案搜寻 date # 现在的日期、时间 who # 查询目前和你使用同一台机器的人以及Login时间地点 w # 查询目前上机者的详细资料 whoami # 查看自己的帐号名称 groups # 查看某人的Group passwd # 更改密码 history # 查看自己下过的命令 ps # 显示进程状态 kill # 停止某进程 gcc # 黑客通常用它来编译C语言写的文件 su # 权限转换为指定使用者 telnet IP # telnet连接对方主机（同win2K），当出现bash$时就说明连接成功。 ftp # ftp连接上某服务器（同win2K） netstat -nap # 查看端口号\"]},\"86\":{\"h\":\"Linux上传下载工具\"},\"87\":{\"h\":\"1. FileZilla\"},\"88\":{\"h\":\"2. lrzsz\",\"t\":[\"yum insall lrzsz # rz 上传 rz # sz 下载 sz [file]\"]},\"89\":{\"h\":\"3. sftp\",\"t\":[\"通过 sftp 协议进行连接\",\"# 上传 put # 下载 get\"]},\"90\":{\"h\":\"Linux 下载解压文件过程\",\"t\":[\"# 下载 wget [url] # 解压 tar xf [name].xz cd ./[name] # 修改环境变量 profile, 先备份 cp /etc/profile /etc/profile.bak vim /etc/profile # 添加 export PATH=$PATH:*/bin # 使之立即生效 source /etc/profile # 单单使用 export PATH=$PATH:*/bin 是 临时添加环境变量 # 解压zip文件 # 下载unzip unzip [file]\"]},\"91\":{\"h\":\"MacOS\"},\"92\":{\"h\":\"卸载软件\",\"t\":[\"从Finder进入，点击左侧列表application，将其拖入废纸篓中清空即可\",\"对于大软件，可以从application中对应的应用子文件夹中找到卸载文件进行卸载即可\"]},\"93\":{\"h\":\"操作系统\"},\"94\":{\"h\":\"Vim\"},\"95\":{\"h\":\"\",\"t\":[\"工具是拿来用的，不要让它成为一个负担！\",\"可以利用XShell或是vscode进行练习\",\"vim是vi的加强版（升级版），是一个编辑器，不仅兼容vi的所有指令，而且还有一些新的特性在里面\"]},\"96\":{\"h\":\"Four Steps\",\"t\":[\"Survive\",\"Feel Comfortable\",\"Better, Stronger, Faster\",\"SuperPower\"]},\"97\":{\"h\":\"Linux中打开文件\",\"t\":[\"vi [filename] vim [filename]\"]},\"98\":{\"h\":\"模式切换\",\"t\":[\"正常模式\",\"一般用于浏览文件，也包括一些复制、粘贴、删除等操作。启动vim后默认位于正常模式。不论，位于什么模式下，Esc键按两下都会进入正常模式\",\"输入模式\",\"正常模式下 i,I,a,A等，会进入插入模式\",\"命令模式\",\"正常模式下，按下:键，会进入命令模式。可执行一些输入并执行一些vim或插件提供的指令，就像shell一样\",\"可视模式\",\"正常模式下按下v V ctrl+v可以进入可视模式，选择文本\"]},\"99\":{\"h\":\"各种命令操作\",\"t\":[\"正常模式下\",\"dd 删除当前行，并把删除的行存到剪贴板里，有复制的功能\",\"y 复制选中的内容\",\"yy 复制一行\",\"p 粘贴剪贴板的内容\",\"0 光标移动到行头\",\"$ 光标移动到本行行尾\",\"^ 到该行第一个非空字符处 (Shift+6)\",\"g_ 到该行最后一个非空字符处\",\"/pattern 查找对应的文字, 按Enter键结束, 上下选择按n、N\",\"u 撤销到上一步\",\"Ctrl+r 重新操作上一步，redo\",\"a 在光标末尾追加插入\",\"A 在行尾追加插入\",\"gg 回到页头\",\"G 到文件结束 (Shift+g)\",\"h 左移\",\"j 下移\",\"k 上移\",\"l 右移\",\"H Move to top of screen\",\"M Move to middle of screen\",\"L Move to bottom of screen\",\"% Move to associate {} () []\",\"w 下一个单词\",\"W Move to next blank delimited word\",\"b 移到单词最左边\",\"B Move to the beginning of blank delimited word\",\"x 删除光标下面的字符\",\"o 在当前行下面插入新的一行\",\"O 在当前行之前插入新的一行\",\"cw 替换当前光标到单词末尾\",\"Ctrl + f 下一页\",\"Ctrl + b 上一页\",\"zz 让光标所在的行居屏幕中央\",\"zt 让光标所在的行居屏幕最上一行\",\"zb 让光标所在的行居屏幕最下一行\",\"w/b/e 单词移动\",\"W/B/E 单词移动（更快）\",\". 重复执行上一条命令\",\"f/F:查询 f+（想查询的单词）\",\"v+i+大括号/中括号/单引号/双引号 选中括号、引号里的内容。\",\"v+a+大括号/中括号/单引号/双引号 选中括号、引号里的内容(包含括号)。\",\"( Move a sentence back\",\") Move a sentence forward\",\"{ Move a paragraph back\",\"} Move a paragraph forward\",\"全选操作： ggvG\",\"全部复制： ggyG\",\"全部删除： dG\",\"repeat Yourself: 2dd、3p、100idesu [Esc]、.、3.\",\"NG 这里的N是指行数，跳到第几行\",\"% 跳到括号那里\",\"* 跳到下一个相同word处\",\"0y$ 复制整行,这里 y的功能可类比到dvgUgu\",\"多行操作: ctrl+v jjj shift+i\",\"输入模式下\",\"跟普通的输入文字是一样的\",\"命令模式下\",\":n 跳到第几页\",\":wq:xZZ 保存并退出\",\":q! 强制退出，不保存\",\":w 保存\",\":e 打开文件\",\":saveas 另存为\",\"替换全局所有 :%s/aaa/bbb/g\",\"替换第一行 :s/aaa/bbb/, :s/aaa/bbb/g\",\"可视模式下\",\"ctrl+s 让 vim 处于不可输入的状态， 这个时候Ctrl + q可以退出\"]},\"100\":{\"h\":\"Appendix\",\"t\":[\"vim学习视频\"]},\"101\":{\"c\":[\"server\"]},\"102\":{\"c\":[\"linux, ide\"]},\"103\":{\"h\":\"Windows OS\",\"t\":[\"@echo off E: ::cd E:/a ::start cmd /k \\\"echo 1 && echo2\\\" cd E:/b start cmd /k \\\"echo 3 && echo 4\\\" cd E:/c start cmd /k \\\"echo 5 && echo 6\\\"\"]},\"104\":{\"h\":\"Disabling layout and features\",\"t\":[\"You can disable some function and layout on the page by setting the Frontmatter of the page.\",\"This page is an demo that disables the following features:\",\"Navbar\",\"Sidebar\",\"Breadcrumb\",\"Page information\",\"Contributors\",\"Edit link\",\"Update time\",\"Prev/Next link\",\"Comment\",\"Footer\",\"Back to top button\"]},\"105\":{\"c\":[\"Guide\"]},\"106\":{\"c\":[\"disable\"]},\"107\":{\"h\":\"Layout\",\"t\":[\"The layout contains:\",\"Navbar\",\"Sidebar\",\"Footer\",\"Also each page can contain:\",\"BreadCrumb\",\"Title and information\",\"TOC (Table of Contents)\",\"Meta information including update time and contributors\",\"Comments\",\"The theme also has the following elements:\",\"Darkmode button\",\"Back to top button\",\"Print button\",\"You can customize them in theme options and page frontmatter.\"]},\"108\":{\"c\":[\"Guide\"]},\"109\":{\"c\":[\"Layout\"]},\"110\":{\"h\":\"Markdown Enhance\",\"t\":[\"VuePress basically generate pages from Markdown files. So you can use it to generate documentation or blog sites easily.\",\"You should create and write Markdown files, so that VuePress can convert them to different pages according to file structure.\"]},\"111\":{\"h\":\"Markdown Introduction\",\"t\":[\"If you are a new learner and don't know how to write Markdown, please read Markdown Intro and Markdown Demo.\"]},\"112\":{\"h\":\"Markdown Config\",\"t\":[\"VuePress introduce configuration for each markdown page using Frontmatter.\",\"Frontmatter\",\"Frontmatter is an important concept in VuePress. If you don't know it, you need to read Frontmatter Introduction.\"]},\"113\":{\"h\":\"Markdown Extension\",\"t\":[\"The Markdown content in VuePress will be parsed by markdown-it, which supports syntax extensions via markdown-it plugins.\"]},\"114\":{\"h\":\"VuePress Enhancement\",\"t\":[\"To enrich document writing, VuePress has extended Markdown syntax.\",\"For these extensions, please read Markdown extensions in VuePress.\"]},\"115\":{\"h\":\"Theme Enhancement\",\"t\":[\"By using vuepress-plugin-md-enhance, the theme extends more Markdown syntax and provides richer writing functions.\"]},\"116\":{\"h\":\"Code Tabs\",\"t\":[\"View Detail\"]},\"117\":{\"h\":\"Tabs\",\"t\":[\"View Detail\"]},\"118\":{\"h\":\"Footnote\",\"t\":[\"This text has footnote[1].\",\"View Detail\"]},\"119\":{\"h\":\"Include files\",\"t\":[\"View Detail\"]},\"120\":{\"h\":\"TeX\",\"t\":[\"$$ \\\\frac {\\\\partial^r} {\\\\partial \\\\omega^r} \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) = \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) \\\\left{(\\\\log y)^r + \\\\sum_{i=1}^r \\\\frac {(-1)^i r \\\\cdots (r-i+1) (\\\\log y)^{r-i}} {\\\\omega^i} \\\\right} $$\",\"View Detail\"]},\"121\":{\"h\":\"Tasklist\",\"t\":[\" Plan A\",\" Plan B\",\"View Detail\"]},\"122\":{\"h\":\"Image Enhancement\",\"t\":[\"Support setting color scheme and size.\",\"View Detail\"]},\"123\":{\"h\":\"Superscript and Subscript\",\"t\":[\"19th H2O\",\"View Detail\"]},\"124\":{\"h\":\"Component\"},\"125\":{\"c\":[\"Guide\"]},\"126\":{\"c\":[\"Markdown\"]},\"127\":{\"h\":\"Page Config\",\"t\":[\"Content before more comment is regarded as page excerpt.\"]},\"128\":{\"h\":\"Page Title\",\"t\":[\"The first H1 title in Markdown will be regarded as page title.\",\"You can also set title in Markdown's Frontmatter:\",\"--- title: Page Title ---\"]},\"129\":{\"h\":\"Page Information\",\"t\":[\"You can set page information in Markdown's Frontmatter.\",\"The author is Ms.Hope.\",\"The writing date is January 1, 2020\",\"Category is \\\"Guide\\\"\",\"Tags are \\\"Page Config\\\" and \\\"Guide\\\"\"]},\"130\":{\"h\":\"Page Content\",\"t\":[\"You are free to write your Markdown here.\",\"Assets\",\"You can place images besides your Markdown files nd use relative links.\",\"For images in .vuepress/public directory, please use absolute links (i.e.: starting with /).\"]},\"131\":{\"h\":\"Components\",\"t\":[\"Each markdown page is converted into a Vue component, which means you can use Vue syntax in Markdown:\",\"{{ 1 + 1 }}\",\"{{ i }}\",\"You can also create and import your own components.\"]},\"132\":{\"c\":[\"Guide\"]},\"133\":{\"c\":[\"Page config\",\"Guide\"]},\"134\":{\"h\":\"Features demo\"},\"135\":{\"c\":[\"Guide\"]},\"136\":{\"h\":\"Guide\"},\"137\":{\"h\":\"Highlight Features\"},\"138\":{\"h\":\"Bar\",\"t\":[\"baz\",\"...\"]},\"139\":{\"h\":\"Foo\",\"t\":[\"ray\",\"...\"]},\"140\":{\"h\":\"算法\"},\"141\":{\"h\":\"定义\",\"t\":[\"Algorithm\",\"一个有限指令集\",\"接受一些输入（有些情况下不需要输入）\",\"产生输出\",\"一定在有限步骤之后终止\",\"每一条指令：有充分明确的目标，不可以有歧义；在计算机能处理的范围之内；描述应不依赖于任何一种计算机语言以及具体实现\",\"所以学习算法最重要的是学习算法的设计过程（算法思维），而不是算法本身，理论要与实践相结合\",\"等到算法能力掌握到一定程度的时候，再去学习复杂度算法这些\",\"数据结构的价值，在于其思维逻辑结构层面的价值\"]},\"142\":{\"h\":\"五个重要特性\",\"t\":[\"有穷性\",\"确定性\",\"可行性： 可以通过基本运算有限次执行来实现\",\"有输入\",\"有输出\",\"// 示例： 选择排序伪代码 void SelectionSort (int List[], int N) { for(int i = 0; i < N; i++) { // 从List[i] 到 List[N-1] 中找最小元，并将其位置赋值给MinPosition MinPostion = ScanForMin(List, i, N-1) // 将未排序部分的最小元换到有序部分的最后位置 Swap(List[i], List[MinPosition]) } }\"]},\"143\":{\"h\":\"好的算法\",\"t\":[\"指标：\",\"空间复杂度S(n) Space\",\"写成的程序在执行时占用存储单元的长度\",\"长度往往与输入数据的规模n有关\",\"事件复杂度T(n) Time\",\"写成的程序在执行时耗费时间的长度\",\"长度往往与输入数据的规模n有关\",\"机器运算加减法要比乘除法要快很多\",\"分析一般算法的效率：\",\"最坏情况复杂度Tworst(n)\",\"平均复杂度Tavg(n) Tavg(n) <= Tworst(n)\",\"所以一般就分析最坏情况复杂度\"]},\"144\":{\"h\":\"复杂度的渐进表示\"},\"145\":{\"h\":\"最大子列和问题\",\"t\":[\"// 给定N个整数的序列{ A1,... An}, 求函数f(i, j) = max{0, ∑ k=i j Ak} 的最大值\"]},\"146\":{\"h\":\"排序算法\"},\"147\":{\"h\":\"二分法\",\"t\":[\"void HalfSort(int List[], int N, int X) { // 取中间值, Min , Max Min = 0 Max = N - 1 Middle = (Max + Min)/2 while(Min <= Max) { if (List[Middle] < X) { Min = Middle Middle = (Max + Min)/2 } else if (List[Middle] > X) { Max = Middle Middle = (Max + Min)/2 } else { return Middle } } // 没找到 return -1 } // 空间复杂度 S(n) = O(1) // 时间复杂度：T(n) 最好 O(1), 最坏： C log(n)\"]},\"148\":{\"h\":\"快速排序算法\",\"t\":[\"选定基准值\",\"分区（小于基准值放左边，大于基准值放右边）；\",\"对于左边与右边的分区递归进行分区（partition）；\",\"第一次轮n次；第二次轮n-1次，，，联想到二叉树，树的高度越低效率就越高\",\"// 选择排序 console.time(1); let arr = [8,3,24,45,33,23,41,54,33,22,7,7,4,9,0,110]; let sortedArr = []; function chooseSort(arr) { if(arr.length == 0) { return } for(let i = 1, len = arr.length; i < len; i++) { if(arr[i] <= arr[0]) { let temp = arr[0]; arr[0] = arr[i]; arr[i] = temp; } } sortedArr.push(arr.splice(0,1)[0]); chooseSort(arr); } // chooseSort(arr); // console.log(sortedArr); // arr.sort((a,b) => { // return a-b; // }) // console.log(arr) console.timeEnd(1); // 快速排序 console.time(2); let arr = [8,3,24,45,33,23,41,54,33,22,7,7,4,9,0,110]; function quickSort(arr) { if(arr.length < 2) { return arr; } let basic = arr[0]; let left = []; let right = []; for(let i = 1, len = arr.length; i < len; i++) { if(arr[i] < basic) { left.push(arr[i]) } if(arr[i] >= basic) { right.push(arr[i]) } } return quickSort(left).concat([basic]).concat(quickSort(right)); } console.log(quickSort(arr)); console.timeEnd(2);\",\"快排优化\",\"快速选择算法(只是想找排名第K个的元素)\",\"当我们需要快速找到一个元素X，并且使得小于X的元素数量是K-1个时，那X就是我们要查找的排名第K位的元素了，可以用partition;\",\"堆排序\",\"归并排序\",\"其它趣味算法\",\"红黑树\",\"哈希表\"]},\"149\":{\"h\":\"内排序\"},\"150\":{\"h\":\"外排序\"},\"151\":{\"h\":\"查找算法\"},\"152\":{\"h\":\"搜索算法\",\"t\":[\"深度优先搜索\",\"广度优先搜索\",\"描述算法的常用工具 - 程序框图（流程图）\"]},\"153\":{\"h\":\"滑动窗口\"},\"154\":{\"h\":\"编译原理\"},\"155\":{\"h\":\"介绍\",\"t\":[\"课程内容主要是原理性质，高度抽象\",\"最难及最挑战学习能力的课程之一\",\"词法分析；\",\"语法分析；\",\"语义分析与中间代码产生；\",\"优化；\",\"目标代码生成\"]},\"156\":{\"h\":\"引言\",\"t\":[\"翻译程序（Translator）\",\"把某一种语言程序（源语言程序）等价地转换成另一种语言程序（目标程序）的程序\",\"编译程序（Compiler）\",\"把一种高级语言程序等价地转换成另一种低级语言程序（汇编语言或机器语言程序）的程序\",\"BNF(巴科斯范式)\",\"以简洁描述一种编程语言的语言\",\"产生式\",\"表征程序性知识的最小单位，是指人脑中贮存的一系列如果—那么形式表示的规则\"]},\"157\":{\"h\":\"程序设计语言\"},\"158\":{\"h\":\"数据结构\"},\"159\":{\"h\":\"背景及目标\",\"t\":[\"基本的数据组织和数据处理方法\",\"各种数据的逻辑结构表示\",\"各种数据的存储结构表示\",\"各种数据结构的运算定义\",\"设计实现运算的算法(以数据结构为中心的算法设计--也就是基本算法设计方法，再高一层就是通用算法设计)\",\"分析算法的效率(时间复杂度、空间复杂度分析，设计出求解问题的高效算法)\"]},\"160\":{\"h\":\"定义\",\"t\":[\"如何组织数据跟数据的规模以及存储的地方是有关系，就像图书与书架的关系！！\",\"新书如何插入？如何找到某一本书？\",\"解决问题方法的效率，跟数据的组织方式是直接相关的，跟空间的利用效率有关, 跟算法的巧妙程度有关系\",\"定义(差不多的)：数据对象在计算机中的组织方式 ， 必定与一系列加在其上的操作相关联， 完成这些操作的方法就是算法，算法与数据结构始终是一起的。\",\"根据数据结构的逻辑特性 -> 映射到计算机中的存储结构 -> 运算实现算法设计（数据运算高效实现）\",\"数组结构中讨论的元素关系主要是指相邻关系或邻接关系\",\"同一逻辑结构可以对应多种存储结构\",\"同样的运算，在不同的存储结构中，其实现过程也是不同的\",\"逻辑结构表示\",\"二元组 -- `B = (D, R)` D为集合，R为集合中元素的二元关系 \"]},\"161\":{\"h\":\"逻辑结构\",\"t\":[\"集合\",\"线性结构 \",\"简单： 线性表、栈、队列、散列表\",\"复杂： 广义表、多维数组、文件...\",\"树形结构\",\"图形结构\"]},\"162\":{\"h\":\"存储结构\",\"t\":[\"顺序存储结构\",\"链式存储结构\",\"索引存储结构\",\"哈希(散列)存储结构\"]},\"163\":{\"h\":\"抽象数据类型\",\"t\":[\"（ADT）是描述数据结构的方法， 这个是重点，面向对象时，就是将一类对象抽象成一种数据类型的过程，抽象好了可大大提高开发效率\",\"指的是从求解问题的数学模型中抽象出来的数据逻辑结构和运算，不考虑计算机的具体实现\",\"= 逻辑结构 + 抽象运算\",\"实质上就是对一个求解问题的形式化描述，程序员可以在理解基础上实现它\",\"通常把基于存储结构的运算实现的步骤或过程称为算法\",\"数据类型： 是一个值的集合和定义在此集合上的一组操作的总称，是已经实现了的数据结构，包括数据对象集，数据集合相关联的操作集，只描述数据对象集、相关操作集是什么，不涉及其他\",\"抽象： 指描述数据结构的方法不依赖于具体实现，与存放数据的机器无关；与数据存储的物理结构无关；与实现操作的算法和编程语言都无关\",\"有定义数据结构就是ADT的物理实现\",\" ```s eg: 类型名称： 矩阵（Matrix） 数据对象集： 操作集： Matrix create(int M, int N): int getMaxRow(Matrix A): int getMaxCol(Matrix A): // 这里的ElementType 根据矩阵元素的值的类型而定，并不明确指定其类型 ElementType getEntry(Matrix A, int i; int j): Matrix add(Matrix A, Matrix B): ... ``` \"]},\"164\":{\"h\":\"线性结构\"},\"165\":{\"h\":\"线性表\",\"t\":[\"简称表，是零个或多个元素的有穷序列，通常可以表示为k0, k1, ... kn-1(n>=1)\",\"线性表中的元素叫表目或者记录\",\"i 称为表目 ki 的 索引 或 下标\",\"n是表的长度\",\"长度为零的线性表叫空表\",\"特点\",\"灵活，长度可增长、缩短\",\"二元组 B = (K, R) K = {a0, a1,...an-1} R = {r} r表示前驱/后继关系，具有反对称性和传递性\"]},\"166\":{\"h\":\"一元多项式及其运算\"},\"167\":{\"h\":\"栈\",\"t\":[\"LIFO last in first out\",\"插入和删除操作都限制在表的同一端进行\",\"应用：深搜\",\"可以用数组来实现堆栈，也可以用链表（单向链尾不能找到前一个）来实现堆栈\",\" ```js // 抽象数据结构 // 通常由一个一维数组和一个记录栈顶元素位置的变量组成 ``` \",\"中缀表达式转换为后缀表达式\",\"从头到尾读取中缀表达式的每个对象\",\"假如是运算符：直接输出\",\"假如是左括号：压入堆栈\",\"假如是右括号，将栈顶的运算符弹出并输出，直到遇到左括号（出栈，不输出）\",\"运算符： \",\"若优先级大于栈顶运算符时，则把它压栈；\",\"若优先级小于等于栈顶运算符时，将栈顶运算符弹出并输出；\",\"再比较新的栈顶运算符，直到该运算符大于栈顶运算符优先级为止，然后将该运算符压栈\",\"若各对象处理完毕，则把堆栈中存留的运算符一并输出\"]},\"168\":{\"h\":\"队列\",\"t\":[\"FIFP first in first out\",\"插入操作在表的一端，删除操作在另一端\",\"应用：宽搜\",\"也是一种受限制的线性表\"]},\"169\":{\"h\":\"树\"},\"170\":{\"h\":\"二叉树\"},\"171\":{\"h\":\"堆\"},\"172\":{\"h\":\"图\"},\"173\":{\"h\":\"高级数据结构\",\"t\":[\"一个函数不仅要做好，而且要做得漂亮\"]},\"174\":{\"h\":\"服务端\"},\"175\":{\"h\":\"客户端开发\"},\"176\":{\"h\":\"DevOps\"},\"177\":{\"h\":\"前端开发\"},\"178\":{\"h\":\"设计模式\"},\"179\":{\"h\":\"\",\"t\":[\"其实就是一堆编码套路，解决固定的问题\",\"是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结\",\"目标： 熟练使用每一个设计模式，知道使用它的目的，并活用！\"]},\"180\":{\"h\":\"1. GOF(Gang of Four)\",\"t\":[\"对接口编程而不是对实现编程。优先使用对象组合而不是继承。\"]},\"181\":{\"h\":\"一、分类\"},\"182\":{\"h\":\"1. 创作设计模式(创建型模式Creational Design Patterns)\",\"t\":[\"解决哪一类问题：对象创建（在创建对象的同时隐藏创建逻辑的方式）\",\"工厂模式（Factory Pattern）\",\"抽象工厂模式（Abstract Factory Pattern）\",\"单例模式（Singleton Pattern）\",\"建造者模式（Builder Pattern）\",\"原型模式（Prototype Pattern）\",\"Constructor\",\"Factory - 针对class\",\"Abstract\",\"Prototype\",\"Singleton\",\"Builder\"]},\"183\":{\"h\":\"2. 结构设计模式(结构型模式Structural Design Patterns)\",\"t\":[\"解决哪一类问题：对象结构（类和对象的组合）\",\"适配器模式（Adapter Pattern)\",\"桥接模式（Bridge Pattern）\",\"过滤器模式（Filter、Criteria Pattern）\",\"组合模式（Composite Pattern）\",\"装饰器模式（Decorator Pattern）\",\"外观模式（Facade Pattern）\",\"享元模式（Flyweight Pattern）\",\"代理模式（Proxy Pattern）\",\"Decorator\",\"Facade\",\"Flyweight\",\"Adapter - 针对class\",\"Proxy\"]},\"184\":{\"h\":\"3. 行为设计模式(行为型模式Behavioral Design Patterns)\",\"t\":[\"解决哪一类问题：独立对象之间相互沟通（对象之间的通信）\",\"责任链模式（Chain of Responsibility Pattern）\",\"命令模式（Command Pattern）\",\"解释器模式（Interpreter Pattern）\",\"迭代器模式（Iterator Pattern）\",\"中介者模式（Mediator Pattern）\",\"备忘录模式（Memento Pattern）\",\"观察者模式（Observer Pattern）\",\"状态模式（State Pattern）\",\"空对象模式（Null Object Pattern）\",\"策略模式（Strategy Pattern）\",\"模板模式（Template Pattern）\",\"访问者模式（Visitor Pattern）\",\"Interpreter - 针对class\",\"TemplateMethod - 针对class\",\"Iterator\",\"Mediator\",\"Observer\",\"Visitor\"]},\"185\":{\"h\":\"4. J2EE设计模式（特别关注表示层）\",\"t\":[\"MVC 模式（MVC Pattern）\",\"业务代表模式（Business Delegate Pattern）\",\"组合实体模式（Composite Entity Pattern）\",\"数据访问对象模式（Data Access Object Pattern）\",\"前端控制器模式（Front Controller Pattern）\",\"拦截过滤器模式（Intercepting Filter Pattern）\",\"服务定位器模式（Service Locator Pattern）\",\"传输对象模式（Transfer Object Pattern）\"]},\"186\":{\"h\":\"二、详述\",\"t\":[\"23种设计模式\"]},\"187\":{\"h\":\"1. 适配器模式\",\"t\":[\"作为两个不兼容接口之间的桥梁, 像现实生活中的读卡器：连接内存卡与电脑，读卡器作为单独的一个类而存在\",\"意图：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\",\"主要解决：主要解决在软件系统中，常常要将一些\\\"现存的对象\\\"放到新的环境中，而新环境要求的接口是现对象不能满足的。\",\"何时使用： 1、系统需要使用现有的类，而此类的接口不符合系统的需要。 2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）\",\"如何解决：继承或依赖（推荐）。\",\"关键代码：适配器继承或依赖已有的对象，实现想要的目标接口。\",\"应用实例： 1、美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。 2、JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。 3、在 LINUX 上运行 WINDOWS 程序。 4、JAVA 中的 jdbc。\",\"优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。\",\"缺点： 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。\",\"使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。\",\"注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。\"]},\"188\":{\"h\":\"2. 建造者模式\",\"t\":[\"创建对象的最佳方式\",\"意图：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。\",\"主要解决：主要解决在软件系统中，有时候面临着\\\"一个复杂对象\\\"的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。\",\"何时使用：一些基本部件不会变，而其组合经常变化的时候。\",\"如何解决：将变与不变分离开。\",\"关键代码：建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。\",\"应用实例： 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的\\\"套餐\\\"。 2、JAVA 中的 StringBuilder。\",\"优点： 1、建造者独立，易扩展。 2、便于控制细节风险。\",\"缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。\",\"使用场景： 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。\",\"注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。\"]},\"189\":{\"h\":\"3. 工厂模式\",\"t\":[\"意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。\",\"主要解决：主要解决接口选择的问题。\",\"何时使用：我们明确地计划不同条件下创建不同实例时。\",\"如何解决：让其子类实现工厂接口，返回的也是一个抽象的产品。\",\"关键代码：创建过程在其子类执行。\",\"应用实例： 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate 换数据库只需换方言和驱动就可以。\",\"优点： 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。\",\"缺点：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。\",\"使用场景： 1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 3、设计一个连接服务器的框架，需要三个协议，\\\"POP3\\\"、\\\"IMAP\\\"、\\\"HTTP\\\"，可以把这三个作为产品类，共同实现一个接口。\",\"注意事项：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。\"]},\"190\":{\"h\":\"4. 抽象工厂模式\"},\"191\":{\"h\":\"1. JavaScript设计模式\",\"t\":[\"Constructor\",\"创建对象\",\"var newO = {}; var newO = Object.create(Object.prototype); var newO = new Object();\",\"对象属性赋值\",\"// Way 01 newO.someKey = 'HelloWorld'; var val = newO.someKey; // Way 02 newO[someKey] = 'HelloWorld'; var val = newO[someKey]; // Way 03 Object.defineProperty(newO, \\\"someKey\\\", { value: \\\"for more control of the property's behavior\\\", writable: true, enumerable: true, configurable: true }) // or var defineProp = function(obj, key, value) { var config = { value: value, writable: true, enumerable: true, configurable: true }; Object.defineProperty(obj, key, config); } var person = Object.create(Object.prototype); defineProp(person, 'car', 'dazhong'); defineProp(person, 'birth', '1991'); defineProp(person, 'hasBeard', true); console.log(person) // Way 04 Object.defineProperties(newO, { 'someKey': { value: 'Hello', writable: true, enumerable: true, configurable: true }, 'anotherKey': { value: 'World', writable: true, enumerable: true, configurable: true } }) // inherit var driver = Object.create(person); defineProps(driver, 'speed', 140);\",\"创建类\",\"// Way 01 构造函数 function Car(model, year, miles) { this.model = model; this.year = year; this.miles = miles; this.toString = function () { return this.model + \\\" has done \\\" + this.miles + \\\" miles\\\"; }; } // Usage: // We can create new instances of the car var civic = new Car(\\\"Honda Civic\\\", 2009, 20000); var mondeo = new Car(\\\"Ford Mondeo\\\", 2010, 5000); // and then open our browser console to view the // output of the toString() method being called on // these objects console.log(civic.toString()); console.log(mondeo.toString());\",\"Module\",\"Module\",\"Object literal notation\",\"AMD modules\",\"CommonJS modules\",\"ECMAScript Harmony modules\",\"对象字面量\",\"Revealing Module\",\"Singleton\",\"有两点需求： 假如没有则创建的实例，假如有则指向已创建的实例，JS中单例提供一个公共的资源空间，并且只提供单一个方法入口\",\" const mySingleton = (function() { let instance; function init() { // Private let privateVariable = 'I am privateVariable'; let privateFunction = () => { console.log('I am privateFunction been called in public func') } return { // Public publicProperty: \\\"I am also public\\\", publicMethod() { console.log( \\\"The public can see me!\\\" ); privateFunction(); } } } return { getInstance() { // here is important!! if(!instance) { instance = init(); } return instance; } } })() // 采用这种工厂模式可以使得获取单例的方式唯一不变 mySingleton.getInstance = function(){ if ( this._instance == null ) { if ( isFoo() ) { this._instance = new FooSingleton(); } else { this._instance = new BasicSingleton(); } } return this._instance; };\",\"Observer\",\"一系列对象的状态变动将通知到观察者中\",\" function ObserverList() { this.observerList = []; } ObserverList.prototype.add = (obj) => { this.observerList.push(obj); return this.observerList; } ObserverList.prototype.count = () => { return this.observerList.length; } ObserverList.prototype.get = (index) => { if(index > -1 && index < this.observerList.length>) { return this.observerList[index]; } } ObserverList.prototype.indexOf = (obj, startIndex) => { var i = startIndex; while ( i < this.observerList.length ) { if( this.observerList[i] === obj ) { return i; } i++; } return -1 } ObserverList.prototype.removeAt = (index) => { return this.observerList.splice(index, 1); }\",\"Mediator\",\"Prototype\",\"Command\",\"Facade\",\"Factory\",\"Mixin\",\"Decorator\",\"Flyweight\"]},\"192\":{\"h\":\"2. JavaScript MV* 模式\"},\"193\":{\"h\":\"3. 现代模块化设计模式\",\"t\":[\"AMD modules\",\"CommonJS modules\",\"ECMAScript Harmony modules\"]},\"194\":{\"h\":\"4. JavaScript命名空间模式\"},\"195\":{\"h\":\"5. 插件设计模式\"},\"196\":{\"h\":\"一、单例模式\",\"t\":[\"// 简单单例 var singleton = { name: 'onlyOne', methods() { } }\"]},\"197\":{\"h\":\"二、二段构建模式\"},\"198\":{\"h\":\"三、管理者模式\"},\"199\":{\"h\":\"四、外观模式\"},\"200\":{\"h\":\"五、防御编程模式\"},\"201\":{\"h\":\"六、组合模式\"},\"202\":{\"h\":\"七、观察者模式\"},\"203\":{\"h\":\"八、中介者模式\"},\"204\":{\"h\":\"九、委托模式\"},\"205\":{\"h\":\"练习\",\"t\":[\"练习\",\"UML\",\"UML\",\"又称统一建模语言或标准建模语言，是始于1997年一个OMG标准，它是一个支持模型化和软件系统开发的图形化语言，为软件开发的所有阶段提供模型化和可视化支持，包括由需求分析到规格，到构造和配置。 面向对象的分析与设计(OOA&D，OOAD)方法的发展在80年代末至90年代中出现了一个高潮，UML是这个高潮的产物。它不仅统一了Booch、Rumbaugh和Jacobson的表示方法，而且对其作了进一步的发展，并最终统一为大众所接受的标准建模语言。\",\"从目标系统的不同角度出发，定义了用例图、类图(类名；属性；操作)、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图\",\"Rational Rose ; Umlet\"]},\"206\":{\"h\":\"工厂模式（Factory Pattern）\",\"t\":[\"在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。\",\"意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行\",\"主要解决：主要解决接口选择的问题\",\"何时使用：我们明确地计划不同条件下创建不同实例时\",\"如何解决：让其子类实现工厂接口，返回的也是一个抽象的产品\",\"关键代码：创建过程在其子类执行\",\"应用实例： 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate 换数据库只需换方言和驱动就可以。\",\"优点： 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。\",\"缺点：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。\",\"使用场景： 1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 3、设计一个连接服务器的框架，需要三个协议，\\\"POP3\\\"、\\\"IMAP\\\"、\\\"HTTP\\\"，可以把这三个作为产品类，共同实现一个接口。\",\"注意事项：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。\",\"步骤 1: 创建一个接口。\",\"// Shape.java public interface Shape { void draw(); }\",\"步骤 2: 创建实现接口的实体类。\",\"// Rectangle.java public class Rectangle implements Shape { @Override public void draw() { System.out.println(\\\"Inside Rectangle::draw() method.\\\"); } }\",\"// Square.java public class Square implements Shape { @Override public void draw() { System.out.println(\\\"Inside Square::draw() method.\\\"); } }\",\"// Circle.java public class Circle implements Shape { @Override public void draw() { System.out.println(\\\"Inside Circle::draw() method.\\\"); } }\",\"步骤 3: 创建一个工厂，生成基于给定信息的实体类的对象。\",\"// ShapeFactory.java public class ShapeFactory { //使用 getShape 方法获取形状类型的对象 public Shape getShape(String shapeType){ if(shapeType == null){ return null; } if(shapeType.equalsIgnoreCase(\\\"CIRCLE\\\")){ return new Circle(); } else if(shapeType.equalsIgnoreCase(\\\"RECTANGLE\\\")){ return new Rectangle(); } else if(shapeType.equalsIgnoreCase(\\\"SQUARE\\\")){ return new Square(); } return null; } }\",\"步骤 4: 使用该工厂，通过传递类型信息来获取实体类的对象。\",\"// FactoryPatternDemo.java public class FactoryPatternDemo { public static void main(String[] args) { ShapeFactory shapeFactory = new ShapeFactory(); //获取 Circle 的对象，并调用它的 draw 方法 Shape shape1 = shapeFactory.getShape(\\\"CIRCLE\\\"); //调用 Circle 的 draw 方法 shape1.draw(); //获取 Rectangle 的对象，并调用它的 draw 方法 Shape shape2 = shapeFactory.getShape(\\\"RECTANGLE\\\"); //调用 Rectangle 的 draw 方法 shape2.draw(); //获取 Square 的对象，并调用它的 draw 方法 Shape shape3 = shapeFactory.getShape(\\\"SQUARE\\\"); //调用 Square 的 draw 方法 shape3.draw(); } }\",\"步骤 5: 验证输出。\",\"Inside Circle::draw() method. Inside Rectangle::draw() method. Inside Square::draw() method.\"]},\"207\":{\"h\":\"抽象工厂模式（Abstract Factory Pattern）\",\"t\":[\"是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。\",\"在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。\",\"意图：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\",\"主要解决：主要解决接口选择的问题。\",\"何时使用：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。\",\"如何解决：在一个产品族里面，定义多个产品。\",\"关键代码：在一个工厂里聚合多个同类产品。\",\"应用实例：工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OO 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。\",\"优点：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。\",\"缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。\",\"使用场景： 1、QQ 换皮肤，一整套一起换。 2、生成不同操作系统的程序。\",\"注意事项：产品族难扩展，产品等级易扩展。\",\"步骤 1: 为形状创建一个接口。\",\"// Shape.java public interface Shape { void draw(); }\",\"步骤 2: 创建实现接口的实体类。\",\"// Rectangle.java public class Rectangle implements Shape { @Override public void draw() { System.out.println(\\\"Inside Rectangle::draw() method.\\\"); } }\",\"// Square.java public class Square implements Shape { @Override public void draw() { System.out.println(\\\"Inside Square::draw() method.\\\"); } }\",\"Circle.java public class Circle implements Shape { @Override public void draw() { System.out.println(\\\"Inside Circle::draw() method.\\\"); }}\",\"步骤 3: 为颜色创建一个接口。\",\"// Color.java public interface Color { void fill(); }\",\"步骤4: 创建实现接口的实体类。\",\"// Red.java public class Red implements Color { @Override public void fill() { System.out.println(\\\"Inside Red::fill() method.\\\"); } }\",\"// Green.java public class Green implements Color { @Override public void fill() { System.out.println(\\\"Inside Green::fill() method.\\\"); } }\",\"// Blue.java public class Blue implements Color { @Override public void fill() { System.out.println(\\\"Inside Blue::fill() method.\\\"); } }\",\"步骤 5: 为 Color 和 Shape 对象创建抽象类来获取工厂。\",\"// AbstractFactory.java public abstract class AbstractFactory { abstract Color getColor(String color); abstract Shape getShape(String shape) ; }\",\"步骤 6: 创建扩展了 AbstractFactory 的工厂类，基于给定的信息生成实体类的对象。\",\"// ShapeFactory.java public class ShapeFactory extends AbstractFactory { @Override public Shape getShape(String shapeType){ if(shapeType == null){ return null; } if(shapeType.equalsIgnoreCase(\\\"CIRCLE\\\")){ return new Circle(); } else if(shapeType.equalsIgnoreCase(\\\"RECTANGLE\\\")){ return new Rectangle(); } else if(shapeType.equalsIgnoreCase(\\\"SQUARE\\\")){ return new Square(); } return null; } @Override Color getColor(String color) { return null; } } // ColorFactory.java public class ColorFactory extends AbstractFactory { @Override public Shape getShape(String shapeType){ return null; } @Override Color getColor(String color) { if(color == null){ return null; } if(color.equalsIgnoreCase(\\\"RED\\\")){ return new Red(); } else if(color.equalsIgnoreCase(\\\"GREEN\\\")){ return new Green(); } else if(color.equalsIgnoreCase(\\\"BLUE\\\")){ return new Blue(); } return null; } }\",\"步骤 7: 创建一个工厂创造器/生成器类，通过传递形状或颜色信息来获取工厂。\",\"// FactoryProducer.java public class FactoryProducer { public static AbstractFactory getFactory(String choice){ if(choice.equalsIgnoreCase(\\\"SHAPE\\\")){ return new ShapeFactory(); } else if(choice.equalsIgnoreCase(\\\"COLOR\\\")){ return new ColorFactory(); } return null; } }\",\"步骤 8: 使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。\",\"// AbstractFactoryPatternDemo.java public class AbstractFactoryPatternDemo { public static void main(String[] args) { //获取形状工厂 AbstractFactory shapeFactory = FactoryProducer.getFactory(\\\"SHAPE\\\"); //获取形状为 Circle 的对象 Shape shape1 = shapeFactory.getShape(\\\"CIRCLE\\\"); //调用 Circle 的 draw 方法 shape1.draw(); //获取形状为 Rectangle 的对象 Shape shape2 = shapeFactory.getShape(\\\"RECTANGLE\\\"); //调用 Rectangle 的 draw 方法 shape2.draw(); //获取形状为 Square 的对象 Shape shape3 = shapeFactory.getShape(\\\"SQUARE\\\"); //调用 Square 的 draw 方法 shape3.draw(); //获取颜色工厂 AbstractFactory colorFactory = FactoryProducer.getFactory(\\\"COLOR\\\"); //获取颜色为 Red 的对象 Color color1 = colorFactory.getColor(\\\"RED\\\"); //调用 Red 的 fill 方法 color1.fill(); //获取颜色为 Green 的对象 Color color2 = colorFactory.getColor(\\\"Green\\\"); //调用 Green 的 fill 方法 color2.fill(); //获取颜色为 Blue 的对象 Color color3 = colorFactory.getColor(\\\"BLUE\\\"); //调用 Blue 的 fill 方法 color3.fill(); } }\",\"步骤 9: 验证输出。\",\"Inside Circle::draw() method. Inside Rectangle::draw() method. Inside Square::draw() method. Inside Red::fill() method. Inside Green::fill() method. Inside Blue::fill() method.\"]},\"208\":{\"h\":\"单例模式（Singleton Pattern）\",\"t\":[\"是 Java 中最简单的设计模式之一\",\"这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。\",\"注意：\",\"单例类只能有一个实例。\",\"单例类必须自己创建自己的唯一实例。\",\"单例类必须给所有其他对象提供这一实例。\",\"意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。\",\"主要解决：一个全局使用的类频繁地创建与销毁。\",\"何时使用：当您想控制实例数目，节省系统资源的时候。\",\"如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。\",\"关键代码：构造函数是私有的。\",\"应用实例： 1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。\",\"优点： 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。\",\"缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\",\"使用场景： 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。\",\"注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。\",\"步骤 1: 创建一个 Singleton 类。\",\"// SingleObject.java public class SingleObject { //创建 SingleObject 的一个对象 private static SingleObject instance = new SingleObject(); //让构造函数为 private，这样该类就不会被实例化 private SingleObject(){} //获取唯一可用的对象 public static SingleObject getInstance(){ return instance; } public void showMessage(){ System.out.println(\\\"Hello World!\\\"); } }\",\"步骤 2: 从 singleton 类获取唯一的对象。\",\"// SingletonPatternDemo.java public class SingletonPatternDemo { public static void main(String[] args) { //不合法的构造函数 //编译时错误：构造函数 SingleObject() 是不可见的 //SingleObject object = new SingleObject(); //获取唯一可用的对象 SingleObject object = SingleObject.getInstance(); //显示消息 object.showMessage(); } }\",\"步骤 3: 验证输出。\",\"Hello World!\",\"单例模式的几种实现方式 单例模式的实现有多种方式，如下所示：\",\"1、懒汉式，线程不安全 是否 Lazy 初始化：是 是否多线程安全：否 实现难度：易\",\"描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁synchronized，所以严格意义上它并不算单例模式。 这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。\",\"代码实例：\",\"public class Singleton { private static Singleton instance; private Singleton (){} public static Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } }\",\"接下来介绍的几种实现方式都支持多线程，但是在性能上有所差异。\",\"2、懒汉式，线程安全 是否 Lazy 初始化：是\",\"是否多线程安全：是\",\"实现难度：易\",\"描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。 优点：第一次调用才初始化，避免内存浪费。 缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。 getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。\",\"代码实例：\",\"public class Singleton { private static Singleton instance; private Singleton (){} public static synchronized Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } }\",\"3、饿汉式 是否 Lazy 初始化：否\",\"是否多线程安全：是\",\"实现难度：易\",\"描述：这种方式比较常用，但容易产生垃圾对象。 优点：没有加锁，执行效率会提高。 缺点：类加载时就初始化，浪费内存。 它基于 classloder 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。\",\"代码实例：\",\"public class Singleton { private static Singleton instance = new Singleton(); private Singleton (){} public static Singleton getInstance() { return instance; } }\",\"4、双检锁/双重校验锁（DCL，即 double-checked locking） JDK 版本：JDK1.5 起\",\"是否 Lazy 初始化：是\",\"是否多线程安全：是\",\"实现难度：较复杂\",\"描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。 getInstance() 的性能对应用程序很关键。\",\"代码实例：\",\"public class Singleton { private volatile static Singleton singleton; private Singleton (){} public static Singleton getSingleton() { if (singleton == null) { synchronized (Singleton.class) { if (singleton == null) { singleton = new Singleton(); } } } return singleton; } }\",\"5、登记式/静态内部类 是否 Lazy 初始化：是\",\"是否多线程安全：是\",\"实现难度：一般\",\"描述：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。 这种方式同样利用了 classloder 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有显示通过调用 getInstance 方法时，才会显示装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。\",\"代码实例：\",\"public class Singleton { private static class SingletonHolder { private static final Singleton INSTANCE = new Singleton(); } private Singleton (){} public static final Singleton getInstance() { return SingletonHolder.INSTANCE; } }\",\"6、枚举 JDK 版本：JDK1.5 起\",\"是否 Lazy 初始化：否\",\"是否多线程安全：是\",\"实现难度：易\",\"描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。 这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。 不能通过 reflection attack 来调用私有构造方法。\",\"代码实例：\",\"public enum Singleton { INSTANCE; public void whateverMethod() { } }\",\"经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。\"]},\"209\":{\"h\":\"原型模式（Prototype Pattern）\",\"t\":[\"是用于创建重复的对象，同时又能保证性能。\",\"这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。\",\"意图：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。\",\"主要解决：在运行期建立和删除原型。\",\"何时使用： 1、当一个系统应该独立于它的产品创建，构成和表示时。 2、当要实例化的类是在运行时刻指定时，例如，通过动态装载。 3、为了避免创建一个与产品类层次平行的工厂类层次时。 4、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。\",\"如何解决：利用已有的一个原型对象，快速地生成和原型对象一样的实例。\",\"关键代码： 1、实现克隆操作，在 JAVA 继承 Cloneable，重写 clone()，在 .NET 中可以使用 Object 类的 MemberwiseClone() 方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。 2、原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些\\\"易变类\\\"拥有稳定的接口。\",\"应用实例： 1、细胞分裂。 2、JAVA 中的 Object clone() 方法。\",\"优点： 1、性能提高。 2、逃避构造函数的约束。\",\"缺点： 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。 3、逃避构造函数的约束。\",\"使用场景： 1、资源优化场景。 2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。 3、性能和安全要求的场景。 4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。 5、一个对象多个修改者的场景。 6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。 7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。\",\"注意事项：与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。\",\"步骤 1: 创建一个实现了 Clonable 接口的抽象类。\",\"// Shape.java public abstract class Shape implements Cloneable { private String id; protected String type; abstract void draw(); public String getType(){ return type; } public String getId() { return id; } public void setId(String id) { this.id = id; } public Object clone() { Object clone = null; try { clone = super.clone(); } catch (CloneNotSupportedException e) { e.printStackTrace(); } return clone; } }\",\"步骤 2: 创建扩展了上面抽象类的实体类。\",\"// Rectangle.java public class Rectangle extends Shape { public Rectangle(){ type = \\\"Rectangle\\\"; } @Override public void draw() { System.out.println(\\\"Inside Rectangle::draw() method.\\\"); } } // Square.java public class Square extends Shape { public Square(){ type = \\\"Square\\\"; } @Override public void draw() { System.out.println(\\\"Inside Square::draw() method.\\\"); } } // Circle.java public class Circle extends Shape { public Circle(){ type = \\\"Circle\\\"; } @Override public void draw() { System.out.println(\\\"Inside Circle::draw() method.\\\"); }}\",\"步骤 3: 创建一个类，从数据库获取实体类，并把它们存储在一个 Hashtable 中。\",\"// ShapeCache.java import java.util.Hashtable; public class ShapeCache { private static Hashtable<String, Shape> shapeMap = new Hashtable<String, Shape>(); public static Shape getShape(String shapeId) { Shape cachedShape = shapeMap.get(shapeId); return (Shape) cachedShape.clone(); } // 对每种形状都运行数据库查询，并创建该形状 // shapeMap.put(shapeKey, shape); // 例如，我们要添加三种形状 public static void loadCache() { Circle circle = new Circle(); circle.setId(\\\"1\\\"); shapeMap.put(circle.getId(),circle); Square square = new Square(); square.setId(\\\"2\\\"); shapeMap.put(square.getId(),square); Rectangle rectangle = new Rectangle(); rectangle.setId(\\\"3\\\"); shapeMap.put(rectangle.getId(),rectangle); } }\",\"步骤 4: PrototypePatternDemo 使用 ShapeCache 类来获取存储在 Hashtable 中的形状的克隆。\",\"// PrototypePatternDemo.java public class PrototypePatternDemo { public static void main(String[] args) { ShapeCache.loadCache(); Shape clonedShape = (Shape) ShapeCache.getShape(\\\"1\\\"); System.out.println(\\\"Shape : \\\" + clonedShape.getType()); Shape clonedShape2 = (Shape) ShapeCache.getShape(\\\"2\\\"); System.out.println(\\\"Shape : \\\" + clonedShape2.getType()); Shape clonedShape3 = (Shape) ShapeCache.getShape(\\\"3\\\"); System.out.println(\\\"Shape : \\\" + clonedShape3.getType()); } }\",\"步骤 5: 验证输出。\",\"Shape : Circle Shape : Square Shape : Rectangle\"]},\"210\":{\"h\":\"桥接（Bridge）\",\"t\":[\"是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。\",\"这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。\",\"我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。\",\"意图：将抽象部分与实现部分分离，使它们都可以独立的变化。\",\"主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。\",\"何时使用：实现系统可能有多个角度分类，每一种角度都可能变化。\",\"如何解决：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。\",\"关键代码：抽象类依赖实现类。\",\"应用实例： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。\",\"优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。\",\"缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\",\"使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\",\"注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。\",\"步骤 1: 创建桥接实现接口。\",\"// DrawAPI.java public interface DrawAPI { public void drawCircle(int radius, int x, int y); }\",\"步骤 2: 创建实现了 DrawAPI 接口的实体桥接实现类。\",\"// RedCircle.java public class RedCircle implements DrawAPI { @Override public void drawCircle(int radius, int x, int y) { System.out.println(\\\"Drawing Circle[ color: red, radius: \\\" + radius +\\\", x: \\\" +x+\\\", \\\"+ y +\\\"]\\\"); } } // GreenCircle.java public class GreenCircle implements DrawAPI { @Override public void drawCircle(int radius, int x, int y) { System.out.println(\\\"Drawing Circle[ color: green, radius: \\\" + radius +\\\", x: \\\" +x+\\\", \\\"+ y +\\\"]\\\"); } }\",\"步骤 3: 使用 DrawAPI 接口创建抽象类 Shape。\",\"// Shape.java public abstract class Shape { protected DrawAPI drawAPI; protected Shape(DrawAPI drawAPI){ this.drawAPI = drawAPI; } public abstract void draw(); }\",\"步骤 4: 创建实现了 Shape 接口的实体类。\",\"// Circle.java public class Circle extends Shape { private int x, y, radius; public Circle(int x, int y, int radius, DrawAPI drawAPI) { super(drawAPI); this.x = x; this.y = y; this.radius = radius; } public void draw() { drawAPI.drawCircle(radius,x,y); } }\",\"步骤 5: 使用 Shape 和 DrawAPI 类画出不同颜色的圆。\",\"BridgePatternDemo.java public class BridgePatternDemo { public static void main(String[] args) { Shape redCircle = new Circle(100,100, 10, new RedCircle()); Shape greenCircle = new Circle(100,100, 10, new GreenCircle()); redCircle.draw(); greenCircle.draw(); } }\",\"步骤 6: 验证输出。\",\"Drawing Circle[ color: red, radius: 10, x: 100, 100] Drawing Circle[ color: green, radius: 10, x: 100, 100]\"]},\"211\":{\"h\":\"过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）\",\"t\":[\"这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。\",\"步骤 1: 创建一个类，在该类上应用标准。\",\"// Person.java public class Person { private String name; private String gender; private String maritalStatus; public Person(String name,String gender,String maritalStatus){ this.name = name; this.gender = gender; this.maritalStatus = maritalStatus; } public String getName() { return name; } public String getGender() { return gender; } public String getMaritalStatus() { return maritalStatus; } } 步骤 2: 为标准（Criteria）创建一个接口。 ```java Criteria.java import java.util.List;public interface Criteria { public List<Person> meetCriteria(List<Person> persons); }\",\"步骤 3: 创建实现了 Criteria 接口的实体类。\",\"// CriteriaMale.java import java.util.ArrayList;import java.util.List;public class CriteriaMale implements Criteria { @Override public List<Person> meetCriteria(List<Person> persons) { List<Person> malePersons = new ArrayList<Person>(); for (Person person : persons) { if(person.getGender().equalsIgnoreCase(\\\"MALE\\\")){ malePersons.add(person); } } return malePersons; } } // CriteriaFemale.java import java.util.ArrayList;import java.util.List;public class CriteriaFemale implements Criteria { @Override public List<Person> meetCriteria(List<Person> persons) { List<Person> femalePersons = new ArrayList<Person>(); for (Person person : persons) { if(person.getGender().equalsIgnoreCase(\\\"FEMALE\\\")){ femalePersons.add(person); } } return femalePersons; } } // CriteriaSingle.java import java.util.ArrayList;import java.util.List;public class CriteriaSingle implements Criteria { @Override public List<Person> meetCriteria(List<Person> persons) { List<Person> singlePersons = new ArrayList<Person>(); for (Person person : persons) { if(person.getMaritalStatus().equalsIgnoreCase(\\\"SINGLE\\\")){ singlePersons.add(person); } } return singlePersons; } } // AndCriteria.java import java.util.List;public class AndCriteria implements Criteria { private Criteria criteria; private Criteria otherCriteria; public AndCriteria(Criteria criteria, Criteria otherCriteria) { this.criteria = criteria; this.otherCriteria = otherCriteria; } @Override public List<Person> meetCriteria(List<Person> persons) { List<Person> firstCriteriaPersons = criteria.meetCriteria(persons); return otherCriteria.meetCriteria(firstCriteriaPersons); } } // OrCriteria.java import java.util.List;public class OrCriteria implements Criteria { private Criteria criteria; private Criteria otherCriteria; public OrCriteria(Criteria criteria, Criteria otherCriteria) { this.criteria = criteria; this.otherCriteria = otherCriteria; } @Override public List<Person> meetCriteria(List<Person> persons) { List<Person> firstCriteriaItems = criteria.meetCriteria(persons); List<Person> otherCriteriaItems = otherCriteria.meetCriteria(persons); for (Person person : otherCriteriaItems) { if(!firstCriteriaItems.contains(person)){ firstCriteriaItems.add(person); } } return firstCriteriaItems; } }\",\"步骤4: 使用不同的标准（Criteria）和它们的结合来过滤 Person 对象的列表。\",\"// CriteriaPatternDemo.java import java.util.ArrayList; import java.util.List;public class CriteriaPatternDemo { public static void main(String[] args) { List<Person> persons = new ArrayList<Person>(); persons.add(new Person(\\\"Robert\\\",\\\"Male\\\", \\\"Single\\\")); persons.add(new Person(\\\"John\\\",\\\"Male\\\", \\\"Married\\\")); persons.add(new Person(\\\"Laura\\\",\\\"Female\\\", \\\"Married\\\")); persons.add(new Person(\\\"Diana\\\",\\\"Female\\\", \\\"Single\\\")); persons.add(new Person(\\\"Mike\\\",\\\"Male\\\", \\\"Single\\\")); persons.add(new Person(\\\"Bobby\\\",\\\"Male\\\", \\\"Single\\\")); Criteria male = new CriteriaMale(); Criteria female = new CriteriaFemale(); Criteria single = new CriteriaSingle(); Criteria singleMale = new AndCriteria(single, male); Criteria singleOrFemale = new OrCriteria(single, female); System.out.println(\\\"Males: \\\"); printPersons(male.meetCriteria(persons)); System.out.println(\\\"\\\\nFemales: \\\"); printPersons(female.meetCriteria(persons)); System.out.println(\\\"\\\\nSingle Males: \\\"); printPersons(singleMale.meetCriteria(persons)); System.out.println(\\\"\\\\nSingle Or Females: \\\"); printPersons(singleOrFemale.meetCriteria(persons)); } public static void printPersons(List<Person> persons){ for (Person person : persons) { System.out.println(\\\"Person : [ Name : \\\" + person.getName() +\\\", Gender : \\\" + person.getGender() +\\\", Marital Status : \\\" + person.getMaritalStatus() +\\\" ]\\\"); } } } 步骤 5: 验证输出。 ```txt Males: Person : [ Name : Robert, Gender : Male, Marital Status : Single ] Person : [ Name : John, Gender : Male, Marital Status : Married ] Person : [ Name : Mike, Gender : Male, Marital Status : Single ] Person : [ Name : Bobby, Gender : Male, Marital Status : Single ] Females: Person : [ Name : Laura, Gender : Female, Marital Status : Married ] Person : [ Name : Diana, Gender : Female, Marital Status : Single ] Single Males: Person : [ Name : Robert, Gender : Male, Marital Status : Single ] Person : [ Name : Mike, Gender : Male, Marital Status : Single ] Person : [ Name : Bobby, Gender : Male, Marital Status : Single ] Single Or Females: Person : [ Name : Robert, Gender : Male, Marital Status : Single ] Person : [ Name : Diana, Gender : Female, Marital Status : Single ] Person : [ Name : Mike, Gender : Male, Marital Status : Single ] Person : [ Name : Bobby, Gender : Male, Marital Status : Single ] Person : [ Name : Laura, Gender : Female, Marital Status : Married ]\"]},\"212\":{\"h\":\"组合模式（Composite Pattern）\",\"t\":[\"又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。\",\"这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。\",\"我们通过下面的实例来演示组合模式的用法。实例演示了一个组织中员工的层次结构。\",\"意图：将对象组合成树形结构以表示\\\"部分-整体\\\"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\",\"主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。\",\"何时使用： 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。\",\"如何解决：树枝和叶子实现统一接口，树枝内部组合该接口。\",\"关键代码：树枝内部组合该接口，并且含有内部属性 List，里面放 Component。\",\"应用实例： 1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作树、操作符和另一个操作数。 2、在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。\",\"优点： 1、高层模块调用简单。 2、节点自由增加。\",\"缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。\",\"使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理。\",\"注意事项：定义时为具体类。\",\"步骤 1: 创建 Employee 类，该类带有 Employee 对象的列表。\",\"// Employee.java import java.util.ArrayList;import java.util.List;public class Employee { private String name; private String dept; private int salary; private List<Employee> subordinates; //构造函数 public Employee(String name,String dept, int sal) { this.name = name; this.dept = dept; this.salary = sal; subordinates = new ArrayList<Employee>(); } public void add(Employee e) { subordinates.add(e); } public void remove(Employee e) { subordinates.remove(e); } public List<Employee> getSubordinates(){ return subordinates; } public String toString(){ return (\\\"Employee :[ Name : \\\"+ name +\\\", dept : \\\"+ dept + \\\", salary :\\\" + salary+\\\" ]\\\"); } }\",\"步骤 2: 使用 Employee 类来创建和打印员工的层次结构。\",\"// CompositePatternDemo.java public class CompositePatternDemo { public static void main(String[] args) { Employee CEO = new Employee(\\\"John\\\",\\\"CEO\\\", 30000); Employee headSales = new Employee(\\\"Robert\\\",\\\"Head Sales\\\", 20000); Employee headMarketing = new Employee(\\\"Michel\\\",\\\"Head Marketing\\\", 20000); Employee clerk1 = new Employee(\\\"Laura\\\",\\\"Marketing\\\", 10000); Employee clerk2 = new Employee(\\\"Bob\\\",\\\"Marketing\\\", 10000); Employee salesExecutive1 = new Employee(\\\"Richard\\\",\\\"Sales\\\", 10000); Employee salesExecutive2 = new Employee(\\\"Rob\\\",\\\"Sales\\\", 10000); CEO.add(headSales); CEO.add(headMarketing); headSales.add(salesExecutive1); headSales.add(salesExecutive2); headMarketing.add(clerk1); headMarketing.add(clerk2); //打印该组织的所有员工 System.out.println(CEO); for (Employee headEmployee : CEO.getSubordinates()) { System.out.println(headEmployee); for (Employee employee : headEmployee.getSubordinates()) { System.out.println(employee); } } }}\",\"步骤 3: 验证输出。\",\"Employee :[ Name : John, dept : CEO, salary :30000 ] Employee :[ Name : Robert, dept : Head Sales, salary :20000 ] Employee :[ Name : Richard, dept : Sales, salary :10000 ] Employee :[ Name : Rob, dept : Sales, salary :10000 ] Employee :[ Name : Michel, dept : Head Marketing, salary :20000 ] Employee :[ Name : Laura, dept : Marketing, salary :10000 ] Employee :[ Name : Bob, dept : Marketing, salary :10000 ]\"]},\"213\":{\"h\":\"装饰器模式（Decorator Pattern）\",\"t\":[\"允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。\",\"这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。\",\"我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。\",\"意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。\",\"主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。\",\"何时使用：在不想增加很多子类的情况下扩展类。\",\"如何解决：将具体功能职责划分，同时继承装饰者模式。\",\"关键代码： 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。\",\"应用实例： 1、孙悟空有 72 变，当他变成\\\"庙宇\\\"后，他的根本还是一只猴子，但是他又有了庙宇的功能。 2、不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。\",\"优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。\",\"缺点：多层装饰比较复杂。\",\"使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。\",\"注意事项：可代替继承。\",\"步骤 1: 创建一个接口。\",\"// Shape.java public interface Shape { void draw(); }\",\"步骤 2: 创建实现接口的实体类。\",\"// Rectangle.java public class Rectangle implements Shape { @Override public void draw() { System.out.println(\\\"Shape: Rectangle\\\"); } } // Circle.java public class Circle implements Shape { @Override public void draw() { System.out.println(\\\"Shape: Circle\\\"); } }\",\"步骤 3: 创建实现了 Shape 接口的抽象装饰类。\",\"// ShapeDecorator.java public abstract class ShapeDecorator implements Shape { protected Shape decoratedShape; public ShapeDecorator(Shape decoratedShape){ this.decoratedShape = decoratedShape; } public void draw(){ decoratedShape.draw(); } } 步骤 4: 创建扩展了 ShapeDecorator 类的实体装饰类。 ```java // RedShapeDecorator.java public class RedShapeDecorator extends ShapeDecorator { public RedShapeDecorator(Shape decoratedShape) { super(decoratedShape); } @Override public void draw() { decoratedShape.draw(); setRedBorder(decoratedShape); } private void setRedBorder(Shape decoratedShape){ System.out.println(\\\"Border Color: Red\\\"); } }\",\"步骤 5: 使用 RedShapeDecorator 来装饰 Shape 对象。\",\"// DecoratorPatternDemo.java public class DecoratorPatternDemo { public static void main(String[] args) { Shape circle = new Circle(); Shape redCircle = new RedShapeDecorator(new Circle()); Shape redRectangle = new RedShapeDecorator(new Rectangle()); System.out.println(\\\"Circle with normal border\\\"); circle.draw(); System.out.println(\\\"\\\\nCircle of red border\\\"); redCircle.draw(); System.out.println(\\\"\\\\nRectangle of red border\\\"); redRectangle.draw(); } }\",\"步骤 6: 验证输出。\",\"Circle with normal border Shape: Circle Circle of red border Shape: Circle Border Color: Red Rectangle of red border Shape: Rectangle Border Color: Red\"]},\"214\":{\"h\":\"外观模式（Facade Pattern）\",\"t\":[\"隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。\",\"这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。\",\"意图：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。\",\"主要解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。\",\"何时使用： 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个\\\"接待员\\\"即可。 2、定义系统的入口。\",\"如何解决：客户端不与系统耦合，外观类与系统耦合。\",\"关键代码：在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。\",\"应用实例： 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 2、JAVA 的三层开发模式。\",\"优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。\",\"缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。\",\"使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。\",\"注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。\",\"步骤 1: 创建一个接口。\",\"// Shape.java public interface Shape { void draw(); }\",\"步骤 2: 创建实现接口的实体类。\",\"// Rectangle.java public class Rectangle implements Shape { @Override public void draw() { System.out.println(\\\"Rectangle::draw()\\\"); } } // Square.java public class Square implements Shape { @Override public void draw() { System.out.println(\\\"Square::draw()\\\"); } } // Circle.java public class Circle implements Shape { @Override public void draw() { System.out.println(\\\"Circle::draw()\\\"); } }\",\"步骤 3: 创建一个外观类。\",\" // ShapeMaker.java public class ShapeMaker { private Shape circle; private Shape rectangle; private Shape square; public ShapeMaker() { circle = new Circle(); rectangle = new Rectangle(); square = new Square(); } public void drawCircle(){ circle.draw(); } public void drawRectangle(){ rectangle.draw(); } public void drawSquare(){ square.draw(); } }\",\"步骤 4: 使用该外观类画出各种类型的形状。\",\"// FacadePatternDemo.java public class FacadePatternDemo { public static void main(String[] args) { ShapeMaker shapeMaker = new ShapeMaker(); shapeMaker.drawCircle(); shapeMaker.drawRectangle(); shapeMaker.drawSquare(); } }\",\"步骤 5: 验证输出。\",\"Circle::draw() Rectangle::draw() Square::draw()\"]},\"215\":{\"h\":\"享元模式（Flyweight Pattern）\",\"t\":[\"主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。\",\"享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 Circle 对象。\",\"意图：运用共享技术有效地支持大量细粒度的对象。\",\"主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。\",\"何时使用： 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。\",\"如何解决：用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。\",\"关键代码：用 HashMap 存储这些对象。\",\"应用实例： 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。\",\"优点：大大减少对象的创建，降低系统的内存，使效率提高。\",\"缺点：提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。\",\"使用场景： 1、系统有大量相似对象。 2、需要缓冲池的场景。\",\"注意事项： 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。\",\"步骤 1: 创建一个接口。\",\"// Shape.java public interface Shape { void draw(); }\",\"步骤 2: 创建实现接口的实体类。\",\"// Circle.java public class Circle implements Shape { private String color; private int x; private int y; private int radius; public Circle(String color){ this.color = color; } public void setX(int x) { this.x = x; } public void setY(int y) { this.y = y; } public void setRadius(int radius) { this.radius = radius; } @Override public void draw() { System.out.println(\\\"Circle: Draw() [Color : \\\" + color +\\\", x : \\\" + x +\\\", y :\\\" + y +\\\", radius :\\\" + radius); } }\",\"步骤 3: 创建一个工厂，生成基于给定信息的实体类的对象。\",\"// ShapeFactory.java import java.util.HashMap;public class ShapeFactory { private static final HashMap<String, Shape> circleMap = new HashMap(); public static Shape getCircle(String color) { Circle circle = (Circle)circleMap.get(color); if(circle == null) { circle = new Circle(color); circleMap.put(color, circle); System.out.println(\\\"Creating circle of color : \\\" + color); } return circle; } }\",\"步骤 4: 使用该工厂，通过传递颜色信息来获取实体类的对象。\",\"// FlyweightPatternDemo.java public class FlyweightPatternDemo { private static final String colors[] = { \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"White\\\", \\\"Black\\\" }; public static void main(String[] args) { for(int i=0; i < 20; ++i) { Circle circle = (Circle)ShapeFactory.getCircle(getRandomColor()); circle.setX(getRandomX()); circle.setY(getRandomY()); circle.setRadius(100); circle.draw(); } } private static String getRandomColor() { return colors[(int)(Math.random()*colors.length)]; } private static int getRandomX() { return (int)(Math.random()*100 ); } private static int getRandomY() { return (int)(Math.random()*100); } }\",\"步骤 5: 验证输出。\",\"Creating circle of color : Black Circle: Draw() [Color : Black, x : 36, y :71, radius :100 Creating circle of color : Green Circle: Draw() [Color : Green, x : 27, y :27, radius :100 Creating circle of color : White Circle: Draw() [Color : White, x : 64, y :10, radius :100 Creating circle of color : Red Circle: Draw() [Color : Red, x : 15, y :44, radius :100 Circle: Draw() [Color : Green, x : 19, y :10, radius :100 Circle: Draw() [Color : Green, x : 94, y :32, radius :100 Circle: Draw() [Color : White, x : 69, y :98, radius :100 Creating circle of color : Blue Circle: Draw() [Color : Blue, x : 13, y :4, radius :100 Circle: Draw() [Color : Green, x : 21, y :21, radius :100 Circle: Draw() [Color : Blue, x : 55, y :86, radius :100 Circle: Draw() [Color : White, x : 90, y :70, radius :100 Circle: Draw() [Color : Green, x : 78, y :3, radius :100 Circle: Draw() [Color : Green, x : 64, y :89, radius :100 Circle: Draw() [Color : Blue, x : 3, y :91, radius :100 Circle: Draw() [Color : Blue, x : 62, y :82, radius :100 Circle: Draw() [Color : Green, x : 97, y :61, radius :100 Circle: Draw() [Color : Green, x : 86, y :12, radius :100 Circle: Draw() [Color : Green, x : 38, y :93, radius :100 Circle: Draw() [Color : Red, x : 76, y :82, radius :100 Circle: Draw() [Color : Blue, x : 95, y :82, radius :100\"]},\"216\":{\"h\":\"代理模式（Proxy Pattern）\",\"t\":[\"一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。\",\"在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。\",\"意图：为其他对象提供一种代理以控制对这个对象的访问。\",\"主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。\",\"何时使用：想在访问一个类时做一些控制。\",\"如何解决：增加中间层。\",\"关键代码：实现与被代理类组合。\",\"应用实例： 1、Windows 里面的快捷方式。 2、猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。 3、买火车票不一定在火车站买，也可以去代售点。 4、一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。 5、spring aop。\",\"优点： 1、职责清晰。 2、高扩展性。 3、智能化。\",\"缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。\",\"使用场景：按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。\",\"注意事项： 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。\",\"步骤 1: 创建一个接口。\",\"// Image.java public interface Image { void display(); }\",\"步骤 2: 创建实现接口的实体类。\",\"// RealImage.java public class RealImage implements Image { private String fileName; public RealImage(String fileName){ this.fileName = fileName; loadFromDisk(fileName); } @Override public void display() { System.out.println(\\\"Displaying \\\" + fileName); } private void loadFromDisk(String fileName){ System.out.println(\\\"Loading \\\" + fileName); } } // ProxyImage.java public class ProxyImage implements Image{ private RealImage realImage; private String fileName; public ProxyImage(String fileName){ this.fileName = fileName; } @Override public void display() { if(realImage == null){ realImage = new RealImage(fileName); } realImage.display(); } }\",\"步骤 3: 当被请求时，使用 ProxyImage 来获取 RealImage 类的对象。\",\"// jProxyPatternDemo.java public class ProxyPatternDemo { public static void main(String[] args) { Image image = new ProxyImage(\\\"test_10mb.jpg\\\"); //图像将从磁盘加载 image.display(); System.out.println(\\\"\\\"); //图像将无法从磁盘加载 image.display(); } }\",\"步骤 4: 验证输出。\",\"Loading test_10mb.jpg Displaying test_10mb.jpg Displaying test_10mb.jpg\"]},\"217\":{\"h\":\"责任链模式（Chain of Responsibility Pattern）\",\"t\":[\"为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。\",\"在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。\",\"意图：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。\",\"主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。\",\"何时使用：在处理消息的时候以过滤很多道。\",\"如何解决：拦截的类都实现统一接口。\",\"关键代码：Handler 里面聚合它自己，在 HanleRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。\",\"应用实例： 1、红楼梦中的\\\"击鼓传花\\\"。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。\",\"优点： 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。\",\"缺点： 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。\",\"使用场景： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。\",\"注意事项：在 JAVA WEB 中遇到很多应用。\",\"步骤 1: 创建抽象的记录器类。\",\"// AbstractLogger.java public abstract class AbstractLogger { public static int INFO = 1; public static int DEBUG = 2; public static int ERROR = 3; protected int level; //责任链中的下一个元素 protected AbstractLogger nextLogger; public void setNextLogger(AbstractLogger nextLogger){ this.nextLogger = nextLogger; } public void logMessage(int level, String message){ if(this.level <= level){ write(message); } if(nextLogger !=null){ nextLogger.logMessage(level, message); } } abstract protected void write(String message); }\",\"步骤 2: 创建扩展了该记录器类的实体类。\",\"// ConsoleLogger.java public class ConsoleLogger extends AbstractLogger { public ConsoleLogger(int level){ this.level = level; } @Override protected void write(String message) { System.out.println(\\\"Standard Console::Logger: \\\" + message); } } // ErrorLogger.java public class ErrorLogger extends AbstractLogger { public ErrorLogger(int level){ this.level = level; } @Override protected void write(String message) { System.out.println(\\\"Error Console::Logger: \\\" + message); } } // FileLogger.java public class FileLogger extends AbstractLogger { public FileLogger(int level){ this.level = level; } @Override protected void write(String message) { System.out.println(\\\"File::Logger: \\\" + message); } }\",\"步骤 3: 创建不同类型的记录器。赋予它们不同的错误级别，并在每个记录器中设置下一个记录器。每个记录器中的下一个记录器代表的是链的一部分。\",\"// ChainPatternDemo.java public class ChainPatternDemo { private static AbstractLogger getChainOfLoggers(){ AbstractLogger errorLogger = new ErrorLogger(AbstractLogger.ERROR); AbstractLogger fileLogger = new FileLogger(AbstractLogger.DEBUG); AbstractLogger consoleLogger = new ConsoleLogger(AbstractLogger.INFO); errorLogger.setNextLogger(fileLogger); fileLogger.setNextLogger(consoleLogger); return errorLogger; } public static void main(String[] args) { AbstractLogger loggerChain = getChainOfLoggers(); loggerChain.logMessage(AbstractLogger.INFO, \\\"This is an information.\\\"); loggerChain.logMessage(AbstractLogger.DEBUG, \\\"This is an debug level information.\\\"); loggerChain.logMessage(AbstractLogger.ERROR, \\\"This is an error information.\\\"); } }\",\"步骤 4: 验证输出。\",\"Standard Console::Logger: This is an information. File::Logger: This is an debug level information. Standard Console::Logger: This is an debug level information. Error Console::Logger: This is an error information. File::Logger: This is an error information. Standard Console::Logger: This is an error information.\"]},\"218\":{\"h\":\"命令模式（Command Pattern）\",\"t\":[\"是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。\",\"意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。\",\"主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。\",\"何时使用：在某些场合，比如要对行为进行\\\"记录、撤销/重做、事务\\\"等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将\\\"行为请求者\\\"与\\\"行为实现者\\\"解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。\",\"如何解决：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。\",\"关键代码：定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口\",\"应用实例：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。\",\"优点： 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。\",\"缺点：使用命令模式可能会导致某些系统有过多的具体命令类。\",\"使用场景：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。\",\"注意事项：系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。\",\"步骤 1: 创建一个命令接口。\",\"// Order.java public interface Order { void execute(); }\",\"步骤 2: 创建一个请求类。\",\"// Stock.java public class Stock { private String name = \\\"ABC\\\"; private int quantity = 10; public void buy(){ System.out.println(\\\"Stock [ Name: \\\"+name+\\\", Quantity: \\\" + quantity +\\\" ] bought\\\"); } public void sell(){ System.out.println(\\\"Stock [ Name: \\\"+name+\\\", Quantity: \\\" + quantity +\\\" ] sold\\\"); } }\",\"步骤 3: 创建实现了 Order 接口的实体类。\",\"// BuyStock.java public class BuyStock implements Order { private Stock abcStock; public BuyStock(Stock abcStock){ this.abcStock = abcStock; } public void execute() { abcStock.buy(); } } // SellStock.java public class SellStock implements Order { private Stock abcStock; public SellStock(Stock abcStock){ this.abcStock = abcStock; } public void execute() { abcStock.sell(); } }\",\"步骤 4: 创建命令调用类。\",\"// Broker.java import java.util.ArrayList; import java.util.List; public class Broker { private List<Order> orderList = new ArrayList<Order>(); public void takeOrder(Order order){ orderList.add(order); } public void placeOrders(){ for (Order order : orderList) { order.execute(); } orderList.clear(); } }\",\"步骤 5: 使用 Broker 类来接受并执行命令。\",\"// CommandPatternDemo.java public class CommandPatternDemo { public static void main(String[] args) { Stock abcStock = new Stock(); BuyStock buyStockOrder = new BuyStock(abcStock); SellStock sellStockOrder = new SellStock(abcStock); Broker broker = new Broker(); broker.takeOrder(buyStockOrder); broker.takeOrder(sellStockOrder); broker.placeOrders(); } }\",\"步骤 6: 验证输出。\",\"Stock [ Name: ABC, Quantity: 10 ] bought Stock [ Name: ABC, Quantity: 10 ] sold\"]},\"219\":{\"h\":\"解释器模式（Interpreter Pattern）\",\"t\":[\"提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。\",\"意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。\",\"主要解决：对于一些固定文法构建一个解释句子的解释器。\",\"何时使用：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。\",\"如何解决：构件语法树，定义终结符与非终结符。\",\"关键代码：构件环境类，包含解释器之外的一些全局信息，一般是 HashMap。\",\"应用实例：编译器、运算表达式计算。\",\"优点： 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。\",\"缺点： 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。\",\"使用场景： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。\",\"注意事项：可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。\",\"步骤 1: 创建一个表达式接口。\",\"// Expression.java public interface Expression { public boolean interpret(String context); }\",\"步骤 2: 创建实现了上述接口的实体类。\",\"// TerminalExpression.java public class TerminalExpression implements Expression { private String data; public TerminalExpression(String data){ this.data = data; } @Override public boolean interpret(String context) { if(context.contains(data)){ return true; } return false; } } // OrExpression.java public class OrExpression implements Expression { private Expression expr1 = null; private Expression expr2 = null; public OrExpression(Expression expr1, Expression expr2) { this.expr1 = expr1; this.expr2 = expr2; } @Override public boolean interpret(String context) { return expr1.interpret(context) || expr2.interpret(context); } } // AndExpression.java public class AndExpression implements Expression { private Expression expr1 = null; private Expression expr2 = null; public AndExpression(Expression expr1, Expression expr2) { this.expr1 = expr1; this.expr2 = expr2; } @Override public boolean interpret(String context) { return expr1.interpret(context) && expr2.interpret(context); } }\",\"步骤 3: InterpreterPatternDemo 使用 Expression 类来创建规则，并解析它们。\",\"// InterpreterPatternDemo.java public class InterpreterPatternDemo { //规则：Robert 和 John 是男性 public static Expression getMaleExpression(){ Expression robert = new TerminalExpression(\\\"Robert\\\"); Expression john = new TerminalExpression(\\\"John\\\"); return new OrExpression(robert, john); } //规则：Julie 是一个已婚的女性 public static Expression getMarriedWomanExpression(){ Expression julie = new TerminalExpression(\\\"Julie\\\"); Expression married = new TerminalExpression(\\\"Married\\\"); return new AndExpression(julie, married); } public static void main(String[] args) { Expression isMale = getMaleExpression(); Expression isMarriedWoman = getMarriedWomanExpression(); System.out.println(\\\"John is male? \\\" + isMale.interpret(\\\"John\\\")); System.out.println(\\\"Julie is a married women? \\\" + isMarriedWoman.interpret(\\\"Married Julie\\\")); } }\",\"步骤 4: 验证输出。\",\"John is male? true Julie is a married women? true\"]},\"220\":{\"h\":\"迭代器模式（Iterator Pattern）\",\"t\":[\"是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。\",\"意图：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。\",\"主要解决：不同的方式来遍历整个整合对象。\",\"何时使用：遍历一个聚合对象。\",\"如何解决：把在元素之间游走的责任交给迭代器，而不是聚合对象。\",\"关键代码：定义接口：hasNext, next。\",\"应用实例：JAVA 中的 iterator。\",\"优点： 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。\",\"缺点：由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。\",\"使用场景： 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。\",\"注意事项：迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。\",\"步骤 1: 创建接口。\",\"// Iterator.java public interface Iterator { public boolean hasNext(); public Object next(); } // Container.java public interface Container { public Iterator getIterator(); }\",\"步骤 2: 创建实现了 Container 接口的实体类。该类有实现了 Iterator 接口的内部类 NameIterator。\",\"// NameRepository.java public class NameRepository implements Container { public String names[] = {\\\"Robert\\\" , \\\"John\\\" ,\\\"Julie\\\" , \\\"Lora\\\"}; @Override public Iterator getIterator() { return new NameIterator(); } private class NameIterator implements Iterator { int index; @Override public boolean hasNext() { if(index < names.length){ return true; } return false; } @Override public Object next() { if(this.hasNext()){ return names[index++]; } return null; } } }\",\"步骤 3: 使用 NameRepository 来获取迭代器，并打印名字。\",\"// IteratorPatternDemo.java public class IteratorPatternDemo { public static void main(String[] args) { NameRepository namesRepository = new NameRepository(); for(Iterator iter = namesRepository.getIterator(); iter.hasNext();){ String name = (String)iter.next(); System.out.println(\\\"Name : \\\" + name); } } }\",\"步骤 4: 验证输出。\",\"Name : Robert Name : John Name : Julie Name : Lora\"]},\"221\":{\"h\":\"中介者模式（Mediator Pattern）\",\"t\":[\"是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。\",\"意图：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\",\"主要解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。\",\"何时使用：多个类相互耦合，形成了网状结构。\",\"如何解决：将上述网状结构分离为星型结构。\",\"关键代码：对象 Colleague 之间的通信封装到一个类中单独处理。\",\"应用实例： 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。\",\"优点： 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。\",\"缺点：中介者会庞大，变得复杂难以维护。\",\"使用场景： 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。\",\"注意事项：不应当在职责混乱的时候使用。\",\"步骤 1: 创建中介类。\",\" // ChatRoom.java import java.util.Date;public class ChatRoom { public static void showMessage(User user, String message){ System.out.println(new Date().toString() + \\\" [\\\" + user.getName() +\\\"] : \\\" + message); } }\",\"步骤 2: 创建 user 类。\",\"// User.java public class User { private String name; public String getName() { return name; } public void setName(String name) { this.name = name; } public User(String name){ this.name = name; } public void sendMessage(String message){ ChatRoom.showMessage(this,message); } }\",\"步骤 3: 使用 User 对象来显示他们之间的通信。\",\"// MediatorPatternDemo.java public class MediatorPatternDemo { public static void main(String[] args) { User robert = new User(\\\"Robert\\\"); User john = new User(\\\"John\\\"); robert.sendMessage(\\\"Hi! John!\\\"); john.sendMessage(\\\"Hello! Robert!\\\"); } }\",\"步骤 4: 验证输出。\",\"Thu Jan 31 16:05:46 IST 2013 [Robert] : Hi! John! Thu Jan 31 16:05:46 IST 2013 [John] : Hello! Robert!\"]},\"222\":{\"h\":\"备忘录模式（Memento Pattern）\",\"t\":[\"保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。\",\"意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。\",\"主要解决：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。\",\"何时使用：很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有\\\"后悔药\\\"可吃。\",\"如何解决：通过一个备忘录类专门存储对象状态。\",\"关键代码：客户不与备忘录类耦合，与备忘录管理类耦合。\",\"应用实例： 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。\",\"优点： 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。\",\"缺点：消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。\",\"使用场景： 1、需要保存/恢复数据的相关状态场景。 2、提供一个可回滚的操作。\",\"注意事项： 1、为了符合迪米特原则，还要增加一个管理备忘录的类。 2、为了节约内存，可使用原型模式+备忘录模式。\",\"步骤 1: 创建 Memento 类。\",\" // Memento.java public class Memento { private String state; public Memento(String state){ this.state = state; } public String getState(){ return state; } } 步骤 2: 创建 Originator 类。 ```java // Originator.java public class Originator { private String state; public void setState(String state){ this.state = state; } public String getState(){ return state; } public Memento saveStateToMemento(){ return new Memento(state); } public void getStateFromMemento(Memento Memento){ state = Memento.getState(); } } 步骤 3: 创建 CareTaker 类。 ```java // CareTaker.java import java.util.ArrayList; import java.util.List; public class CareTaker { private List<Memento> mementoList = new ArrayList<Memento>(); public void add(Memento state){ mementoList.add(state); } public Memento get(int index){ return mementoList.get(index); } } 步骤 4: 使用 CareTaker 和 Originator 对象。 ```java // MementoPatternDemo.java public class MementoPatternDemo { public static void main(String[] args) { Originator originator = new Originator(); CareTaker careTaker = new CareTaker(); originator.setState(\\\"State #1\\\"); originator.setState(\\\"State #2\\\"); careTaker.add(originator.saveStateToMemento()); originator.setState(\\\"State #3\\\"); careTaker.add(originator.saveStateToMemento()); originator.setState(\\\"State #4\\\"); System.out.println(\\\"Current State: \\\" + originator.getState()); originator.getStateFromMemento(careTaker.get(0)); System.out.println(\\\"First saved State: \\\" + originator.getState()); originator.getStateFromMemento(careTaker.get(1)); System.out.println(\\\"Second saved State: \\\" + originator.getState()); } }\",\"步骤 5: 验证输出。\",\"Current State: State #4 First saved State: State #2 Second saved State: State #3\"]},\"223\":{\"h\":\"当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）\",\"t\":[\"比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。\",\"意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。\",\"主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。\",\"何时使用：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。\",\"如何解决：使用面向对象技术，可以将这种依赖关系弱化。\",\"关键代码：在抽象类里有一个 ArrayList 存放观察者们。\",\"应用实例： 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。\",\"优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。\",\"缺点： 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。\",\"使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。\",\"注意事项： 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。\",\"步骤 1: 创建 Subject 类。\",\"// Subject.java import java.util.ArrayList; import java.util.List; public class Subject { private List<Observer> observers = new ArrayList<Observer>(); private int state; public int getState() { return state; } public void setState(int state) { this.state = state; notifyAllObservers(); } public void attach(Observer observer){ observers.add(observer); } public void notifyAllObservers(){ for (Observer observer : observers) { observer.update(); } } }\",\"步骤 2: 创建 Observer 类。\",\"// Observer.java public abstract class Observer { protected Subject subject; public abstract void update(); }\",\"步骤 3: 创建实体观察者类。\",\"// BinaryObserver.java public class BinaryObserver extends Observer{ public BinaryObserver(Subject subject){ this.subject = subject; this.subject.attach(this); } @Override public void update() { System.out.println( \\\"Binary String: \\\" + Integer.toBinaryString( subject.getState() ) ); } } // OctalObserver.java public class OctalObserver extends Observer{ public OctalObserver(Subject subject){ this.subject = subject; this.subject.attach(this); } @Override public void update() { System.out.println( \\\"Octal String: \\\" + Integer.toOctalString( subject.getState() ) ); } } // HexaObserver.java public class HexaObserver extends Observer{ public HexaObserver(Subject subject){ this.subject = subject; this.subject.attach(this); } @Override public void update() { System.out.println( \\\"Hex String: \\\" + Integer.toHexString( subject.getState() ).toUpperCase() ); } }\",\"步骤 4: 使用 Subject 和实体观察者对象。\",\"// ObserverPatternDemo.java public class ObserverPatternDemo { public static void main(String[] args) { Subject subject = new Subject(); new HexaObserver(subject); new OctalObserver(subject); new BinaryObserver(subject); System.out.println(\\\"First state change: 15\\\"); subject.setState(15); System.out.println(\\\"Second state change: 10\\\"); subject.setState(10); } } 步骤 5: 验证输出。 ```txt First state change: 15 Hex String: F Octal String: 17 Binary String: 1111 Second state change: 10 Hex String: A Octal String: 12 Binary String: 1010\"]},\"224\":{\"h\":\"状态模式（State Pattern）\",\"t\":[\"类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式\",\"在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。\",\"意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。\",\"主要解决：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。\",\"何时使用：代码中包含大量与对象状态有关的条件语句。\",\"如何解决：将各种具体的状态类抽象出来。\",\"关键代码：通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if...else 等条件选择语句。\",\"应用实例： 1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态。 2、曾侯乙编钟中，'钟是抽象接口','钟A'等是具体状态，'曾侯乙编钟'是具体环境（Context）。\",\"优点： 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。\",\"缺点： 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对\\\"开闭原则\\\"的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。\",\"使用场景： 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。\",\"注意事项：在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。\",\"步骤 1: 创建一个接口。\",\"// State.java public interface State { public void doAction(Context context); }\",\"步骤 2: 创建实现接口的实体类。\",\"// StartState.java public class StartState implements State { public void doAction(Context context) { System.out.println(\\\"Player is in start state\\\"); context.setState(this); } public String toString(){ return \\\"Start State\\\"; } } // StopState.java public class StopState implements State { public void doAction(Context context) { System.out.println(\\\"Player is in stop state\\\"); context.setState(this); } public String toString(){ return \\\"Stop State\\\"; } } 步骤 3: 创建 Context 类。 ```java // Context.java public class Context { private State state; public Context(){ state = null; } public void setState(State state){ this.state = state; } public State getState(){ return state; } } 步骤 4: 使用 Context 来查看当状态 State 改变时的行为变化。 ```java // StatePatternDemo.java public class StatePatternDemo { public static void main(String[] args) { Context context = new Context(); StartState startState = new StartState(); startState.doAction(context); System.out.println(context.getState().toString()); StopState stopState = new StopState(); stopState.doAction(context); System.out.println(context.getState().toString()); } } 步骤 5: 验证输出。 ```txt Player is in start state Start State Player is in stop state Stop State\"]},\"225\":{\"h\":\"空对象模式（Null Object Pattern）\",\"t\":[\"一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。\",\"在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。\",\"步骤 1: 创建一个抽象类。\",\"// AbstractCustomer.java public abstract class AbstractCustomer { protected String name; public abstract boolean isNil(); public abstract String getName(); } 步骤 2: 创建扩展了上述类的实体类。 ```java // RealCustomer.java public class RealCustomer extends AbstractCustomer { public RealCustomer(String name) { this.name = name; } @Override public String getName() { return name; } @Override public boolean isNil() { return false; } } // NullCustomer.java public class NullCustomer extends AbstractCustomer { @Override public String getName() { return \\\"Not Available in Customer Database\\\"; } @Override public boolean isNil() { return true; } }\",\"步骤 3: 创建 CustomerFactory 类。\",\"// CustomerFactory.java public class CustomerFactory { public static final String[] names = {\\\"Rob\\\", \\\"Joe\\\", \\\"Julie\\\"}; public static AbstractCustomer getCustomer(String name){ for (int i = 0; i < names.length; i++) { if (names[i].equalsIgnoreCase(name)){ return new RealCustomer(name); } } return new NullCustomer(); } }\",\"步骤 4: 使用 CustomerFactory，基于客户传递的名字，来获取 RealCustomer 或 NullCustomer 对象。\",\"// NullPatternDemo.java public class NullPatternDemo { public static void main(String[] args) { AbstractCustomer customer1 = CustomerFactory.getCustomer(\\\"Rob\\\"); AbstractCustomer customer2 = CustomerFactory.getCustomer(\\\"Bob\\\"); AbstractCustomer customer3 = CustomerFactory.getCustomer(\\\"Julie\\\"); AbstractCustomer customer4 = CustomerFactory.getCustomer(\\\"Laura\\\"); System.out.println(\\\"Customers\\\"); System.out.println(customer1.getName()); System.out.println(customer2.getName()); System.out.println(customer3.getName()); System.out.println(customer4.getName()); } }\",\"步骤 5: 验证输出。\",\"Customers Rob Not Available in Customer Database Julie Not Available in Customer Database\"]},\"226\":{\"h\":\"策略模式（Strategy Pattern）\",\"t\":[\"一个类的行为或其算法可以在运行时更改。\",\"在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。\",\"意图：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。\",\"主要解决：在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。\",\"何时使用：一个系统有许多许多类，而区分它们的只是他们直接的行为。\",\"如何解决：将这些算法封装成一个一个的类，任意地替换。\",\"关键代码：实现同一个接口。\",\"应用实例： 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。\",\"优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。\",\"缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。\",\"使用场景： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。\",\"注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。\",\"步骤 1: 创建一个接口。\",\"// Strategy.java public interface Strategy { public int doOperation(int num1, int num2); }\",\"步骤 2: 创建实现接口的实体类。\",\"// OperationAdd.java public class OperationAdd implements Strategy{ @Override public int doOperation(int num1, int num2) { return num1 + num2; } } // OperationSubstract.java public class OperationSubstract implements Strategy{ @Override public int doOperation(int num1, int num2) { return num1 - num2; } } // OperationMultiply.java public class OperationMultiply implements Strategy{ @Override public int doOperation(int num1, int num2) { return num1 * num2; } }\",\"步骤 3: 创建 Context 类。\",\"// Context.java public class Context { private Strategy strategy; public Context(Strategy strategy){ this.strategy = strategy; } public int executeStrategy(int num1, int num2){ return strategy.doOperation(num1, num2); } }\",\"步骤 4: 使用 Context 来查看当它改变策略 Strategy 时的行为变化。\",\"// StrategyPatternDemo.java public class StrategyPatternDemo { public static void main(String[] args) { Context context = new Context(new OperationAdd()); System.out.println(\\\"10 + 5 = \\\" + context.executeStrategy(10, 5)); context = new Context(new OperationSubstract()); System.out.println(\\\"10 - 5 = \\\" + context.executeStrategy(10, 5)); context = new Context(new OperationMultiply()); System.out.println(\\\"10 * 5 = \\\" + context.executeStrategy(10, 5)); } }\",\"步骤 5: 验证输出。\",\"10 + 5 = 15 10 - 5 = 5 10 * 5 = 50\"]},\"227\":{\"h\":\"模板模式（Template Pattern）\",\"t\":[\"一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。\",\"意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。\",\"主要解决：一些方法通用，却在每一个子类都重新写了这一方法。\",\"何时使用：有一些通用的方法。\",\"如何解决：将这些通用算法抽象出来。\",\"关键代码：在抽象类实现，其他步骤在子类实现。\",\"应用实例： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、Spirng 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。\",\"优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。\",\"缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。\",\"使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。\",\"注意事项：为防止恶意操作，一般模板方法都加上 final 关键词。\",\"步骤 1: 创建一个抽象类，它的模板方法被设置为 final。\",\"// Game.java public abstract class Game { abstract void initialize(); abstract void startPlay(); abstract void endPlay(); //模板 public final void play(){ //初始化游戏 initialize(); //开始游戏 startPlay(); //结束游戏 endPlay(); } }\",\"步骤 2: 创建扩展了上述类的实体类。\",\"// Cricket.java public class Cricket extends Game { @Override void endPlay() { System.out.println(\\\"Cricket Game Finished!\\\"); } @Override void initialize() { System.out.println(\\\"Cricket Game Initialized! Start playing.\\\"); } @Override void startPlay() { System.out.println(\\\"Cricket Game Started. Enjoy the game!\\\"); } } // Football.java public class Football extends Game { @Override void endPlay() { System.out.println(\\\"Football Game Finished!\\\"); } @Override void initialize() { System.out.println(\\\"Football Game Initialized! Start playing.\\\"); } @Override void startPlay() { System.out.println(\\\"Football Game Started. Enjoy the game!\\\"); } }\",\"步骤 3: 使用 Game 的模板方法 play() 来演示游戏的定义方式。\",\"// TemplatePatternDemo.java public class TemplatePatternDemo { public static void main(String[] args) { Game game = new Cricket(); game.play(); System.out.println(); game = new Football(); game.play(); } }\",\"步骤 4: 验证输出。\",\"Cricket Game Initialized! Start playing. Cricket Game Started. Enjoy the game! Cricket Game Finished! Football Game Initialized! Start playing. Football Game Started. Enjoy the game! Football Game Finished!\"]},\"228\":{\"h\":\"访问者模式（Visitor Pattern）\",\"t\":[\"我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。\",\"意图：主要将数据结构与数据操作分离。\",\"主要解决：稳定的数据结构和易变的操作耦合问题。\",\"何时使用：需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作\\\"污染\\\"这些对象的类，使用访问者模式将这些封装到类中。\",\"如何解决：在被访问的类里面加一个对外提供接待访问者的接口。\",\"关键代码：在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。\",\"应用实例：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。\",\"优点： 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。\",\"缺点： 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。\",\"使用场景： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作\\\"污染\\\"这些对象的类，也不希望在增加新操作时修改这些类。\",\"注意事项：访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。\",\"步骤 1: 定义一个表示元素的接口。\",\"// ComputerPart.java public interface ComputerPart { public void accept(ComputerPartVisitor computerPartVisitor); }\",\"步骤 2: 创建扩展了上述类的实体类。\",\"// Keyboard.java public class Keyboard implements ComputerPart { @Override public void accept(ComputerPartVisitor computerPartVisitor) { computerPartVisitor.visit(this); } } // Monitor.java public class Monitor implements ComputerPart { @Override public void accept(ComputerPartVisitor computerPartVisitor) { computerPartVisitor.visit(this); } } // Mouse.java public class Mouse implements ComputerPart { @Override public void accept(ComputerPartVisitor computerPartVisitor) { computerPartVisitor.visit(this); } } // Computer.java public class Computer implements ComputerPart { ComputerPart[] parts; public Computer(){ parts = new ComputerPart[] {new Mouse(), new Keyboard(), new Monitor()};j } @Override public void accept(ComputerPartVisitor computerPartVisitor) { for (int i = 0; i < parts.length; i++) { parts[i].accept(computerPartVisitor); } computerPartVisitor.visit(this); } }\",\"步骤 3: 定义一个表示访问者的接口。\",\" // ComputerPartVisitor.java public interface ComputerPartVisitor { public void visit(Computer computer); public void visit(Mouse mouse); public void visit(Keyboard keyboard); public void visit(Monitor monitor); }\",\"步骤 4: 创建实现了上述类的实体访问者。\",\"// ComputerPartDisplayVisitor.java public class ComputerPartDisplayVisitor implements ComputerPartVisitor { @Override public void visit(Computer computer) { System.out.println(\\\"Displaying Computer.\\\"); } @Override public void visit(Mouse mouse) { System.out.println(\\\"Displaying Mouse.\\\"); } @Override public void visit(Keyboard keyboard) { System.out.println(\\\"Displaying Keyboard.\\\"); } @Override public void visit(Monitor monitor) { System.out.println(\\\"Displaying Monitor.\\\"); } }\",\"步骤 5: 使用 ComputerPartDisplayVisitor 来显示 Computer 的组成部分。\",\"// VisitorPatternDemo.java public class VisitorPatternDemo { public static void main(String[] args) { ComputerPart computer = new Computer(); computer.accept(new ComputerPartDisplayVisitor()); } }\",\"步骤 6: 验证输出。\",\"Displaying Mouse. Displaying Keyboard. Displaying Monitor. Displaying Computer.\"]},\"229\":{\"h\":\"MVC 模式\",\"t\":[\"代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。\",\"Model（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。\",\"View（视图） - 视图代表模型包含的数据的可视化。\",\"Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。\",\"步骤 1: 创建模型。\",\"// Student.java public class Student { private String rollNo; private String name; public String getRollNo() { return rollNo; } public void setRollNo(String rollNo) { this.rollNo = rollNo; } public String getName() { return name; } public void setName(String name) { this.name = name; } } 步骤 2: 创建视图。 ```java // StudentView.java public class StudentView { public void printStudentDetails(String studentName, String studentRollNo){ System.out.println(\\\"Student: \\\"); System.out.println(\\\"Name: \\\" + studentName); System.out.println(\\\"Roll No: \\\" + studentRollNo); } }\",\"步骤 3: 创建控制器。\",\"// StudentController.java public class StudentController { private Student model; private StudentView view; public StudentController(Student model, StudentView view){ this.model = model; this.view = view; } public void setStudentName(String name){ model.setName(name); } public String getStudentName(){ return model.getName(); } public void setStudentRollNo(String rollNo){ model.setRollNo(rollNo); } public String getStudentRollNo(){ return model.getRollNo(); } public void updateView(){ view.printStudentDetails(model.getName(), model.getRollNo()); } }\",\"步骤 4: 使用 StudentController 方法来演示 MVC 设计模式的用法。\",\"// MVCPatternDemo.java public class MVCPatternDemo { public static void main(String[] args) { //从数据可获取学生记录 Student model = retriveStudentFromDatabase(); //创建一个视图：把学生详细信息输出到控制台 StudentView view = new StudentView(); StudentController controller = new StudentController(model, view); controller.updateView(); //更新模型数据 controller.setStudentName(\\\"John\\\"); controller.updateView(); } private static Student retriveStudentFromDatabase(){ Student student = new Student(); student.setName(\\\"Robert\\\"); student.setRollNo(\\\"10\\\"); return student; } }\",\"步骤 5: 验证输出。\",\"Student: Name: Robert Roll No: 10 Student: Name: John Roll No: 10\"]},\"230\":{\"h\":\"业务代表模式（Business Delegate Pattern）\",\"t\":[\"用于对表示层和业务层解耦。它基本上是用来减少通信或对表示层代码中的业务层代码的远程查询功能。在业务层中我们有以下实体。\",\"客户端（Client） - 表示层代码可以是 JSP、servlet 或 UI java 代码。\",\"业务代表（Business Delegate） - 一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。\",\"查询服务（LookUp Service） - 查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。\",\"业务服务（Business Service） - 业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。\",\"步骤 1: 创建 BusinessService 接口。\",\"// BusinessService.java public interface BusinessService { public void doProcessing(); }\",\"步骤 2: 创建实体服务类。\",\"// EJBService.java public class EJBService implements BusinessService { @Override public void doProcessing() { System.out.println(\\\"Processing task by invoking EJB Service\\\"); } }\",\"// JMSService.java public class JMSService implements BusinessService { @Override public void doProcessing() { System.out.println(\\\"Processing task by invoking JMS Service\\\"); } }\",\"步骤 3: 创建业务查询服务。\",\"// BusinessLookUp.java public class BusinessLookUp { public BusinessService getBusinessService(String serviceType){ if(serviceType.equalsIgnoreCase(\\\"EJB\\\")){ return new EJBService(); }else { return new JMSService(); } } }\",\"步骤 4: 创建业务代表。\",\"// BusinessDelegate.java public class BusinessDelegate { private BusinessLookUp lookupService = new BusinessLookUp(); private BusinessService businessService; private String serviceType; public void setServiceType(String serviceType){ this.serviceType = serviceType; } public void doTask(){ businessService = lookupService.getBusinessService(serviceType); businessService.doProcessing(); } }\",\"步骤 5: 创建客户端。\",\"// Client.java public class Client { BusinessDelegate businessService; public Client(BusinessDelegate businessService){ this.businessService = businessService; } public void doTask(){ businessService.doTask(); } }\",\"步骤 6: 使用 BusinessDelegate 和 Client 类来演示业务代表模式。\",\"// BusinessDelegatePatternDemo.java public class BusinessDelegatePatternDemo { public static void main(String[] args) { BusinessDelegate businessDelegate = new BusinessDelegate(); businessDelegate.setServiceType(\\\"EJB\\\"); Client client = new Client(businessDelegate); client.doTask(); businessDelegate.setServiceType(\\\"JMS\\\"); client.doTask(); } }\",\"步骤 7: 验证输出。\",\"Processing task by invoking EJB Service Processing task by invoking JMS Service\"]},\"231\":{\"h\":\"组合实体模式（Composite Entity Pattern）\",\"t\":[\"用在 EJB 持久化机制中。一个组合实体是一个 EJB 实体 bean，代表了对象的图解。当更新一个组合实体时，内部依赖对象 beans 会自动更新，因为它们是由 EJB 实体 bean 管理的。以下是组合实体 bean 的参与者。\",\"组合实体（Composite Entity） - 它是主要的实体 bean。它可以是粗粒的，或者可以包含一个粗粒度对象，用于持续生命周期。\",\"粗粒度对象（Coarse-Grained Object） - 该对象包含依赖对象。它有自己的生命周期，也能管理依赖对象的生命周期。\",\"依赖对象（Dependent Object） - 依赖对象是一个持续生命周期依赖于粗粒度对象的对象。\",\"策略（Strategies） - 策略表示如何实现组合实体。\",\"步骤 1: 创建依赖对象。\",\"// DependentObject1.java public class DependentObject1 { private String data; public void setData(String data){ this.data = data; } public String getData(){ return data; } } // DependentObject2.java public class DependentObject2 { private String data; public void setData(String data){ this.data = data; } public String getData(){ return data; } }\",\"步骤 2: 创建粗粒度对象。\",\"// CoarseGrainedObject.java public class CoarseGrainedObject { DependentObject1 do1 = new DependentObject1(); DependentObject2 do2 = new DependentObject2(); public void setData(String data1, String data2){ do1.setData(data1); do2.setData(data2); } public String[] getData(){ return new String[] {do1.getData(),do2.getData()}; } }\",\"步骤 3: 创建组合实体。\",\"// CompositeEntity.java public class CompositeEntity { private CoarseGrainedObject cgo = new CoarseGrainedObject(); public void setData(String data1, String data2){ cgo.setData(data1, data2); } public String[] getData(){ return cgo.getData(); } }\",\"步骤 4: 创建使用组合实体的客户端类。\",\"// Client.java public class Client { private CompositeEntity compositeEntity = new CompositeEntity(); public void printData(){ for (int i = 0; i < compositeEntity.getData().length; i++) { System.out.println(\\\"Data: \\\" + compositeEntity.getData()[i]); } } public void setData(String data1, String data2){ compositeEntity.setData(data1, data2); } }\",\"步骤 5: 使用 Client 来演示组合实体设计模式的用法。\",\"// CompositeEntityPatternDemo.java public class CompositeEntityPatternDemo { public static void main(String[] args) { Client client = new Client(); client.setData(\\\"Test\\\", \\\"Data\\\"); client.printData(); client.setData(\\\"Second Test\\\", \\\"Data1\\\"); client.printData(); } }\",\"步骤 6: 验证输出。\",\"Data: Test Data: Data Data: Second Test Data: Data1\"]},\"232\":{\"h\":\"数据访问对象模式（Data Access Object Pattern）或 DAO 模式\",\"t\":[\"用于把低级的数据访问 API 或操作从高级的业务服务中分离出来。以下是数据访问对象模式的参与者。\",\"数据访问对象接口（Data Access Object Interface） - 该接口定义了在一个模型对象上要执行的标准操作。\",\"数据访问对象实体类（Data Access Object concrete class） - 该类实现了上述的接口。该类负责从数据源获取数据，数据源可以是数据库，也可以是 xml，或者是其他的存储机制。\",\"模型对象/数值对象（Model Object/Value Object） - 该对象是简单的 POJO，包含了 get/set 方法来存储通过使用 DAO 类检索到的数据。\",\"步骤 1: 创建数值对象。\",\"// Student.java public class Student { private String name; private int rollNo; Student(String name, int rollNo){ this.name = name; this.rollNo = rollNo; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getRollNo() { return rollNo; } public void setRollNo(int rollNo) { this.rollNo = rollNo; } }\",\"步骤 2: 创建数据访问对象接口。\",\"// StudentDao.java import java.util.List; public interface StudentDao { public List<Student> getAllStudents(); public Student getStudent(int rollNo); public void updateStudent(Student student); public void deleteStudent(Student student); } 步骤 3: 创建实现了上述接口的实体类。 ```java // StudentDaoImpl.java import java.util.ArrayList; import java.util.List; public class StudentDaoImpl implements StudentDao { //列表是当作一个数据库 List<Student> students; public StudentDaoImpl(){ students = new ArrayList<Student>(); Student student1 = new Student(\\\"Robert\\\",0); Student student2 = new Student(\\\"John\\\",1); students.add(student1); students.add(student2); } @Override public void deleteStudent(Student student) { students.remove(student.getRollNo()); System.out.println(\\\"Student: Roll No \\\" + student.getRollNo() +\\\", deleted from database\\\"); } //从数据库中检索学生名单 @Override public List<Student> getAllStudents() { return students; } @Override public Student getStudent(int rollNo) { return students.get(rollNo); } @Override public void updateStudent(Student student) { students.get(student.getRollNo()).setName(student.getName()); System.out.println(\\\"Student: Roll No \\\" + student.getRollNo() +\\\", updated in the database\\\"); } }\",\"步骤 4: 使用 StudentDao 来演示数据访问对象模式的用法。\",\" // CompositeEntityPatternDemo.java public class DaoPatternDemo { public static void main(String[] args) { StudentDao studentDao = new StudentDaoImpl(); //输出所有的学生 for (Student student : studentDao.getAllStudents()) { System.out.println(\\\"Student: [RollNo : \\\" +student.getRollNo()+\\\", Name : \\\"+student.getName()+\\\" ]\\\"); } //更新学生 Student student =studentDao.getAllStudents().get(0); student.setName(\\\"Michael\\\"); studentDao.updateStudent(student); //获取学生 studentDao.getStudent(0); System.out.println(\\\"Student: [RollNo : \\\" +student.getRollNo()+\\\", Name : \\\"+student.getName()+\\\" ]\\\"); } }\",\"步骤 5: 验证输出。\",\"Student: [RollNo : 0, Name : Robert ] Student: [RollNo : 1, Name : John ] Student: Roll No 0, updated in the database Student: [RollNo : 0, Name : Michael ]\"]},\"233\":{\"h\":\"前端控制器模式（Front Controller Pattern）\",\"t\":[\"用来提供一个集中的请求处理机制，所有的请求都将由一个单一的处理程序处理。该处理程序可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。以下是这种设计模式的实体。\",\"前端控制器（Front Controller） - 处理应用程序所有类型请求的单个处理程序，应用程序可以是基于 web 的应用程序，也可以是基于桌面的应用程序。\",\"调度器（Dispatcher） - 前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序。\",\"视图（View） - 视图是为请求而创建的对象。\",\"步骤 1: 创建视图。\",\"// HomeView.java public class HomeView { public void show(){ System.out.println(\\\"Displaying Home Page\\\"); } } // StudentView.java public class StudentView { public void show(){ System.out.println(\\\"Displaying Student Page\\\"); } }\",\"步骤 2: 创建调度器 Dispatcher。\",\"// Dispatcher.java public class Dispatcher { private StudentView studentView; private HomeView homeView; public Dispatcher(){ studentView = new StudentView(); homeView = new HomeView(); } public void dispatch(String request){ if(request.equalsIgnoreCase(\\\"STUDENT\\\")){ studentView.show(); }else{ homeView.show(); } } }\",\"步骤 3: 创建前端控制器 FrontController。\",\"// Context.java public class FrontController { private Dispatcher dispatcher; public FrontController(){ dispatcher = new Dispatcher(); } private boolean isAuthenticUser(){ System.out.println(\\\"User is authenticated successfully.\\\"); return true; } private void trackRequest(String request){ System.out.println(\\\"Page requested: \\\" + request); } public void dispatchRequest(String request){ //记录每一个请求 trackRequest(request); //对用户进行身份验证 if(isAuthenticUser()){ dispatcher.dispatch(request); } } }\",\"步骤 4: 使用 FrontController 来演示前端控制器设计模式。\",\"// FrontControllerPatternDemo.java public class FrontControllerPatternDemo { public static void main(String[] args) { FrontController frontController = new FrontController(); frontController.dispatchRequest(\\\"HOME\\\"); frontController.dispatchRequest(\\\"STUDENT\\\"); } }\",\"步骤 5: 验证输出。\",\"Page requested: HOME User is authenticated successfully. Displaying Home Page Page requested: STUDENT User is authenticated successfully. Displaying Student Page\"]},\"234\":{\"h\":\"拦截过滤器模式（Intercepting Filter Pattern）\",\"t\":[\"用于对应用程序的请求或响应做一些预处理/后处理。定义过滤器，并在把请求传给实际目标应用程序之前应用在请求上。过滤器可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。以下是这种设计模式的实体。\",\"过滤器（Filter） - 过滤器在请求处理程序执行请求之前或之后，执行某些任务。\",\"过滤器链（Filter Chain） - 过滤器链带有多个过滤器，并在 Target 上按照定义的顺序执行这些过滤器。\",\"Target - Target 对象是请求处理程序。\",\"过滤管理器（Filter Manager） - 过滤管理器管理过滤器和过滤器链。\",\"客户端（Client） - Client 是向 Target 对象发送请求的对象。\",\"步骤 1: 创建过滤器接口 Filter。\",\"// Filter.java public interface Filter { public void execute(String request); }\",\"步骤 2: 创建实体过滤器。\",\"// AuthenticationFilter.java public class AuthenticationFilter implements Filter { public void execute(String request){ System.out.println(\\\"Authenticating request: \\\" + request); } } // DebugFilter.java public class DebugFilter implements Filter { public void execute(String request){ System.out.println(\\\"request log: \\\" + request); } }\",\"步骤 3: 创建 Target。\",\"// Target.java public class Target { public void execute(String request){ System.out.println(\\\"Executing request: \\\" + request); } }\",\"步骤 4: 创建过滤器链。\",\"// FilterChain.java import java.util.ArrayList; import java.util.List; public class FilterChain { private List<Filter> filters = new ArrayList<Filter>(); private Target target; public void addFilter(Filter filter){ filters.add(filter); } public void execute(String request){ for (Filter filter : filters) { filter.execute(request); } target.execute(request); } public void setTarget(Target target){ this.target = target; } }\",\"步骤 5: 创建过滤管理器。\",\"// FilterManager.java public class FilterManager { FilterChain filterChain; public FilterManager(Target target){ filterChain = new FilterChain(); filterChain.setTarget(target); } public void setFilter(Filter filter){ filterChain.addFilter(filter); } public void filterRequest(String request){ filterChain.execute(request); } }\",\"步骤 6: 创建客户端 Client。\",\"// Client.java public class Client { FilterManager filterManager; public void setFilterManager(FilterManager filterManager){ this.filterManager = filterManager; } public void sendRequest(String request){ filterManager.filterRequest(request); } }\",\"步骤 7: 使用 Client 来演示拦截过滤器设计模式。\",\"// FrontControllerPatternDemo.java public class InterceptingFilterDemo { public static void main(String[] args) { FilterManager filterManager = new FilterManager(new Target()); filterManager.setFilter(new AuthenticationFilter()); filterManager.setFilter(new DebugFilter()); Client client = new Client(); client.setFilterManager(filterManager); client.sendRequest(\\\"HOME\\\"); } }\",\"步骤 8: 验证输出。\",\"Authenticating request: HOME request log: HOME Executing request: HOME\"]},\"235\":{\"h\":\"服务定位器模式（Service Locator Pattern）\",\"t\":[\"用在我们想使用 JNDI 查询定位各种服务的时候。考虑到为某个服务查找 JNDI 的代价很高，服务定位器模式充分利用了缓存技术。在首次请求某个服务时，服务定位器在 JNDI 中查找服务，并缓存该服务对象。当再次请求相同的服务时，服务定位器会在它的缓存中查找，这样可以在很大程度上提高应用程序的性能。以下是这种设计模式的实体。\",\"服务（Service） - 实际处理请求的服务。对这种服务的引用可以在 JNDI 服务器中查找到。\",\"Context / 初始的 Context - JNDI Context 带有对要查找的服务的引用。\",\"服务定位器（Service Locator） - 服务定位器是通过 JNDI 查找和缓存服务来获取服务的单点接触。\",\"缓存（Cache） - 缓存存储服务的引用，以便复用它们。\",\"客户端（Client） - Client 是通过 ServiceLocator 调用服务的对象。\",\"步骤 1: 创建服务接口 Service。\",\"// Service.java public interface Service { public String getName(); public void execute(); }\",\"步骤 2: 创建实体服务。\",\"// Service1.java public class Service1 implements Service { public void execute(){ System.out.println(\\\"Executing Service1\\\"); } @Override public String getName() { return \\\"Service1\\\"; } } // Service2.java public class Service2 implements Service { public void execute(){ System.out.println(\\\"Executing Service2\\\"); } @Override public String getName() { return \\\"Service2\\\"; } }\",\"步骤 3: 为 JNDI 查询创建 InitialContext。\",\"// InitialContext.java public class InitialContext { public Object lookup(String jndiName){ if(jndiName.equalsIgnoreCase(\\\"SERVICE1\\\")){ System.out.println(\\\"Looking up and creating a new Service1 object\\\"); return new Service1(); }else if (jndiName.equalsIgnoreCase(\\\"SERVICE2\\\")){ System.out.println(\\\"Looking up and creating a new Service2 object\\\"); return new Service2(); } return null; } }\",\"步骤 4: 创建缓存 Cache。\",\"// Cache.java import java.util.ArrayList; import java.util.List; public class Cache { private List<Service> services; public Cache(){ services = new ArrayList<Service>(); } public Service getService(String serviceName){ for (Service service : services) { if(service.getName().equalsIgnoreCase(serviceName)){ System.out.println(\\\"Returning cached \\\"+serviceName+\\\" object\\\"); return service; } } return null; } public void addService(Service newService){ boolean exists = false; for (Service service : services) { if(service.getName().equalsIgnoreCase(newService.getName())){ exists = true; } } if(!exists){ services.add(newService); } } } 步骤 5: 创建服务定位器。 ```java // ServiceLocator.java public class ServiceLocator { private static Cache cache; static { cache = new Cache(); } public static Service getService(String jndiName){ Service service = cache.getService(jndiName); if(service != null){ return service; } InitialContext context = new InitialContext(); Service service1 = (Service)context.lookup(jndiName); cache.addService(service1); return service1; } } 步骤 6: 使用 ServiceLocator 来演示服务定位器设计模式。 ```java // ServiceLocatorPatternDemo.java public class ServiceLocatorPatternDemo { public static void main(String[] args) { Service service = ServiceLocator.getService(\\\"Service1\\\"); service.execute(); service = ServiceLocator.getService(\\\"Service2\\\"); service.execute(); service = ServiceLocator.getService(\\\"Service1\\\"); service.execute(); service = ServiceLocator.getService(\\\"Service2\\\"); service.execute(); } } 步骤 7: 验证输出。 ```txt Looking up and creating a new Service1 object Executing Service1 Looking up and creating a new Service2 object Executing Service2 Returning cached Service1 object Executing Service1 Returning cached Service2 object Executing Service2\"]},\"236\":{\"h\":\"传输对象模式（Transfer Object Pattern）\",\"t\":[\"用于从客户端向服务器一次性传递带有多个属性的数据。传输对象也被称为数值对象。传输对象是一个具有 getter/setter 方法的简单的 POJO 类，它是可序列化的，所以它可以通过网络传输。它没有任何的行为。服务器端的业务类通常从数据库读取数据，然后填充 POJO，并把它发送到客户端或按值传递它。对于客户端，传输对象是只读的。客户端可以创建自己的传输对象，并把它传递给服务器，以便一次性更新数据库中的数值。以下是这种设计模式的实体。\",\"业务对象（Business Object） - 为传输对象填充数据的业务服务。\",\"传输对象（Transfer Object） - 简单的 POJO，只有设置/获取属性的方法。\",\"客户端（Client） - 客户端可以发送请求或者发送传输对象到业务对象。\",\"步骤 1: 创建传输对象。\",\"// StudentVO.java public class StudentVO { private String name; private int rollNo; StudentVO(String name, int rollNo){ this.name = name; this.rollNo = rollNo; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getRollNo() { return rollNo; } public void setRollNo(int rollNo) { this.rollNo = rollNo; } }\",\"步骤 2: 创建业务对象。\",\"// StudentBO.java import java.util.ArrayList; import java.util.List; public class StudentBO { //列表是当作一个数据库 List<StudentVO> students; public StudentBO(){ students = new ArrayList<StudentVO>(); StudentVO student1 = new StudentVO(\\\"Robert\\\",0); StudentVO student2 = new StudentVO(\\\"John\\\",1); students.add(student1); students.add(student2); } public void deleteStudent(StudentVO student) { students.remove(student.getRollNo()); System.out.println(\\\"Student: Roll No \\\" + student.getRollNo() +\\\", deleted from database\\\"); } //从数据库中检索学生名单 public List<StudentVO> getAllStudents() { return students; } public StudentVO getStudent(int rollNo) { return students.get(rollNo); } public void updateStudent(StudentVO student) { students.get(student.getRollNo()).setName(student.getName()); System.out.println(\\\"Student: Roll No \\\" + student.getRollNo() +\\\", updated in the database\\\"); } }\",\"步骤 3: 使用 StudentBO 来演示传输对象设计模式。\",\"// TransferObjectPatternDemo.java public class TransferObjectPatternDemo { public static void main(String[] args) { StudentBO studentBusinessObject = new StudentBO(); //输出所有的学生 for (StudentVO student : studentBusinessObject.getAllStudents()) { System.out.println(\\\"Student: [RollNo : \\\" +student.getRollNo()+\\\", Name : \\\"+student.getName()+\\\" ]\\\"); } //更新学生 StudentVO student =studentBusinessObject.getAllStudents().get(0); student.setName(\\\"Michael\\\"); studentBusinessObject.updateStudent(student); //获取学生 studentBusinessObject.getStudent(0); System.out.println(\\\"Student: [RollNo : \\\" +student.getRollNo()+\\\", Name : \\\"+student.getName()+\\\" ]\\\"); } }\",\"步骤 4: 验证输出。\",\"Student: [RollNo : 0, Name : Robert ] Student: [RollNo : 1, Name : John ] Student: Roll No 0, updated in the database Student: [RollNo : 0, Name : Michael ]\"]},\"237\":{\"h\":\"设计模式相关的网站\",\"t\":[\"Wiki Page for Design Patterns - 以一种非常通用的方式检查设计模式。\",\"Java Programming/Design Patterns - 一篇关于设计模式的好文章。\",\"The JavaTM Tutorials - 该 Java 教程是为那些想用 Java 编程语言创建应用程序的编程人员提供的实用指南。\",\"JavaTM 2 SDK, Standard Edition - JavaTM 2 SDK, Standard Edition 的官网。\",\"Java DesignPatterns - 关于设计模式的短文。\",\"Java 设计模式有用的书籍\",\"Java Design Patterns\",\"Head First Design Patterns\",\"Java Design Pattern Essentials\",\"Design Patterns: Elements of Reusable Object-Oriented Software\",\"Design Patterns in Java(TM)\",\"Design Patterns Java Workbook\"]},\"238\":{\"h\":\"编程原则\"},\"239\":{\"h\":\"一、开闭原则（Open Close Principle）\",\"t\":[\"软件实体应当对扩展开放，对修改关闭\",\"当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。\",\"项目中划分出的模块；\",\"类与接口\",\"方法\",\"\\\"抽象约束、封装变化\\\"：即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。\"]},\"240\":{\"h\":\"二、里氏替换原则（Liskov Substitution Principle）\",\"t\":[\"子类可以扩展父类的功能，但不能改变父类原有的功能\",\"修正方法：程序违背了里氏替换原则，取消原来的继承关系，重新设计它们之间的关系 里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\"]},\"241\":{\"h\":\"三、依赖倒置原则（Dependence Inversion Principle）\",\"t\":[\"这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。 高层模块不应该依赖低层模块，两者都应该依赖其抽象 抽象不应该依赖细节，细节应该依赖抽象 面向接口编程！！\",\"每个类尽量提供接口或抽象类，或者两者都具备。\",\"变量的声明类型尽量是接口或者是抽象类。\",\"任何类都不应该从具体类派生。\",\"使用继承时尽量遵循里氏替换原则。\"]},\"242\":{\"h\":\"四、单一职责原则\",\"t\":[\"一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分\",\"这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\"]},\"243\":{\"h\":\"五、接口隔离原则（Interface Segregation Principle）\",\"t\":[\"尽量将臃肿庞大的接口拆分成更小的和更具体的接口\"]},\"244\":{\"h\":\"六、迪米特法则\",\"t\":[\"只与你的直接朋友交谈，不跟“陌生人”说话\",\"又称最少知道原则（Demeter Principle）\",\"最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\"]},\"245\":{\"h\":\"七、合成复用原则（Composite Reuse Principle）\",\"t\":[\"在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现\"]},\"246\":{\"c\":[\"面向对象\"]},\"247\":{\"h\":\"UML\"},\"248\":{\"h\":\"项目管理\"},\"249\":{\"h\":\"数据流图（DFD）\"},\"250\":{\"h\":\"测试\"},\"251\":{\"h\":\"git\"},\"252\":{\"h\":\"submodule 操作\",\"t\":[\"# 更换submodule, 将之前的remove掉，再重新添加新的 git rm -r --cached aaa git submodule add b.git\"]},\"253\":{\"h\":\"clone tag\",\"t\":[\"git clone -b [branch || tag] [git地址]\"]},\"254\":{\"c\":[\"tools\"]},\"255\":{\"c\":[\"git\"]},\"256\":{\"h\":\"npm\"},\"257\":{\"h\":\"介绍\",\"t\":[\"Node Package Manager 包管理和分发工具\"]},\"258\":{\"h\":\"常用命令\",\"t\":[\"查看包的版本\",\"# 最新版本 npm view [package] version # 所有版本 npm view [package] versions\"]},\"259\":{\"h\":\"pnpm\",\"t\":[\"Performant NPM 高性能npm\",\"安装包时，pnpm将它保存在机器上的一个全局存储中，然后从它创建一个硬链接而不是复制\",\"对于模块的每个版本，磁盘上只保存一个副本\"]},\"260\":{\"h\":\"npx\",\"t\":[\"npx 是一个由 Node.js 官方提供的用于快速执行 npm 包中的可执行文件的工具\"]},\"261\":{\"c\":[\"tools\"]},\"262\":{\"c\":[\"npm\"]},\"263\":{\"h\":\"Baz\",\"t\":[\"Feature details here.\"]},\"264\":{\"h\":\"Bar feature\"},\"265\":{\"h\":\"Introduction\",\"t\":[\"We support bar feature, ...\"]},\"266\":{\"h\":\"Details\",\"t\":[\"baz\",\"...\"]},\"267\":{\"h\":\"Ray\",\"t\":[\"Feature details here.\"]},\"268\":{\"h\":\"Foo feature\"},\"269\":{\"h\":\"Introduction\",\"t\":[\"We support foo feature, ...\"]},\"270\":{\"h\":\"Details\",\"t\":[\"ray\",\"...\"]},\"271\":{\"h\":\"语言扩展\"},\"272\":{\"h\":\"Python\"},\"273\":{\"h\":\"安装\",\"t\":[\"python2\",\"python3\",\"pip\",\"国内镜像\",\"# 阿里云 https://mirrors.aliyun.com/pypi/simple/ # 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ # 豆瓣(douban) https://pypi.douban.com/simple/ # 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/ # 中国科学技术大学 https://pypi.mirrors.ustc.edu.cn/simple/\"]},\"274\":{\"h\":\"虚拟环境\"},\"275\":{\"h\":\"基础语法\"},\"276\":{\"h\":\"界面\"},\"277\":{\"h\":\"学习资料\",\"t\":[\"Qt5中文网\",\"qt5\"]},\"278\":{\"h\":\"Docker\"},\"279\":{\"h\":\"MySQL\"},\"280\":{\"h\":\"nginx\"},\"281\":{\"h\":\"NestJS\",\"t\":[\"中文官网地址\"]},\"282\":{\"h\":\"概况\",\"t\":[\"基于express框架\"]},\"283\":{\"h\":\"核心概念\",\"t\":[\"controller\",\"provider\",\"module\",\"entity\"]},\"284\":{\"h\":\"主要使用步骤\",\"t\":[\"npm全局安装脚手架\",\"npm install @nestjs/cli -g\",\"通过脚手架创建项目\",\"nest new [project-name]\",\"后端业务模块分析与拆分\",\"调整基本配置\",\"错误过滤\",\"创建所需的各个模块\",\"Postman增加对应接口的调试条目\",\"跨域处理\",\"创建数据库和数据库连接\",\"创建各个模块的Entity实体\",\"实体与数据库表进行关联\",\"JWT登录鉴权\",\"接口逻辑具体开发\",\"接口文档的集成\",\"文件及文件流处理\",\"socket长连接\"]},\"285\":{\"h\":\"介绍\"},\"286\":{\"h\":\"nodejs版本切换工具\",\"t\":[\"nvm\",\"下载地址\",\"# 查看node所有版本 nvm version # 查看已安装的版本 nvm list # 安装对应版本的node nvm install/uninstall [version] # 切换版本，切换假如有报错，需要管理员权限，或者删除对应版本后再install一遍 nvm use [version] # 帮助 nvm help\"]},\"287\":{\"h\":\"restful规范\",\"t\":[\"CURD 通过四个method区分：get, post, put, delete\"]},\"288\":{\"h\":\"前端基础\"},\"289\":{\"h\":\"关于编程\",\"t\":[\"用编程的思想看待前端\"]},\"290\":{\"h\":\"HTML\"},\"291\":{\"h\":\"CSS\"},\"292\":{\"h\":\"JavaScript\",\"t\":[\"正视JS这门语言，有让人吐槽（想不通）的地方：如null的类型等，也有精华的地方：如Number类型等\"]},\"293\":{\"h\":\"前端工程化\"},\"294\":{\"h\":\"前端框架\"},\"295\":{\"h\":\"性能优化\"},\"296\":{\"h\":\"TypeScript\",\"t\":[\"可以说是JS的超集，遵循最新ES5/ES6规范，扩展了JS的语法\"]},\"297\":{\"h\":\"安装与编译\",\"t\":[\" npm install typescript -g # 安装 tsc helloworld.ts # 编译\",\" tsc --init # 生成一个tsconfig.json 配置文件 # vscode中 菜单 任务-运行任务 tsc:监视-tsconfig.json 可以自动生成代码 # Hbuilder中 工具中安装typescript插件\"]},\"298\":{\"h\":\"数据类型\",\"t\":[\"let isOver: boolean = false; // 布尔类型 let num: number = 6; // 数字类型 let hexNum: number = 0xf00d; let binNum: number = 0b1010; let name: string = 'Hello World'; // 字符串类型 /* es6中的小撇号（模板字符串）*/ let name: string = `Gene`; let age: number = 37; let sentence: string = `Hello, my name is ${ name }. I'll be ${ age + 1 } years old next month.` /* 数组类型 */ let arr: number[] = [1,2,3]; // 类型元素数组 let arr: Array<number> = [1,2,3]; let arr:any[] = [1,2,3]; // 类型元素数组 /* 元组类型Tuple */ let x: [string,number]; x = ['hello',10]; x = [10.'hello']; // error // 当访问一个越界的元素，会使用联合类型替代： x[3] = 'world'; // OK, 字符串可以赋值给(string | number)类型 console.log(x[5].toString()); // OK, 'string' 和 'number' 都有 toString x[6] = true; // Error, 布尔不是(string | number)类型 /* 枚举类型 enum 程序广泛地用于处理非数值的数据 在其它程序设计语言中，一般用一个数值代表某一状态，这种处理方法不直观，易读性差，能在程序中用自然语言中有相应含义的单词来代表某一状态，考虑到某一变量可能取得值，尽量用自然语言中含义清楚的单次来表示它的每一个值 */ enum Color {Red,Green,Blue} // || enum Color {Red = 1,Green = 9,Blue} let c: Color = Color.Red; // 打印出下标 0 let colorName: string = Color[2]; // 'Green' /* Any 任意类型 * 在对现有代码进行改写的时候，any类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。 * 你可能认为 Object有相似的作用，就像它在其它语言中那样。 但是 Object类型的变量只是允许你给它赋任意值 - * 但是却不能够在它上面调用任意的方法，即便它真的有这些方法 **/ let notSure: any = 5; notSure = false; notSure = 'maybe'; notSure.ifItExists(); // okay, ifItExists might exist at runtime notSure.toFixed(); // okay, toFixed exists (but the compiler doesn't check) let prettySure: Object = 4; prettySure.toFixed(); // Error: Property 'toFixed' doesn't exist on type 'Object'. let list: any[] = [1, true, \\\"free\\\"]; /* void 类型 */ // 表示方法没有返回值 function run():void { console.log('run') } /* Null & Undefined*/ var num:number | undefined; num = 123 console.log(num); /* Never 类型 */ // 从来都不会出现的值 var a:never; a=(()=>{ throw new Error('错误') })() /* Object */ /* 类型断言（类型转换） */\"]},\"299\":{\"h\":\"变量声明\",\"t\":[\"尽可能地使用let来代替var\"]},\"300\":{\"h\":\"接口\",\"t\":[\"起到一种规范和限制的作用： 属性类接口，函数类型接口，可索引接口\"]},\"301\":{\"h\":\"函数\",\"t\":[\" var run = function():number { return 123; } function getInfo(name:string,age:number):string { return name + age; } // 方法的可选参数 // es5中方法的实参和形参可以不一样，但是ts中必须一样，如果不一样就需要配置可选参数 // 可选参数必须配置到参数的最后面！！！ function getInfo(name:string,age?:number):string { if(age) { return name + age; } else { return name; } } alert(getInfo('lipeng')) // 方法的默认参数 // es5中没法设置默认参数，es6和ts中可以设置默认参数 function getInfo(name:string, age:number = 20):string { if(age) { return name + age; } else { return name; } } alert(getInfo('lipeng')) // 方法的剩余参数 (三点运算符) function sum(a:number, b:number, c:number, d:number):number { return a+b+c+d; } function sum1(...result:[]):number { var sum = 0 result.forEach(function(num){ sum += num }) return sum; } sum1(1,2,44,5,7,8); // 方法的重载 // java中方法的重载：指的是两个或者两个以上同名函数，但它们的参数不一样，这时会出现函数重载的情况 // ts中的重载，通过为同一个函数提供多个函数类型定义来试下多种功能的目的 function getInfo(name:string):string; function getInfo(age:number):number; function getInfo(str:any):any { if(typeof str === 'string') { return str } else { return str + 10 } } // 箭头函数 // 箭头函数中的this指向上下文 setTimeout(() => { alert('num') },1000)\",\"使用enum 维护常量\",\" // 使用 const enum 维护常量 const enum TODO_STATUS { TODO = 'TODO', DONE = 'DONE', DOING = 'DOING' } function todos(status:TODO_STATUS):number[] { return [] }; todos(TODO_STATUS.TODO)\",\"使用 VS Code 有时会出现，使用 tsc 编译时产生的问题与 vs code 提示的问题不一致 找到项目右下角的 Typescript 字样，右侧显示它的版本号，可以点击选择 Use Workspace Version，它表示与项目依赖的 typescript 版本一致。 或者编辑 .vs-code/settings.json\",\" { \\\"typescript.tsdk\\\": \\\"node_modules/typescript/lib\\\" }\"]},\"302\":{\"h\":\"代码检查\",\"t\":[\"两个方案：1、TSLint 2、ESLint + typescript-eslint-parser（建议使用TSLint）\",\"TSLint 的优点：\",\"专为 TypeScript 服务，bug 比 ESLint 少\",\"不受限于 ESLint 使用的语法树 ESTree\",\"能直接通过 tsconfig.json 中的配置编译整个项目，使得在一个文件中的类型定义能够联动到其他文件中的代码检查\",\"ESLint 的优点：\",\"基础规则比 TSLint 多很多\",\"社区繁荣，插件众多\"]},\"303\":{\"h\":\"一、使用TSLint\",\"t\":[\" npm install --save-dev tslint // 创建配置文件 tslint.jsonp { \\\"rules\\\": { // 必须使用 === 或 !==，禁止使用 == 或 !=，与 null 比较时除外 \\\"triple-equals\\\": [ true, \\\"allow-null-check\\\" ] }, \\\"linterOptions\\\": { \\\"exclude\\\": [ \\\"**/node_modules/**\\\" ] } } // package.json中添加tslint脚本 { \\\"scripts\\\": { \\\"tslint\\\": \\\"tslint --project . src/**/*.ts src/**/*.tsx\\\", } } // 运行检查 npm run tslint\"]},\"304\":{\"h\":\"二、使用ESLint\"},\"305\":{\"h\":\"事件循环\",\"t\":[\"gggg 111\",\"<div>111</div>\",\"Assets\",\"You can place images besides your markdown files, but you should use relative links (i.e.: starting with ./) for them.\",\"For images in .vuepress/public directory, please use absolute links (i.e.: startingwith /) for them.\"]},\"306\":{\"h\":\"概述\",\"t\":[\"架构\",\"整体流程\",\"渲染相关\",\"JS执行机制\",\"缓存\",\"Devtools\",\"浏览器安全\"]},\"307\":{\"h\":\"fetch\",\"t\":[\"fetch在post form-data类型的数据的时候，header中不需要指定Content-Type\"]},\"308\":{\"h\":\"EventLoop\"},\"309\":{\"h\":\"强缓存与协商缓存的区别\"},\"310\":{\"h\":\"EventSource和长轮询的差别\"},\"311\":{\"h\":\"Websocket 是怎么保持的长连接\"},\"312\":{\"h\":\"transform是否会调用GPU\"},\"313\":{\"h\":\"浏览器渲染原理，重绘和重排 / 回流的区别， GC的两种类型是什么\"},\"314\":{\"h\":\"疑难问题\"},\"315\":{\"h\":\"1. 在div进行css3动画时（translate,scale）容易发生字体变模糊的情况\",\"t\":[\"解答\",\"原因： transform变换会在浏览器上单独创建一个绘画层并重新进行渲染， 由于图层渲染的时候也处理了周围的文字， 如果高度为奇数的文字可能会存在半个像素的计算量， 浏览器对这半个像素会进行优化渲染，所以边缘会出现模糊的情况。 情形： // 奇数像素可能导致浏览器渲染失真 1. 字体size为奇数导致，如font-size: 13px; 处理方案：改为偶数 // transform移动后可能导致浏览器渲染失真 2. transform导致（使用transform的盒子为奇数） 处理方案：在模糊字体一级级往外找，在使用了transform的位置，把使用transform的盒子宽高改为奇数 3. 告诉浏览器如何渲染： // 浏览器强调渲染速度和几何精度的易读性。这会启用字距调整和可选的连字。 text-rendering: optimizeLegibility; \"]},\"316\":{\"h\":\"2.\"},\"317\":{\"h\":\"CSS\"},\"318\":{\"h\":\"核心知识点\",\"t\":[\"盒子模型\",\"选择器\",\"BFC\",\"Flex\",\"grid\",\"其他\"]},\"319\":{\"h\":\"疑难问题\"},\"320\":{\"h\":\"1. 本地开发时，main.js中 @import scss未生效，编译build后生效\"},\"321\":{\"h\":\"2. luckysheet 无法导入图片问题： 未处理oneCellAnchor\"},\"322\":{\"h\":\"3. chrome浏览器中如何防止input[type=password]自动选择存储的账号密码？（230816）\"},\"323\":{\"h\":\"4. Vue中有没有好的方式处理中英文转换后的样式问题(230816)\"},\"324\":{\"h\":\"知识体系\"},\"325\":{\"h\":\"\",\"t\":[\"任何人都可以向TC39委员会提交提案\",\"提案变成正式标准，需要经历5个阶段 \",\"0 Strawman 展示\",\"1 Proposal 征求意见\",\"2 Draft 草案\",\"3 Candidate 候选\",\"4 Finished 定案\",\"每个阶段的变动需要TC39委员会批准\"]},\"326\":{\"h\":\"详细内容\"},\"327\":{\"h\":\"基础\",\"t\":[\"数据类型 \",\"强制类型转换\",\"函数 \",\"call、apply、bind\",\"柯里化\",\"数据结构\",\"词法\",\"语法\"]},\"328\":{\"h\":\"核心\",\"t\":[\"作用域 \",\"变量提升\",\"闭包\",\"this\",\"构造函数 \",\"new\",\"Class\",\"原型 \",\"继承\",\"异步 \",\"Promise\",\"async, await\",\"迭代器与生成器\",\"垃圾回收\"]},\"329\":{\"h\":\"进阶\",\"t\":[\"设计模式\",\"性能优化\",\"宿主 \",\"浏览器 \",\"dom相关操作与事件\",\"节流防抖\",\"ajax\",\"Nodejs\",\"事件循环\",\"模块化\",\"工程化\"]},\"330\":{\"h\":\"推荐书籍\"},\"331\":{\"h\":\"初级\",\"t\":[\"JavaScript 高级程序设计（第 4 版）\",\"[数据结构与算法JavaScript描述]\",\"[JavaScript设计模式与开发实践]\"]},\"332\":{\"h\":\"中级\",\"t\":[\"JavaScript 忍者秘籍（第 2 版）\",\"你不知道的 JS 三卷原著\"]},\"333\":{\"h\":\"高级\",\"t\":[\"JavaScript 悟道\",\"JavaScript 语言精髓与编程实践（第 3 版）\"]},\"334\":{\"h\":\"类型转换\"},\"335\":{\"h\":\"强制类型转换\"},\"336\":{\"c\":[\"Fe Basic\"]},\"337\":{\"c\":[\"js\"]},\"338\":{\"h\":\"基础知识\"},\"339\":{\"h\":\"文档类型声明（doctype）\",\"t\":[\"W：告诉浏览器使用哪种HTML版本来显示网页\",\"H：\",\"<!-- 位于文档中最前面的位置 --> <!doctype html>\"]},\"340\":{\"h\":\"各种标签\",\"t\":[\"HTML\",\"<html lang=\\\"zh\\\"></html>\"]},\"341\":{\"h\":\"DOM操作\"},\"342\":{\"c\":[\"FE Basic\"]},\"343\":{\"c\":[\"html\"]},\"344\":{\"h\":\"最佳实践\"},\"345\":{\"h\":\"\"},\"346\":{\"c\":[\"Fe basic\"]},\"347\":{\"c\":[\"html\"]},\"348\":{\"h\":\"H5新特性\"},\"349\":{\"h\":\"1. 语义化标签\"},\"350\":{\"h\":\"2. video, audio\"},\"351\":{\"h\":\"布局\"},\"352\":{\"h\":\"早期：固定宽度布局\"},\"353\":{\"h\":\"早期：流式布局\",\"t\":[\"百分比等方式 \"]},\"354\":{\"h\":\"弹性布局\"},\"355\":{\"h\":\"响应式布局\",\"t\":[\"流体网格(Fluid Grids)\",\"灵活的图片(Flexible Images)\",\"媒体查询(Media Queries)\",\"下一代响应式Web设计：组件驱动式Web设计\"]},\"356\":{\"c\":[\"FE Basic\"]},\"357\":{\"c\":[\"html\",\"layout\"]},\"358\":{\"h\":\"HTML\"},\"359\":{\"h\":\"Markdown Introduction\",\"t\":[\"If you are a new learner and don’t know how to write Markdown, please read Markdown Intro and Markdown Demo.\"]},\"360\":{\"h\":\"Markdown Config\",\"t\":[\"VuePress introduce configuration for each markdown page using Frontmatter.\",\"相关信息\",\"Frontmatter is a important concept in VuePress. If you don’t know it, you need to read Frontmatter Introduction.\"]},\"361\":{\"h\":\"Markdown Extension\",\"t\":[\"The Markdown content in VuePress will be parsed by markdown-it, which supports syntax extensions via markdown-it plugins.\"]},\"362\":{\"h\":\"VuePress Enhancement\",\"t\":[\"To enrich document writing, VuePress has extended Markdown syntax.\",\"For these extensions, please read Markdown extensions in VuePress.\"]},\"363\":{\"h\":\"Theme Enhancement\",\"t\":[\"By using vuepress-plugin-md-enhance, the theme extends more Markdown syntax and provides richer writing functions.\"]},\"364\":{\"h\":\"Custom Container\",\"t\":[\"Safely use {{ variable }} in Markdown.\",\"Custom Title\",\"A custom information container with code, link.\",\"const a = 1;\",\"Custom Title\",\"A custom tip container\",\"Custom Title\",\"A custom warning container\",\"Custom Title\",\"A custom danger container\",\"Custom Title\",\"A custom details container\",\"Code\",\"::: v-pre Safely use {{ variable }} in Markdown. ::: ::: info Custom Title A custom information container ::: ::: tip Custom Title A custom tip container ::: ::: warning Custom Title A custom warning container ::: ::: danger Custom Title A custom danger container ::: ::: details Custom Title A custom details container :::\",\"View Detail\"]},\"365\":{\"h\":\"Tabs\",\"t\":[\"View Detail\"]},\"366\":{\"h\":\"Code Tabs\",\"t\":[\"View Detail\"]},\"367\":{\"h\":\"Superscript and Subscript\",\"t\":[\"19th H2O\",\"View Detail\"]},\"368\":{\"h\":\"Align\",\"t\":[\"I am center\",\"I am right align\",\"View Detail\"]},\"369\":{\"h\":\"Attrs\",\"t\":[\"A word having id.\",\"View Detail\"]},\"370\":{\"h\":\"Footnote\",\"t\":[\"This text has footnote[1].\",\"View Detail\"]},\"371\":{\"h\":\"Mark\",\"t\":[\"You can mark important words .\",\"View Detail\"]},\"372\":{\"h\":\"Tasklist\",\"t\":[\" Plan A\",\" Plan B\",\"View Detail\"]},\"373\":{\"h\":\"Image Enhancement\",\"t\":[\"Support setting color scheme and size\",\"View Detail\"]},\"374\":{\"h\":\"Chart\",\"t\":[\"::: chart A Scatter Chart\",\"{ \\\"type\\\": \\\"scatter\\\", \\\"data\\\": { \\\"datasets\\\": [ { \\\"label\\\": \\\"Scatter Dataset\\\", \\\"data\\\": [ { \\\"x\\\": -10, \\\"y\\\": 0 }, { \\\"x\\\": 0, \\\"y\\\": 10 }, { \\\"x\\\": 10, \\\"y\\\": 5 }, { \\\"x\\\": 0.5, \\\"y\\\": 5.5 } ], \\\"backgroundColor\\\": \\\"rgb(255, 99, 132)\\\" } ] }, \\\"options\\\": { \\\"scales\\\": { \\\"x\\\": { \\\"type\\\": \\\"linear\\\", \\\"position\\\": \\\"bottom\\\" } } } }\",\":::\",\"View Detail\"]},\"375\":{\"h\":\"Echarts\",\"t\":[\"::: echarts A line chart\",\"{ \\\"xAxis\\\": { \\\"type\\\": \\\"category\\\", \\\"data\\\": [\\\"Mon\\\", \\\"Tue\\\", \\\"Wed\\\", \\\"Thu\\\", \\\"Fri\\\", \\\"Sat\\\", \\\"Sun\\\"] }, \\\"yAxis\\\": { \\\"type\\\": \\\"value\\\" }, \\\"series\\\": [ { \\\"data\\\": [150, 230, 224, 218, 135, 147, 260], \\\"type\\\": \\\"line\\\" } ] }\",\":::\",\"View Detail\"]},\"376\":{\"h\":\"Flowchart\",\"t\":[\"cond=>condition: Process? process=>operation: Process e=>end: End cond(yes)->process->e cond(no)->e\",\"View Detail\"]},\"377\":{\"h\":\"Mermaid\",\"t\":[\"flowchart TB c1-->a2 subgraph one a1-->a2 end subgraph two b1-->b2 end subgraph three c1-->c2 end one --> two three --> two two --> c2\",\"View Detail\"]},\"378\":{\"h\":\"Tex\",\"t\":[\"$$ \\\\frac {\\\\partial^r} {\\\\partial \\\\omega^r} \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) = \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) \\\\left{(\\\\log y)^r + \\\\sum_{i=1}^r \\\\frac {(-1)^i r \\\\cdots (r-i+1) (\\\\log y)^{r-i}} {\\\\omega^i} \\\\right} $$\",\"View Detail\"]},\"379\":{\"h\":\"Include files\",\"t\":[\"@include-push(D:/se-docs/src/soft-engineering/fe/fe-basic/html) If you are a new learner and don’t know how to write Markdown, please read Markdown Intro and Markdown Demo.\"]},\"380\":{\"h\":\"Markdown Config\",\"t\":[\"VuePress introduce configuration for each markdown page using Frontmatter.\",\"相关信息\",\"@include-pop()\",\"View Detail\"]},\"381\":{\"h\":\"Code Demo\",\"t\":[\"View Detail\"]},\"382\":{\"h\":\"Stylize\",\"t\":[\"Donate Mr.Hope a cup of coffee. Recommanded\",\"View Detail\"]},\"383\":{\"h\":\"Playground\",\"t\":[\"View Detail\"]},\"384\":{\"h\":\"Vue Playground\",\"t\":[\"::: vue-playground Vue Playground\",\"This is footnote content ↩︎\"]},\"385\":{\"c\":[\"Fe Basic\"]},\"386\":{\"c\":[\"html\"]},\"387\":{\"h\":\"React\"},\"388\":{\"h\":\"Vue\"},\"389\":{\"h\":\"Virtual Dom\"},\"390\":{\"h\":\"SSR\"},\"391\":{\"h\":\"display\",\"t\":[\"设置元素的内外部显示类型\"]},\"392\":{\"h\":\"inline\",\"t\":[\"行内元素\",\"不会换行，与其它行内元素位于同一行，设置宽高不起作用，\",\"可设置左右margin，padding, 上下padding不会影响其它元素\",\"只能嵌套内联元素，不能嵌套块级元素\",\"多个空格会被合成一个空格\"]},\"393\":{\"h\":\"inline-block\",\"t\":[\"行内块元素\",\"具有block宽度高度特性，具有inline的同行特性\",\"【注意】strut\"]},\"394\":{\"h\":\"block\",\"t\":[\"块级元素\",\"独占一行\"]},\"395\":{\"h\":\"\",\"t\":[\"弹性伸缩盒\",\"flex布局中子元素的float、clear和vertical-align属性失效\",\"容器的属性： flex-flow --- flex-direction, flex-wrap, align-items, justify-content, align-content(用在多根轴线的情况下)\",\"子元素项目属性： order, align-self, flex --- flex-grow, flex-shrink, flex-basis\"]},\"396\":{\"h\":\"inline-flex\",\"t\":[\"内联块级弹性伸缩盒\"]},\"397\":{\"h\":\"grid\"},\"398\":{\"h\":\"inline-grid\"},\"399\":{\"h\":\"table\"},\"400\":{\"h\":\"none\",\"t\":[\"隐藏元素\",\"元素不会被显示，也不会占据文档空间\",\"【注意】当嵌套iframe时的\",\"MDN Docs\"]},\"401\":{\"h\":\"异步\"},\"402\":{\"h\":\"setTimeout + callback\"},\"403\":{\"h\":\"Generator\"},\"404\":{\"h\":\"Promise\"},\"405\":{\"h\":\"async await\"},\"406\":{\"h\":\"ES6\"},\"407\":{\"h\":\"什么是ECMAScript（这里后续都用ES代替）\",\"t\":[\"1991年 世界上第一个网页诞生（蒂姆·伯纳斯·李）\",\"1995年 Netscape 的 Brandan Eich 创造了JavaScript\",\"1996年 将该语言提交给了ECMA(国际标准化组织)想将其标准化\",\"ECMA发布了ECMA-262标准文件，将该语言称为ECMAScript(原因是JavaScript是被网景公司注册了的)\",\"所以ECMAScript是JavaScript的规格，而JavaScript算是ECMAScript的一种实现(还有JScript,ActionScript)；平时两词可互换\"]},\"408\":{\"h\":\"如何演变到现在的ES 6 版本\",\"t\":[\"1997年: ES 1.0\",\"1998年: ES 2.0\",\"1999年: ES 3.0 (成功的通行版本，其后的版本完全继承)\",\"2000年: ES 4.0 (未通过，太过激进，大部分内容放到了ES6)\",\"2007年: 预备发布4.0，依旧分歧太大\",\"2008年: 将部分功能改善的一小部分发布为ES 3.1, 会后不久改为ES 5; 激进的部分改为ESHarmony\",\"2009年12月: ES5正式发布\",\"2011年6月：ES5.1发布，成为国际标准\",\"2013年3月：ESHarmony分出来的可行的构想ES6草案冻结\",\"2013年12月: ES6发布\",\"2015年6月：ES6正式成为国际标准, ES2015\"]},\"409\":{\"h\":\"如何查看各浏览器/nodejs对ES6的支持度\",\"t\":[\"浏览器\",\"# 阮一峰写的一个工具 npm install -g es-checker es-checker\",\"nodejs\",\"# linux node --v8-options | grep harmony # windows node --v8-options | findstr harmony\",\"到目前（2024年）为止，ES6支持度应该还是蛮好的\"]},\"410\":{\"h\":\"如何处理ES6的兼容问题(即如何使用Babel转码器)\",\"t\":[\".babelrc\",\"从Babel 6.0开始不再提供浏览器版本，所以需要构建\",\"此外还可利用：在线转换、Traceur转码器\"]},\"411\":{\"h\":\"新版本ES7(请 )\"},\"412\":{\"h\":\"ES6新特性有哪些\"},\"413\":{\"h\":\"1. let 和 const\",\"t\":[\"{ let a = 1 var b = 2 } console.log(a) // ReferenceError console.log(b) // 2\",\"for (let i = 0; i < arr.length; i++) {} console.log(i) // ReferenceError\",\"/** * var 声明的变量 全局范围内有效 */ var a = [] for (var i = 0; i < 10; i++) { a[i] = function() { console.log(i) } } a[6]() // 10 /** * let 声明的变量 块级作用域内有效 */ var a = [] for (let i = 0; i < 10; i++) { a[i] = function() { console.log(i) } } a[6]() // 6\",\"/** * 不存在变量提升, typeof也不再是一个百分百安全的操作 */ console.log(foo) let foo = 2 typeof bar // ReferenceError let bar = 1\",\"/** * 暂时性死区 */\"]},\"414\":{\"h\":\"2. 变量的解构赋值\"},\"415\":{\"h\":\"3. 字符串扩展\"},\"416\":{\"h\":\"4. 正则的扩展\"},\"417\":{\"h\":\"5. 数值的扩展\"},\"418\":{\"h\":\"6. 数组的扩展\"},\"419\":{\"h\":\"7. 函数的扩展\"},\"420\":{\"h\":\"8. 对象的扩展\"},\"421\":{\"h\":\"9. Symbol\"},\"422\":{\"h\":\"10. Proxy和Reflect\"},\"423\":{\"h\":\"11. 二进制数组\"},\"424\":{\"h\":\"12. Set和Map数据结构\"},\"425\":{\"h\":\"13. Iterator和for of循环\"},\"426\":{\"h\":\"14. Generator函数\"},\"427\":{\"h\":\"15. Promise对象\"},\"428\":{\"h\":\"16. 异步操作和async函数\"},\"429\":{\"h\":\"17. Class\"},\"430\":{\"h\":\"18. 修饰器\"},\"431\":{\"h\":\"19. Module\"},\"432\":{\"h\":\"ES7\"},\"433\":{\"h\":\"ES8\"},\"434\":{\"h\":\"函数\"},\"435\":{\"h\":\"箭头函数\"},\"436\":{\"h\":\"IIFE\"},\"437\":{\"h\":\"原型\"},\"438\":{\"h\":\"原型链\"},\"439\":{\"h\":\"作用域\",\"t\":[\"一套存储变量用的设计良好规则，方便找到这些变量\"]},\"440\":{\"h\":\"this\"},\"441\":{\"h\":\"call\"},\"442\":{\"h\":\"apply\"},\"443\":{\"h\":\"闭包\"},\"444\":{\"h\":\"基础概念\"},\"445\":{\"h\":\"变量\"},\"446\":{\"h\":\"关键字与保留字\"},\"447\":{\"h\":\"严格模式\"},\"448\":{\"h\":\"数据类型\"},\"449\":{\"h\":\"操作符\"},\"450\":{\"h\":\"语句\"},\"451\":{\"h\":\"数据结构\"},\"452\":{\"h\":\"数据类型\",\"t\":[\"相关定义\",\"动态：JavaScript 中的变量与任何特定值类型没有任何关联，并且任何变量都可以分配（重新分配）所有类型的值\",\"解释型：\",\"弱类型：当操作涉及不匹配的类型是否，它将允许隐式类型转换，而不是抛出一个错误，对于 Symbol 和 BigInt，JavaScript 总是不允许某些隐式类型转换\",\"一个有趣的事实：任何JS代码片段在执行前都要进行编译（所以实际上也是一门 编译语言 ）；当你了解熟悉了 JS引擎、编译器、作用域 之间的关系配合之后，便对这么语言会有新的认识\"]},\"453\":{\"h\":\"内置类型（七种）\"},\"454\":{\"h\":\"基本数据类型\",\"t\":[\"Null\",\"Undefined\",\"Boolean\",\"Number\",\"String\",\"BigInt\",\"Symbol\"]},\"455\":{\"h\":\"引用数据类型\",\"t\":[\"Object\",\"Function\",\"Array\",\"Date\"]},\"456\":{\"h\":\"Null\",\"t\":[\"typeof null === 'object' // true\"]},\"457\":{\"h\":\"Undefined\"},\"458\":{\"h\":\"Boolean\"},\"459\":{\"h\":\"Number\"},\"460\":{\"h\":\"BigInt（）\"},\"461\":{\"h\":\"String\"},\"462\":{\"h\":\"Symbol\",\"t\":[\"ES6 引入的 Symbol 是为了解决什么样的问题或者说是能解决什么样的问题？\",\"使得对象的属性具有唯一标识\"]},\"463\":{\"h\":\"Object\",\"t\":[\"注意\",\"注意区别JS的宿主浏览器中的对象（如BOM，DOM）与Object的区别，\",\"它们的行为可能跟Object的行为不一致，是不受ECMA的约束的\"]},\"464\":{\"h\":\"Date\"},\"465\":{\"h\":\"JSON\"},\"466\":{\"c\":[\"Fe Basic\"]},\"467\":{\"c\":[\"js\"]},\"468\":{\"h\":\"语法\"},\"469\":{\"h\":\"词法\"},\"470\":{\"h\":\"构建工具\"},\"471\":{\"h\":\"Webpack\"},\"472\":{\"h\":\"Vite\"},\"473\":{\"h\":\"两者的区别\"},\"474\":{\"h\":\"设计模式\",\"t\":[\"tips\",\"学习JS中的设计模式，需要基础核心知识扎实，才能理解并熟练使用\",\"作用域\",\"this\",\"call, apply\",\"闭包\",\"原型\",\"高阶函数\"]},\"475\":{\"h\":\"单例模式\"},\"476\":{\"h\":\"策略模式\"},\"477\":{\"h\":\"代理模式\"},\"478\":{\"h\":\"迭代器模式\"},\"479\":{\"h\":\"发布-订阅者模式/\"},\"480\":{\"h\":\"命令模式\"},\"481\":{\"h\":\"组合模式\"},\"482\":{\"h\":\"模板方法模式\"},\"483\":{\"h\":\"享元模式\"},\"484\":{\"h\":\"职责链模式\"},\"485\":{\"h\":\"中介者模式\"},\"486\":{\"h\":\"装饰者模式\"},\"487\":{\"h\":\"状态模式\"},\"488\":{\"h\":\"适配器模式\"},\"489\":{\"h\":\"设计原则\"},\"490\":{\"h\":\"单一职责\"},\"491\":{\"h\":\"最少知识\"},\"492\":{\"h\":\"开闭\"},\"493\":{\"h\":\"模块化\"},\"494\":{\"h\":\"CommonJS\"},\"495\":{\"h\":\"AMD\"},\"496\":{\"h\":\"CMD\"},\"497\":{\"h\":\"编程技巧\"},\"498\":{\"h\":\"接口与面向接口编程\"},\"499\":{\"h\":\"合理使用三元运算符\",\"t\":[\"简单条件下可以用\",\"复杂情况下不要用\",\"性能和代码量不是理由\"]},\"500\":{\"h\":\"合理使用链式调用\",\"t\":[\"链条稳定的简单的可以用\",\"假如链条容易发生变化还是使用普通调用\",\"变化的链条不方便调试\"]},\"501\":{\"h\":\"\",\"t\":[\"各种不同的style\",\"<style>\",\"<style scoped>\",\"<style module>\",\"<style>插入<head>的顺序\",\"对单个组件，按照<style>出现的顺序插入<head> 遍历组件的子组件，依次对子组件执行步骤1，在开发时执行的顺序按照子组件在template中出现的顺序，生产构建时执行的顺序按照引入子组件的顺序\"]},\"502\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"503\":{\"h\":\"Database\"},\"504\":{\"h\":\"Basic\"},\"505\":{\"h\":\"Structuredev\"},\"506\":{\"h\":\"Tools\"},\"507\":{\"h\":\"Python\"},\"508\":{\"h\":\"Properties\"},\"509\":{\"h\":\"Core\"},\"510\":{\"h\":\"Basic\"},\"511\":{\"h\":\"Frames\"},\"512\":{\"h\":\"Senior\"},\"513\":{\"h\":\"V2x\"}},\"dirtCount\":0,\"index\":[[\"遍历组件的子组件\",{\"1\":{\"501\":1}}],[\"遍历一个聚合对象\",{\"1\":{\"220\":1}}],[\"链条稳定的简单的可以用\",{\"1\":{\"500\":1}}],[\"链式存储结构\",{\"1\":{\"162\":1}}],[\"合理使用链式调用\",{\"0\":{\"500\":1}}],[\"合理使用三元运算符\",{\"0\":{\"499\":1}}],[\"合成复用原则\",{\"0\":{\"245\":1}}],[\"订阅者模式\",{\"0\":{\"479\":1}}],[\"发布\",{\"0\":{\"479\":1}}],[\"发行版\",{\"0\":{\"79\":1}}],[\"学习js中的设计模式\",{\"1\":{\"474\":1}}],[\"学习资料\",{\"0\":{\"277\":1}}],[\"便对这么语言会有新的认识\",{\"1\":{\"452\":1}}],[\"便于升级和维护的软件设计思想\",{\"1\":{\"242\":1}}],[\"便于维护\",{\"1\":{\"227\":1}}],[\"便于控制细节风险\",{\"1\":{\"188\":1}}],[\"弱类型\",{\"1\":{\"452\":1}}],[\"严格模式\",{\"0\":{\"447\":1}}],[\"暂时性死区\",{\"1\":{\"413\":1}}],[\"块级作用域内有效\",{\"1\":{\"413\":1}}],[\"块级元素\",{\"1\":{\"394\":1}}],[\"声明的变量\",{\"1\":{\"413\":2}}],[\"请\",{\"0\":{\"411\":1}}],[\"请求以命令的形式包裹在对象中\",{\"1\":{\"218\":1}}],[\"此外还可利用\",{\"1\":{\"410\":1}}],[\"阮一峰写的一个工具\",{\"1\":{\"409\":1}}],[\"激进的部分改为esharmony\",{\"1\":{\"408\":1}}],[\"预备发布4\",{\"1\":{\"408\":1}}],[\"预防低水平人员带来的风险\",{\"1\":{\"214\":1}}],[\"太过激进\",{\"1\":{\"408\":1}}],[\"未通过\",{\"1\":{\"408\":1}}],[\"未处理onecellanchor\",{\"0\":{\"321\":1}}],[\"平时两词可互换\",{\"1\":{\"407\":1}}],[\"平均复杂度tavg\",{\"1\":{\"143\":1}}],[\"国际标准化组织\",{\"1\":{\"407\":1}}],[\"国内镜像\",{\"1\":{\"273\":1}}],[\"李\",{\"1\":{\"407\":1}}],[\"伯纳斯\",{\"1\":{\"407\":1}}],[\"蒂姆\",{\"1\":{\"407\":1}}],[\"世界上第一个网页诞生\",{\"1\":{\"407\":1}}],[\"世界上有太多令人震撼的事情了\",{\"1\":{\"23\":1}}],[\"什么是ecmascript\",{\"0\":{\"407\":1}}],[\"隐藏元素\",{\"1\":{\"400\":1}}],[\"隐藏系统的复杂性\",{\"1\":{\"214\":1}}],[\"容器的属性\",{\"1\":{\"395\":1}}],[\"容易发生字体变模糊的情况\",{\"0\":{\"315\":1}}],[\"弹性伸缩盒\",{\"1\":{\"395\":1}}],[\"弹性布局\",{\"0\":{\"354\":1}}],[\"独占一行\",{\"1\":{\"394\":1}}],[\"独立对象之间相互沟通\",{\"1\":{\"184\":1}}],[\"行内块元素\",{\"1\":{\"393\":1}}],[\"行内元素\",{\"1\":{\"392\":1}}],[\"行为由父类控制\",{\"1\":{\"227\":1}}],[\"行为随状态改变而改变的场景\",{\"1\":{\"224\":1}}],[\"行为实现者\",{\"1\":{\"218\":1}}],[\"行为请求者\",{\"1\":{\"218\":1}}],[\"行为请求者与行为实现者通常是一种紧耦合的关系\",{\"1\":{\"218\":1}}],[\"行为型模式behavioral\",{\"0\":{\"184\":1}}],[\"行为设计模式\",{\"0\":{\"184\":1}}],[\"↩︎\",{\"1\":{\"384\":1}}],[\"组件驱动式web设计\",{\"1\":{\"355\":1}}],[\"组合实体\",{\"1\":{\"231\":1}}],[\"组合实体模式\",{\"0\":{\"231\":1},\"1\":{\"185\":1}}],[\"组合模式使得用户对单个对象和组合对象的使用具有一致性\",{\"1\":{\"212\":1}}],[\"组合模式依据树形结构来组合对象\",{\"1\":{\"212\":1}}],[\"组合模式\",{\"0\":{\"201\":1,\"212\":1,\"481\":1},\"1\":{\"183\":1}}],[\"媒体查询\",{\"1\":{\"355\":1}}],[\"响应式布局\",{\"0\":{\"355\":1}}],[\"百分比等方式\",{\"1\":{\"353\":1}}],[\"流体网格\",{\"1\":{\"355\":1}}],[\"流式布局\",{\"0\":{\"353\":1}}],[\"流程图\",{\"1\":{\"152\":1}}],[\"固定宽度布局\",{\"0\":{\"352\":1}}],[\"早期\",{\"0\":{\"352\":1,\"353\":1}}],[\"布局\",{\"0\":{\"351\":1}}],[\"布尔不是\",{\"1\":{\"298\":1}}],[\"布尔类型\",{\"1\":{\"298\":1}}],[\"告诉浏览器使用哪种html版本来显示网页\",{\"1\":{\"339\":1}}],[\"告诉浏览器如何渲染\",{\"1\":{\"315\":1}}],[\"文档类型声明\",{\"0\":{\"339\":1}}],[\"文件及文件流处理\",{\"1\":{\"284\":1}}],[\"文件夹的管理\",{\"1\":{\"212\":1}}],[\"文件名\",{\"1\":{\"85\":3}}],[\"文件\",{\"1\":{\"82\":1,\"161\":1,\"212\":1}}],[\"悟道\",{\"1\":{\"333\":1}}],[\"你不知道的\",{\"1\":{\"332\":1}}],[\"你可能认为\",{\"1\":{\"298\":1}}],[\"忍者秘籍\",{\"1\":{\"332\":1}}],[\"版\",{\"1\":{\"331\":1,\"332\":1,\"333\":1}}],[\"版本一致\",{\"1\":{\"301\":1}}],[\"版本\",{\"0\":{\"408\":1},\"1\":{\"208\":2}}],[\"初级\",{\"0\":{\"331\":1}}],[\"初始的\",{\"1\":{\"235\":1}}],[\"初始化游戏\",{\"1\":{\"227\":1}}],[\"初始化\",{\"1\":{\"208\":6}}],[\"宿主\",{\"1\":{\"329\":1}}],[\"垃圾回收\",{\"1\":{\"328\":1}}],[\"异步操作和async函数\",{\"0\":{\"428\":1}}],[\"异步\",{\"0\":{\"401\":1},\"1\":{\"328\":1}}],[\"闭包\",{\"0\":{\"443\":1},\"1\":{\"328\":1,\"474\":1}}],[\"词法\",{\"0\":{\"469\":1},\"1\":{\"327\":1}}],[\"词法分析\",{\"1\":{\"155\":1}}],[\"柯里化\",{\"1\":{\"327\":1}}],[\"详细内容\",{\"0\":{\"326\":1}}],[\"详述\",{\"0\":{\"186\":1}}],[\"候选\",{\"1\":{\"325\":1}}],[\"草案\",{\"1\":{\"325\":1}}],[\"征求意见\",{\"1\":{\"325\":1}}],[\"展示\",{\"1\":{\"325\":1}}],[\"知识体系\",{\"0\":{\"324\":1}}],[\"知道使用它的目的\",{\"1\":{\"179\":1}}],[\"知道基本怎么用就ok\",{\"1\":{\"80\":1}}],[\"自动选择存储的账号密码\",{\"0\":{\"322\":1}}],[\"自动支持序列化机制\",{\"1\":{\"208\":1}}],[\"本地开发时\",{\"0\":{\"320\":1}}],[\"盒子模型\",{\"1\":{\"318\":1}}],[\"改为偶数\",{\"1\":{\"315\":1}}],[\"改变时的行为变化\",{\"1\":{\"224\":1}}],[\"奇数像素可能导致浏览器渲染失真\",{\"1\":{\"315\":1}}],[\"情形\",{\"1\":{\"315\":1}}],[\"情况下不需要同步\",{\"1\":{\"208\":1}}],[\"疑难问题\",{\"0\":{\"314\":1,\"319\":1}}],[\"回流的区别\",{\"0\":{\"313\":1}}],[\"回到页头\",{\"1\":{\"99\":1}}],[\"回到上一层目录\",{\"1\":{\"85\":1}}],[\"浏览器\",{\"1\":{\"329\":1,\"409\":1}}],[\"浏览器强调渲染速度和几何精度的易读性\",{\"1\":{\"315\":1}}],[\"浏览器对这半个像素会进行优化渲染\",{\"1\":{\"315\":1}}],[\"浏览器渲染原理\",{\"0\":{\"313\":1}}],[\"浏览器安全\",{\"1\":{\"306\":1}}],[\"强制类型转换\",{\"0\":{\"335\":1},\"1\":{\"327\":1}}],[\"强制退出\",{\"1\":{\"99\":1}}],[\"强缓存与协商缓存的区别\",{\"0\":{\"309\":1}}],[\"渲染相关\",{\"1\":{\"306\":1}}],[\"架构\",{\"1\":{\"306\":1}}],[\"概述\",{\"0\":{\"306\":1}}],[\"概况\",{\"0\":{\"282\":1}}],[\"禁止使用\",{\"1\":{\"303\":1}}],[\"社区繁荣\",{\"1\":{\"302\":1}}],[\"少\",{\"1\":{\"302\":1}}],[\"专为\",{\"1\":{\"302\":1}}],[\"两者的区别\",{\"0\":{\"473\":1}}],[\"两者都应该依赖其抽象\",{\"1\":{\"241\":1}}],[\"两个方案\",{\"1\":{\"302\":1}}],[\"右侧显示它的版本号\",{\"1\":{\"301\":1}}],[\"右移\",{\"1\":{\"99\":1}}],[\"找到项目右下角的\",{\"1\":{\"301\":1}}],[\"维护常量\",{\"1\":{\"301\":2}}],[\"箭头函数中的this指向上下文\",{\"1\":{\"301\":1}}],[\"箭头函数\",{\"0\":{\"435\":1},\"1\":{\"301\":1}}],[\"函数的扩展\",{\"0\":{\"419\":1}}],[\"函数\",{\"0\":{\"301\":1,\"434\":1},\"1\":{\"327\":1}}],[\"函数类型接口\",{\"1\":{\"300\":1}}],[\"尽可能地使用let来代替var\",{\"1\":{\"299\":1}}],[\"尽量用自然语言中含义清楚的单次来表示它的每一个值\",{\"1\":{\"298\":1}}],[\"尽量将臃肿庞大的接口拆分成更小的和更具体的接口\",{\"1\":{\"243\":1}}],[\"错误\",{\"1\":{\"298\":1}}],[\"错误过滤\",{\"1\":{\"284\":1}}],[\"考虑到某一变量可能取得值\",{\"1\":{\"298\":1}}],[\"考虑到为某个服务查找\",{\"1\":{\"235\":1}}],[\"能直接通过\",{\"1\":{\"302\":1}}],[\"能在程序中用自然语言中有相应含义的单词来代表某一状态\",{\"1\":{\"298\":1}}],[\"能够恢复到他原先的状态\",{\"1\":{\"222\":1}}],[\"能够在多线程中很好的工作\",{\"1\":{\"208\":1}}],[\"|\",{\"1\":{\"298\":3,\"409\":2}}],[\"||\",{\"1\":{\"219\":1,\"253\":1,\"298\":1}}],[\"元组类型tuple\",{\"1\":{\"298\":1}}],[\"元素不会被显示\",{\"1\":{\"400\":1}}],[\"元素对象已接受访问者对象\",{\"1\":{\"228\":1}}],[\"元素的执行算法可以随着访问者改变而改变\",{\"1\":{\"228\":1}}],[\"监视\",{\"1\":{\"297\":1}}],[\"菜单\",{\"1\":{\"297\":1}}],[\"配置文件\",{\"1\":{\"297\":1}}],[\"配备克隆方法需要对类的功能进行通盘考虑\",{\"1\":{\"209\":1}}],[\"遵循最新es5\",{\"1\":{\"296\":1}}],[\"帮助\",{\"1\":{\"286\":1}}],[\"切换假如有报错\",{\"1\":{\"286\":1}}],[\"切换版本\",{\"1\":{\"286\":1}}],[\"跨域处理\",{\"1\":{\"284\":1}}],[\"核心\",{\"0\":{\"328\":1}}],[\"核心知识点\",{\"0\":{\"318\":1}}],[\"核心概念\",{\"0\":{\"283\":1}}],[\"核心控制器\",{\"1\":{\"218\":1}}],[\"界面\",{\"0\":{\"276\":1}}],[\"清华大学\",{\"1\":{\"273\":1}}],[\"豆瓣\",{\"1\":{\"273\":1}}],[\"阿里云\",{\"1\":{\"273\":1}}],[\"官方提供的用于快速执行\",{\"1\":{\"260\":1}}],[\"常用命令\",{\"0\":{\"258\":1}}],[\"常常要将一些\",{\"1\":{\"187\":1}}],[\"测试\",{\"0\":{\"250\":1}}],[\"项目管理\",{\"0\":{\"248\":1}}],[\"项目中划分出的模块\",{\"1\":{\"239\":1}}],[\"说话\",{\"1\":{\"244\":1}}],[\"陌生人\",{\"1\":{\"244\":1}}],[\"迪米特法则\",{\"0\":{\"244\":1}}],[\"由此可见\",{\"1\":{\"242\":1}}],[\"由于图层渲染的时候也处理了周围的文字\",{\"1\":{\"315\":1}}],[\"由于迭代器模式将存储数据和遍历数据的职责分离\",{\"1\":{\"220\":1}}],[\"由于在客户端和真实主题之间增加了代理对象\",{\"1\":{\"216\":1}}],[\"由于只有\",{\"1\":{\"215\":1}}],[\"由于继承为类引入静态特征\",{\"1\":{\"213\":1}}],[\"由于聚合关联关系建立在抽象层\",{\"1\":{\"210\":1}}],[\"由于需求的变化\",{\"1\":{\"188\":1}}],[\"由于\",{\"1\":{\"187\":1,\"208\":1}}],[\"比较时除外\",{\"1\":{\"303\":1}}],[\"比\",{\"1\":{\"302\":1}}],[\"比使用单个接口要好\",{\"1\":{\"242\":1}}],[\"比如开启事务\",{\"1\":{\"227\":1}}],[\"比如要对行为进行\",{\"1\":{\"218\":1}}],[\"比如需要对行为进行记录\",{\"1\":{\"218\":1}}],[\"比如对象创建开销很大\",{\"1\":{\"216\":1}}],[\"比如说\",{\"1\":{\"216\":1}}],[\"比如说有商务装\",{\"1\":{\"207\":1}}],[\"比如写文件操作\",{\"1\":{\"208\":1}}],[\"比如管理学院首页页面缓存\",{\"1\":{\"208\":1}}],[\"比如一个电脑有两台打印机\",{\"1\":{\"208\":1}}],[\"比如\",{\"1\":{\"187\":1,\"208\":1,\"218\":1,\"223\":1}}],[\"比如老虎和飞禽\",{\"1\":{\"187\":1}}],[\"面向接口编程\",{\"1\":{\"241\":1}}],[\"面向对象\",{\"2\":{\"246\":1}}],[\"面向对象的分析与设计\",{\"1\":{\"205\":1}}],[\"面向对象时\",{\"1\":{\"163\":1}}],[\"细节应该依赖抽象\",{\"1\":{\"241\":1}}],[\"细胞分裂\",{\"1\":{\"209\":1}}],[\"针对接口编程\",{\"1\":{\"241\":1}}],[\"针对class\",{\"1\":{\"182\":1,\"183\":1,\"184\":2}}],[\"任意类型\",{\"1\":{\"298\":1}}],[\"任意地替换\",{\"1\":{\"226\":1}}],[\"任务\",{\"1\":{\"297\":1}}],[\"任何js代码片段在执行前都要进行编译\",{\"1\":{\"452\":1}}],[\"任何人都可以向tc39委员会提交提案\",{\"1\":{\"325\":1}}],[\"任何类都不应该从具体类派生\",{\"1\":{\"241\":1}}],[\"任何基类可以出现的地方\",{\"1\":{\"240\":1}}],[\"教程是为那些想用\",{\"1\":{\"237\":1}}],[\"缓存存储服务的引用\",{\"1\":{\"235\":1}}],[\"缓存\",{\"1\":{\"235\":1,\"306\":1}}],[\"带有对要查找的服务的引用\",{\"1\":{\"235\":1}}],[\"调整基本配置\",{\"1\":{\"284\":1}}],[\"调度器\",{\"1\":{\"233\":1}}],[\"调用服务的对象\",{\"1\":{\"235\":1}}],[\"调用者→接受者→命令\",{\"1\":{\"218\":1}}],[\"调用者只关心产品的接口\",{\"1\":{\"189\":1,\"206\":1}}],[\"调用对象寻找可以处理该命令的合适的对象\",{\"1\":{\"218\":1}}],[\"调用肉体对象的功能\",{\"1\":{\"210\":1}}],[\"调用\",{\"1\":{\"206\":3,\"207\":6}}],[\"处理方案\",{\"1\":{\"315\":2}}],[\"处理应用程序所有类型请求的单个处理程序\",{\"1\":{\"233\":1}}],[\"处于不可输入的状态\",{\"1\":{\"99\":1}}],[\"授权\",{\"1\":{\"233\":1,\"234\":1}}],[\"列表是当作一个数据库\",{\"1\":{\"232\":1,\"236\":1}}],[\"粗粒度对象\",{\"1\":{\"231\":1}}],[\"持久化机制中\",{\"1\":{\"231\":1}}],[\"业务对象\",{\"1\":{\"236\":1}}],[\"业务服务接口\",{\"1\":{\"230\":1}}],[\"业务服务\",{\"1\":{\"230\":1}}],[\"业务代表\",{\"1\":{\"230\":1}}],[\"业务代表模式\",{\"0\":{\"230\":1},\"1\":{\"185\":1}}],[\"违反了迪米特原则\",{\"1\":{\"228\":1}}],[\"违反了依赖倒置原则\",{\"1\":{\"212\":1,\"228\":1}}],[\"朋友接受您的访问\",{\"1\":{\"228\":1}}],[\"污染\",{\"1\":{\"228\":2}}],[\"稳定的数据结构和易变的操作耦合问题\",{\"1\":{\"228\":1}}],[\"结束游戏\",{\"1\":{\"227\":1}}],[\"结构复杂\",{\"1\":{\"221\":1}}],[\"结构型模式structural\",{\"0\":{\"183\":1}}],[\"结构设计模式\",{\"0\":{\"183\":1}}],[\"开闭\",{\"0\":{\"492\":1}}],[\"开闭原则的意思是\",{\"1\":{\"239\":1}}],[\"开闭原则\",{\"0\":{\"239\":1},\"1\":{\"224\":1}}],[\"开始游戏\",{\"1\":{\"227\":1}}],[\"封装变化\",{\"1\":{\"239\":1}}],[\"封装不变部分\",{\"1\":{\"227\":1}}],[\"封装了转换规则\",{\"1\":{\"224\":1}}],[\"难\",{\"1\":{\"227\":1}}],[\"西游记里面菩萨定好的\",{\"1\":{\"227\":1}}],[\"西游记里面悟空请求菩萨降服红孩儿\",{\"1\":{\"223\":1}}],[\"水管都一样\",{\"1\":{\"227\":1}}],[\"走线\",{\"1\":{\"227\":1}}],[\"地基\",{\"1\":{\"227\":1}}],[\"却在每一个子类都重新写了这一方法\",{\"1\":{\"227\":1}}],[\"坐汽车\",{\"1\":{\"226\":1}}],[\"旅行的出游方式\",{\"1\":{\"226\":1}}],[\"诸葛亮的锦囊妙计\",{\"1\":{\"226\":1}}],[\"策略表示如何实现组合实体\",{\"1\":{\"231\":1}}],[\"策略\",{\"1\":{\"231\":1}}],[\"策略类会增多\",{\"1\":{\"226\":1}}],[\"策略对象改变\",{\"1\":{\"226\":1}}],[\"策略模式\",{\"0\":{\"226\":1,\"476\":1},\"1\":{\"184\":1}}],[\"还有jscript\",{\"1\":{\"407\":1}}],[\"还创建一个未对该类做任何实现的空对象类\",{\"1\":{\"225\":1}}],[\"还要增加一个管理备忘录的类\",{\"1\":{\"222\":1}}],[\"条件\",{\"1\":{\"224\":1}}],[\"曾侯乙编钟\",{\"1\":{\"224\":1}}],[\"曾侯乙编钟中\",{\"1\":{\"224\":1}}],[\"钟a\",{\"1\":{\"224\":1}}],[\"钟是抽象接口\",{\"1\":{\"224\":1}}],[\"覆盖接口中的方法\",{\"1\":{\"224\":1}}],[\"观察目标会触发它们之间进行循环调用\",{\"1\":{\"223\":1}}],[\"观察者和被观察者是抽象耦合的\",{\"1\":{\"223\":1}}],[\"观察者对象\",{\"1\":{\"223\":1}}],[\"观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的\",{\"1\":{\"223\":1}}],[\"观察者模式属于行为型模式\",{\"1\":{\"223\":1}}],[\"观察者模式\",{\"0\":{\"202\":1},\"1\":{\"184\":1}}],[\"菩萨洒了一地水招来一个老乌龟\",{\"1\":{\"223\":1}}],[\"拍卖师观察最高标价\",{\"1\":{\"223\":1}}],[\"拍卖的时候\",{\"1\":{\"223\":1}}],[\"恢复数据的相关状态场景\",{\"1\":{\"222\":1}}],[\"势必会占用比较大的资源\",{\"1\":{\"222\":1}}],[\"消耗资源\",{\"1\":{\"222\":1}}],[\"给用户提供了一种可以恢复状态的机制\",{\"1\":{\"222\":1}}],[\"给定一个语言\",{\"1\":{\"219\":1}}],[\"给定n个整数的序列\",{\"1\":{\"145\":1}}],[\"捕获一个对象的内部状态\",{\"1\":{\"222\":2}}],[\"符合单一职责原则\",{\"1\":{\"228\":1}}],[\"符合迪米特原则\",{\"1\":{\"221\":1}}],[\"符号处理引擎等\",{\"1\":{\"219\":1}}],[\"符号位加二进制数值\",{\"1\":{\"14\":1}}],[\"视图是为请求而创建的对象\",{\"1\":{\"233\":1}}],[\"视图代表模型包含的数据的可视化\",{\"1\":{\"229\":1}}],[\"视图\",{\"1\":{\"221\":1,\"229\":2,\"233\":1}}],[\"视频\",{\"1\":{\"23\":1}}],[\"框架\",{\"1\":{\"221\":1}}],[\"形成了网状结构\",{\"1\":{\"221\":1}}],[\"形式上最简单\",{\"1\":{\"12\":1}}],[\"访问者可以对功能进行统一\",{\"1\":{\"228\":1}}],[\"访问者模式\",{\"0\":{\"228\":1},\"1\":{\"184\":1}}],[\"访问一个聚合对象的内容而无须暴露它的内部表示\",{\"1\":{\"220\":1}}],[\"迭代器与生成器\",{\"1\":{\"328\":1}}],[\"迭代器简化了聚合类\",{\"1\":{\"220\":1}}],[\"迭代器模式就是分离了集合对象的遍历行为\",{\"1\":{\"220\":1}}],[\"迭代器模式\",{\"0\":{\"220\":1,\"478\":1},\"1\":{\"184\":1}}],[\"编程技巧\",{\"0\":{\"497\":1}}],[\"编程原则\",{\"0\":{\"238\":1}}],[\"编程语言创建应用程序的编程人员提供的实用指南\",{\"1\":{\"237\":1}}],[\"编程环境中非常常用的设计模式\",{\"1\":{\"220\":1}}],[\"编译语言\",{\"1\":{\"452\":1}}],[\"编译build后生效\",{\"0\":{\"320\":1}}],[\"编译时产生的问题与\",{\"1\":{\"301\":1}}],[\"编译时错误\",{\"1\":{\"208\":1}}],[\"编译\",{\"1\":{\"297\":1}}],[\"编译器\",{\"1\":{\"219\":1,\"452\":1}}],[\"编译程序\",{\"1\":{\"156\":1}}],[\"编译原理\",{\"0\":{\"154\":1}}],[\"规则\",{\"1\":{\"219\":2}}],[\"规定\",{\"1\":{\"14\":1}}],[\"见命令模式的扩展\",{\"1\":{\"218\":1}}],[\"认为是命令的地方都可以使用命令模式\",{\"1\":{\"218\":1}}],[\"相关定义\",{\"1\":{\"452\":1}}],[\"相关信息\",{\"1\":{\"360\":1,\"380\":1}}],[\"相关操作集是什么\",{\"1\":{\"163\":1}}],[\"相当于具体的\",{\"1\":{\"218\":1}}],[\"相当于\",{\"1\":{\"218\":1}}],[\"真正的命令执行对象\",{\"1\":{\"218\":1}}],[\"顺序\",{\"1\":{\"218\":1}}],[\"顺序存储结构\",{\"1\":{\"162\":1}}],[\"顺序存储器\",{\"1\":{\"24\":1}}],[\"事件循环\",{\"0\":{\"305\":1},\"1\":{\"329\":1}}],[\"事件复杂度t\",{\"1\":{\"143\":1}}],[\"事务\",{\"1\":{\"218\":1}}],[\"事务等处理时\",{\"1\":{\"218\":1}}],[\"撤销\",{\"1\":{\"218\":1}}],[\"撤销或重做\",{\"1\":{\"218\":1}}],[\"撤销到上一步\",{\"1\":{\"99\":1}}],[\"赋予它们不同的错误级别\",{\"1\":{\"217\":1}}],[\"责任链中的下一个元素\",{\"1\":{\"217\":1}}],[\"责任链模式\",{\"0\":{\"217\":1},\"1\":{\"184\":1}}],[\"向多个对象中的一个提交一个请求\",{\"1\":{\"217\":1}}],[\"向谁传递之前\",{\"1\":{\"217\":1}}],[\"允许状态转换逻辑与状态对象合成一体\",{\"1\":{\"224\":1}}],[\"允许对象在内部状态发生改变时改变它的行为\",{\"1\":{\"224\":1}}],[\"允许动态地新增或者删除责任\",{\"1\":{\"217\":1}}],[\"允许向一个现有的对象添加新的功能\",{\"1\":{\"213\":1}}],[\"增强给对象指派职责的灵活性\",{\"1\":{\"217\":1}}],[\"增加新的状态类需要修改那些负责状态转换的源代码\",{\"1\":{\"224\":1}}],[\"增加新的聚合类需要对应增加新的迭代器类\",{\"1\":{\"220\":1}}],[\"增加新的聚合类和迭代器类都很方便\",{\"1\":{\"220\":1}}],[\"增加新的请求处理类很方便\",{\"1\":{\"217\":1}}],[\"增加了新的解释表达式的方式\",{\"1\":{\"219\":1}}],[\"增加了类的透明度\",{\"1\":{\"187\":1}}],[\"增加中间层\",{\"1\":{\"216\":1}}],[\"增加一个适配器\",{\"1\":{\"187\":1}}],[\"击鼓传花\",{\"1\":{\"217\":1}}],[\"红楼梦中的\",{\"1\":{\"217\":1}}],[\"红黑树\",{\"1\":{\"148\":1}}],[\"拦截器与过滤器\",{\"1\":{\"228\":1}}],[\"拦截的类都实现统一接口\",{\"1\":{\"217\":1}}],[\"拦截过滤器模式\",{\"0\":{\"234\":1},\"1\":{\"185\":1}}],[\"职责链模式\",{\"0\":{\"484\":1}}],[\"职责链上的处理者负责处理请求\",{\"1\":{\"217\":1}}],[\"职责清晰\",{\"1\":{\"216\":1}}],[\"依次对子组件执行步骤1\",{\"1\":{\"501\":1}}],[\"依旧分歧太大\",{\"1\":{\"408\":1}}],[\"依赖于抽象而不依赖于具体\",{\"1\":{\"241\":1}}],[\"依赖倒置原则\",{\"0\":{\"241\":1}}],[\"依赖对象是一个持续生命周期依赖于粗粒度对象的对象\",{\"1\":{\"231\":1}}],[\"依赖对象\",{\"1\":{\"231\":1}}],[\"依赖了具体类\",{\"1\":{\"228\":1}}],[\"依赖关系等处理好\",{\"1\":{\"214\":1}}],[\"依此类推\",{\"1\":{\"217\":1}}],[\"智能引用\",{\"1\":{\"216\":1}}],[\"智能化\",{\"1\":{\"216\":1}}],[\"虚拟环境\",{\"0\":{\"274\":1}}],[\"虚拟代理\",{\"1\":{\"216\":1}}],[\"虚拟存储器\",{\"1\":{\"24\":1}}],[\"支票在市场交易中用来代替现金\",{\"1\":{\"216\":1}}],[\"买火车票不一定在火车站买\",{\"1\":{\"216\":1}}],[\"猪八戒访问高翠兰的时候看不出来这个是孙悟空\",{\"1\":{\"216\":1}}],[\"猪八戒去找高翠兰结果是孙悟空变的\",{\"1\":{\"216\":1}}],[\"猪八戒从天蓬元帅转世投胎到猪\",{\"1\":{\"210\":1}}],[\"降低耦合\",{\"1\":{\"242\":1}}],[\"降低耦合度\",{\"1\":{\"217\":1}}],[\"降低类之间的耦合度\",{\"1\":{\"242\":1}}],[\"降低了类的复杂度\",{\"1\":{\"221\":1}}],[\"降低了系统耦合度\",{\"1\":{\"218\":1}}],[\"降低系统的内存\",{\"1\":{\"215\":1}}],[\"降低访问复杂系统的内部子系统时的复杂度\",{\"1\":{\"214\":1}}],[\"运行检查\",{\"1\":{\"303\":1}}],[\"运行任务\",{\"1\":{\"297\":1}}],[\"运用共享技术有效地支持大量细粒度的对象\",{\"1\":{\"215\":1}}],[\"运算表达式计算\",{\"1\":{\"219\":1}}],[\"运算符\",{\"1\":{\"167\":1}}],[\"运算实现算法设计\",{\"1\":{\"160\":1}}],[\"运算器\",{\"0\":{\"69\":1},\"1\":{\"8\":1,\"29\":2}}],[\"运算方法与运算器\",{\"0\":{\"18\":1},\"1\":{\"3\":1}}],[\"个\",{\"1\":{\"224\":1}}],[\"个分布于不同位置的圆来演示这种模式\",{\"1\":{\"215\":1}}],[\"个对象来画出\",{\"1\":{\"215\":1}}],[\"子元素项目属性\",{\"1\":{\"395\":1}}],[\"子类一定可以出现\",{\"1\":{\"240\":1}}],[\"子类可以扩展父类的功能\",{\"1\":{\"240\":1}}],[\"子类实现\",{\"1\":{\"227\":1}}],[\"子类会很膨胀\",{\"1\":{\"213\":1}}],[\"子系统相对独立\",{\"1\":{\"214\":1}}],[\"划价\",{\"1\":{\"214\":1}}],[\"划分为5个阶段\",{\"1\":{\"5\":1}}],[\"门诊\",{\"1\":{\"214\":1}}],[\"去医院看病\",{\"1\":{\"214\":1}}],[\"去肯德基\",{\"1\":{\"188\":1}}],[\"整个系统只需提供一个\",{\"1\":{\"214\":1}}],[\"整体流程\",{\"1\":{\"306\":1}}],[\"整体场景\",{\"1\":{\"212\":1}}],[\"整体层次结构\",{\"1\":{\"212\":1}}],[\"整体\",{\"1\":{\"212\":1}}],[\"玻璃和画框形成了一个物体\",{\"1\":{\"213\":1}}],[\"装饰者模式\",{\"0\":{\"486\":1}}],[\"装饰模式可以动态扩展一个实现类的功能\",{\"1\":{\"213\":1}}],[\"装饰模式是继承的一个替代模式\",{\"1\":{\"213\":1}}],[\"装饰类和被装饰类可以独立发展\",{\"1\":{\"213\":1}}],[\"装饰器模式为了增强功能\",{\"1\":{\"216\":1}}],[\"装饰器模式相比生成子类更为灵活\",{\"1\":{\"213\":1}}],[\"装饰器模式\",{\"0\":{\"213\":1},\"1\":{\"183\":1}}],[\"装到框子里\",{\"1\":{\"213\":1}}],[\"画可以被蒙上玻璃\",{\"1\":{\"213\":1}}],[\"他观察菩萨洒水这个动作\",{\"1\":{\"223\":1}}],[\"他的根本还是一只猴子\",{\"1\":{\"213\":1}}],[\"他们通过互连网络相互连接并进行信息交换\",{\"1\":{\"50\":1}}],[\"庙宇\",{\"1\":{\"213\":1}}],[\"变化的链条不方便调试\",{\"1\":{\"500\":1}}],[\"变量\",{\"0\":{\"445\":1}}],[\"变量的解构赋值\",{\"0\":{\"414\":1}}],[\"变量的声明类型尽量是接口或者是抽象类\",{\"1\":{\"241\":1}}],[\"变量提升\",{\"1\":{\"328\":1}}],[\"变量声明\",{\"0\":{\"299\":1}}],[\"变得复杂难以维护\",{\"1\":{\"221\":1}}],[\"变\",{\"1\":{\"213\":1}}],[\"孙悟空有\",{\"1\":{\"213\":1}}],[\"修饰器\",{\"0\":{\"430\":1}}],[\"修饰类引用和继承\",{\"1\":{\"213\":1}}],[\"修正方法\",{\"1\":{\"240\":1}}],[\"修改环境变量\",{\"1\":{\"90\":1}}],[\"动态\",{\"1\":{\"452\":1}}],[\"动态撤销\",{\"1\":{\"213\":1}}],[\"动态增加功能\",{\"1\":{\"213\":1}}],[\"动态地给一个对象添加一些额外的职责\",{\"1\":{\"213\":1}}],[\"动态互连网络\",{\"0\":{\"52\":1},\"1\":{\"3\":1}}],[\"节流防抖\",{\"1\":{\"329\":1}}],[\"节点自由增加\",{\"1\":{\"212\":1}}],[\"节省系统资源的时候\",{\"1\":{\"208\":1}}],[\"里氏代换原则是对开闭原则的补充\",{\"1\":{\"240\":1}}],[\"里氏代换原则是面向对象设计的基本原则之一\",{\"1\":{\"240\":1}}],[\"里氏代换原则中说\",{\"1\":{\"240\":1}}],[\"里氏替换原则\",{\"0\":{\"240\":1}}],[\"里的\",{\"1\":{\"222\":1}}],[\"里判断是否合适\",{\"1\":{\"217\":1}}],[\"里面聚合它自己\",{\"1\":{\"217\":1}}],[\"里面的快捷方式\",{\"1\":{\"216\":1}}],[\"里面放\",{\"1\":{\"212\":1}}],[\"里加代码\",{\"1\":{\"207\":1}}],[\"您通过朋友的描述\",{\"1\":{\"228\":1}}],[\"您是访问者\",{\"1\":{\"228\":1}}],[\"您在朋友家做客\",{\"1\":{\"228\":1}}],[\"您希望用户忽略组合对象与单个对象的不同\",{\"1\":{\"212\":1}}],[\"您想表示对象的部分\",{\"1\":{\"212\":1}}],[\"您需要一辆汽车\",{\"1\":{\"189\":1,\"206\":1}}],[\"客户不与备忘录类耦合\",{\"1\":{\"222\":1}}],[\"客户只需要将请求发送到职责链上即可\",{\"1\":{\"217\":1}}],[\"客户端可以发送请求或者发送传输对象到业务对象\",{\"1\":{\"236\":1}}],[\"客户端可以创建自己的传输对象\",{\"1\":{\"236\":1}}],[\"客户端\",{\"1\":{\"230\":1,\"234\":1,\"235\":1,\"236\":1}}],[\"客户端不与系统耦合\",{\"1\":{\"214\":1}}],[\"客户端不需要知道系统内部的复杂联系\",{\"1\":{\"214\":1}}],[\"客户端开发\",{\"0\":{\"175\":1}}],[\"客户程序可以向处理简单元素一样来处理复杂元素\",{\"1\":{\"212\":1}}],[\"部分\",{\"1\":{\"212\":2}}],[\"部署图等\",{\"1\":{\"205\":1}}],[\"且软件单位的功能不受到影响时\",{\"1\":{\"240\":1}}],[\"且逻辑相同\",{\"1\":{\"223\":1,\"227\":1}}],[\"且这两个维度都需要进行扩展\",{\"1\":{\"210\":1}}],[\"且计数规则是\",{\"1\":{\"13\":1}}],[\"墙上的开关\",{\"1\":{\"210\":1}}],[\"生产构建时执行的顺序按照引入子组件的顺序\",{\"1\":{\"501\":1}}],[\"生灵通过功能的委派\",{\"1\":{\"210\":1}}],[\"生成一个tsconfig\",{\"1\":{\"297\":1}}],[\"生成器类\",{\"1\":{\"207\":1}}],[\"生成不同操作系统的程序\",{\"1\":{\"207\":1}}],[\"生成基于给定信息的实体类的对象\",{\"1\":{\"206\":1,\"215\":1}}],[\"生成出所谓的\",{\"1\":{\"188\":1}}],[\"灵魂和肉体\",{\"1\":{\"210\":1}}],[\"灵活的图片\",{\"1\":{\"355\":1}}],[\"灵活性\",{\"1\":{\"228\":1}}],[\"灵活性好\",{\"1\":{\"187\":1}}],[\"灵活\",{\"1\":{\"165\":1,\"219\":1}}],[\"转世投胎的机制将尘世划分为两个等级\",{\"1\":{\"210\":1}}],[\"转化为\",{\"1\":{\"187\":1}}],[\"减少系统相互依赖\",{\"1\":{\"214\":1}}],[\"减少它们之间耦合\",{\"1\":{\"210\":1}}],[\"减少了内存的开销\",{\"1\":{\"208\":1}}],[\"扩展了js的语法\",{\"1\":{\"296\":1}}],[\"扩展可变部分\",{\"1\":{\"227\":1}}],[\"扩展性良好\",{\"1\":{\"226\":1}}],[\"扩展性高\",{\"1\":{\"189\":1,\"206\":1}}],[\"扩展一个类的功能\",{\"1\":{\"213\":1}}],[\"扩展起来不灵活\",{\"1\":{\"210\":1}}],[\"桥接\",{\"0\":{\"210\":1}}],[\"桥接模式尤为适用\",{\"1\":{\"210\":1}}],[\"桥接模式的引入会增加系统的理解与设计难度\",{\"1\":{\"210\":1}}],[\"桥接模式\",{\"1\":{\"183\":1}}],[\"读取二进制流\",{\"1\":{\"209\":1}}],[\"读卡器作为单独的一个类而存在\",{\"1\":{\"187\":1}}],[\"浅拷贝实现\",{\"1\":{\"209\":1}}],[\"融为浑然一体\",{\"1\":{\"209\":1}}],[\"然后从它创建一个硬链接而不是复制\",{\"1\":{\"259\":1}}],[\"然后填充\",{\"1\":{\"236\":1}}],[\"然后把请求传给相应的处理程序\",{\"1\":{\"233\":1,\"234\":1}}],[\"然后对朋友的描述做出一个判断\",{\"1\":{\"228\":1}}],[\"然后通知给其他竞价者竞价\",{\"1\":{\"223\":1}}],[\"然后由工厂方法提供给调用者\",{\"1\":{\"209\":1}}],[\"然后将该运算符压栈\",{\"1\":{\"167\":1}}],[\"资源优化场景\",{\"1\":{\"209\":1}}],[\"逃避构造函数的约束\",{\"1\":{\"209\":2}}],[\"拥有稳定的接口\",{\"1\":{\"209\":1}}],[\"继承重写都不合适\",{\"1\":{\"214\":1}}],[\"继承\",{\"1\":{\"209\":1,\"328\":1}}],[\"继承或依赖\",{\"1\":{\"187\":1}}],[\"利用已有的一个原型对象\",{\"1\":{\"209\":1}}],[\"例如\",{\"1\":{\"209\":3}}],[\"经验之谈\",{\"1\":{\"208\":1}}],[\"经过分类编目的\",{\"1\":{\"179\":1}}],[\"之前是各个国家相互贸易\",{\"1\":{\"221\":1}}],[\"之间的关系配合之后\",{\"1\":{\"452\":1}}],[\"之间的通信封装到一个类中单独处理\",{\"1\":{\"221\":1}}],[\"之间的耦合关系\",{\"1\":{\"209\":1}}],[\"之间有空格\",{\"1\":{\"85\":1}}],[\"之后才加入\",{\"1\":{\"208\":1}}],[\"绝对防止多次实例化\",{\"1\":{\"208\":2}}],[\"枚举类型\",{\"1\":{\"298\":1}}],[\"枚举可能的状态\",{\"1\":{\"224\":1}}],[\"枚举\",{\"1\":{\"208\":1}}],[\"很多时候我们总是需要记录一个对象的内部状态\",{\"1\":{\"222\":1}}],[\"很消耗资源\",{\"1\":{\"208\":1}}],[\"很明显\",{\"1\":{\"208\":1}}],[\"才能理解并熟练使用\",{\"1\":{\"474\":1}}],[\"才能保证单例\",{\"1\":{\"208\":1}}],[\"才会使用第\",{\"1\":{\"208\":1}}],[\"才会显示装载\",{\"1\":{\"208\":1}}],[\"效果时\",{\"1\":{\"208\":1}}],[\"效果\",{\"1\":{\"208\":1}}],[\"效率很低\",{\"1\":{\"208\":1}}],[\"种可用的颜色\",{\"1\":{\"215\":1}}],[\"种双检锁方式\",{\"1\":{\"208\":1}}],[\"种枚举方式\",{\"1\":{\"208\":1}}],[\"种登记方式\",{\"1\":{\"208\":1}}],[\"种饿汉方式\",{\"1\":{\"208\":1}}],[\"种懒汉方式\",{\"1\":{\"208\":1}}],[\"种和第\",{\"1\":{\"208\":1}}],[\"种方式就显得很合理\",{\"1\":{\"208\":1}}],[\"种方式只要\",{\"1\":{\"208\":1}}],[\"种方式不同的是\",{\"1\":{\"208\":1}}],[\"种图\",{\"1\":{\"205\":1}}],[\"应使用这种方式而不是双检锁方式\",{\"1\":{\"208\":1}}],[\"应用程序可以是基于\",{\"1\":{\"233\":1}}],[\"应用实例\",{\"1\":{\"187\":1,\"188\":1,\"189\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"227\":1,\"228\":1}}],[\"应用\",{\"1\":{\"167\":1,\"168\":1}}],[\"应用软件\",{\"1\":{\"9\":1}}],[\"静态内部类\",{\"1\":{\"208\":1}}],[\"静态互连网络\",{\"0\":{\"51\":1},\"1\":{\"3\":1}}],[\"登记式\",{\"1\":{\"208\":1}}],[\"安全且在多线程情况下能保持高性能\",{\"1\":{\"208\":1}}],[\"安装与编译\",{\"0\":{\"297\":1}}],[\"安装对应版本的node\",{\"1\":{\"286\":1}}],[\"安装包时\",{\"1\":{\"259\":1}}],[\"安装相关的环境\",{\"1\":{\"83\":1}}],[\"安装环境\",{\"0\":{\"83\":1}}],[\"安装完最后可以看到log中有登录账号和密码等\",{\"1\":{\"81\":1}}],[\"安装\",{\"0\":{\"81\":1,\"273\":1},\"1\":{\"297\":1}}],[\"较复杂\",{\"1\":{\"208\":1}}],[\"起到一种规范和限制的作用\",{\"1\":{\"300\":1}}],[\"起\",{\"1\":{\"208\":2}}],[\"双重校验锁\",{\"1\":{\"208\":1}}],[\"双检锁方式可在实例域需要延迟初始化时使用\",{\"1\":{\"208\":1}}],[\"双检锁\",{\"1\":{\"208\":1}}],[\"双引号\",{\"1\":{\"99\":2}}],[\"显然是不合适的\",{\"1\":{\"208\":1}}],[\"显然没有达到\",{\"1\":{\"208\":1}}],[\"显示消息\",{\"1\":{\"208\":1}}],[\"显示进程状态\",{\"1\":{\"85\":1}}],[\"显示当前目录文件\",{\"1\":{\"85\":1}}],[\"显示版本信息\",{\"1\":{\"85\":1}}],[\"显示文件列表详细信息\",{\"1\":{\"85\":1}}],[\"显示包括隐藏文件\",{\"1\":{\"85\":1}}],[\"显示器\",{\"1\":{\"36\":1}}],[\"虽然导致类装载的原因有很多种\",{\"1\":{\"208\":1}}],[\"浪费内存\",{\"1\":{\"208\":1}}],[\"执行某些任务\",{\"1\":{\"234\":1}}],[\"执行效率会提高\",{\"1\":{\"208\":1}}],[\"执行指令\",{\"1\":{\"29\":1}}],[\"饿汉式\",{\"1\":{\"208\":1}}],[\"必须使用\",{\"1\":{\"303\":1}}],[\"必须实现\",{\"1\":{\"209\":1}}],[\"必须加锁\",{\"1\":{\"208\":1}}],[\"必定与一系列加在其上的操作相关联\",{\"1\":{\"160\":1}}],[\"避免使用多重条件判断\",{\"1\":{\"226\":1}}],[\"避免循环引用\",{\"1\":{\"223\":1}}],[\"避免请求发送者与接收者耦合在一起\",{\"1\":{\"217\":1}}],[\"避免重新创建\",{\"1\":{\"215\":1}}],[\"避免在两个层次之间建立静态的继承联系\",{\"1\":{\"210\":1}}],[\"避免内存浪费\",{\"1\":{\"208\":1}}],[\"避免对资源的多重占用\",{\"1\":{\"208\":1}}],[\"因此有些类型的代理模式可能会造成请求的处理速度变慢\",{\"1\":{\"216\":1}}],[\"因此如果不是很有必要\",{\"1\":{\"187\":1}}],[\"因为它们是由\",{\"1\":{\"231\":1}}],[\"因为不能确保\",{\"1\":{\"208\":1}}],[\"因为\",{\"1\":{\"208\":1}}],[\"因为没有加锁synchronized\",{\"1\":{\"208\":1}}],[\"易读性差\",{\"1\":{\"298\":1}}],[\"易于维护和升级\",{\"1\":{\"239\":1}}],[\"易于实现简单文法\",{\"1\":{\"219\":1}}],[\"易变类\",{\"1\":{\"209\":2}}],[\"易\",{\"1\":{\"208\":4}}],[\"易扩展\",{\"1\":{\"188\":1}}],[\"否则类应该被拆分\",{\"1\":{\"242\":1}}],[\"否则无法切换到新增状态\",{\"1\":{\"224\":1}}],[\"否则可能会引起线程安全问题\",{\"1\":{\"215\":1}}],[\"否则会造成系统的混乱\",{\"1\":{\"215\":1}}],[\"否\",{\"1\":{\"208\":3}}],[\"线程安全\",{\"1\":{\"208\":1}}],[\"线程不安全\",{\"1\":{\"208\":1}}],[\"线性表中的元素叫表目或者记录\",{\"1\":{\"165\":1}}],[\"线性表\",{\"0\":{\"165\":1},\"1\":{\"161\":1}}],[\"线性结构\",{\"0\":{\"164\":1},\"1\":{\"161\":1}}],[\"懒汉式\",{\"1\":{\"208\":2}}],[\"被多次实例化\",{\"1\":{\"208\":1}}],[\"防火墙\",{\"1\":{\"216\":1}}],[\"防止反序列化重新创建新的对象\",{\"1\":{\"208\":1}}],[\"防止多线程同时进入造成\",{\"1\":{\"208\":1}}],[\"防御编程模式\",{\"0\":{\"200\":1}}],[\"尤其是频繁的创建和销毁实例\",{\"1\":{\"208\":1}}],[\"判断系统是否已经有这个单例\",{\"1\":{\"208\":1}}],[\"该\",{\"1\":{\"237\":1}}],[\"该处理程序可以做认证\",{\"1\":{\"233\":1}}],[\"该对象是简单的\",{\"1\":{\"232\":1}}],[\"该对象包含依赖对象\",{\"1\":{\"231\":1}}],[\"该对象执行命令\",{\"1\":{\"218\":1}}],[\"该空对象类将无缝地使用在需要检查空值的地方\",{\"1\":{\"225\":1}}],[\"该解释器通过解释这些句子来解决该问题\",{\"1\":{\"219\":1}}],[\"该接口定义了在一个模型对象上要执行的标准操作\",{\"1\":{\"232\":1}}],[\"该接口解释一个特定的上下文\",{\"1\":{\"219\":1}}],[\"该接口用于创建当前对象的克隆\",{\"1\":{\"209\":1}}],[\"该类负责从数据源获取数据\",{\"1\":{\"232\":1}}],[\"该类负责创建自己的对象\",{\"1\":{\"208\":1}}],[\"该类实现了上述的接口\",{\"1\":{\"232\":1}}],[\"该类通常处理不同类之间的通信\",{\"1\":{\"221\":1}}],[\"该类有实现了\",{\"1\":{\"220\":1}}],[\"该类提供了客户端请求的简化方法和对现有系统类方法的委托调用\",{\"1\":{\"214\":1}}],[\"该类提供了修改相同对象组的方式\",{\"1\":{\"212\":1}}],[\"该类带有\",{\"1\":{\"212\":1}}],[\"该方法使用不太频繁\",{\"1\":{\"208\":1}}],[\"该超级工厂又称为其他工厂的工厂\",{\"1\":{\"207\":1}}],[\"来演示传输对象设计模式\",{\"1\":{\"236\":1}}],[\"来演示服务定位器设计模式\",{\"1\":{\"235\":1}}],[\"来演示拦截过滤器设计模式\",{\"1\":{\"234\":1}}],[\"来演示前端控制器设计模式\",{\"1\":{\"233\":1}}],[\"来演示数据访问对象模式的用法\",{\"1\":{\"232\":1}}],[\"来演示组合实体设计模式的用法\",{\"1\":{\"231\":1}}],[\"来演示游戏的定义方式\",{\"1\":{\"227\":1}}],[\"来显示\",{\"1\":{\"228\":1}}],[\"来查看当它改变策略\",{\"1\":{\"226\":1}}],[\"来查看当状态\",{\"1\":{\"224\":1}}],[\"来互相贸易\",{\"1\":{\"221\":1}}],[\"来隐藏系统的复杂性\",{\"1\":{\"214\":1}}],[\"来装饰\",{\"1\":{\"213\":1}}],[\"来画出不同颜色的圆\",{\"1\":{\"210\":1}}],[\"来实现二者的解耦\",{\"1\":{\"210\":1}}],[\"来实现堆栈\",{\"1\":{\"167\":1}}],[\"来调用私有构造方法\",{\"1\":{\"208\":1}}],[\"来获取迭代器\",{\"1\":{\"220\":1}}],[\"来获取\",{\"1\":{\"207\":1,\"216\":1,\"225\":1}}],[\"和实体观察者对象\",{\"1\":{\"223\":1}}],[\"和装饰器模式的区别\",{\"1\":{\"216\":1}}],[\"和适配器模式的区别\",{\"1\":{\"216\":1}}],[\"和它们的结合来过滤\",{\"1\":{\"211\":1}}],[\"和\",{\"0\":{\"413\":1},\"1\":{\"207\":1,\"210\":1,\"212\":2,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"230\":1,\"298\":1,\"452\":1}}],[\"换皮肤\",{\"1\":{\"207\":1}}],[\"换数据库只需换方言和驱动就可以\",{\"1\":{\"189\":1,\"206\":1}}],[\"既要在抽象的\",{\"1\":{\"207\":1}}],[\"要尽量先使用组合或者聚合等关联关系来实现\",{\"1\":{\"245\":1}}],[\"要访问的对象在远程的机器上\",{\"1\":{\"216\":1}}],[\"要求开发者针对抽象进行设计与编程\",{\"1\":{\"210\":1}}],[\"要求生产唯一序列号\",{\"1\":{\"208\":1}}],[\"要增加一个系列的某一产品\",{\"1\":{\"207\":1}}],[\"要不然\",{\"1\":{\"207\":1}}],[\"另一个操作符也可以是操作树\",{\"1\":{\"212\":1}}],[\"另一个抽象产品\",{\"1\":{\"207\":1}}],[\"另外一方面\",{\"1\":{\"208\":1}}],[\"另存为\",{\"1\":{\"99\":1}}],[\"裤子\",{\"1\":{\"207\":1}}],[\"某一观察者错误会导致系统卡壳\",{\"1\":{\"223\":1}}],[\"某一具体产品\",{\"1\":{\"207\":2}}],[\"某一个\",{\"1\":{\"207\":1}}],[\"某一个衣柜\",{\"1\":{\"207\":1}}],[\"所带来的复杂和难以维护\",{\"1\":{\"226\":1}}],[\"所有类型的值\",{\"1\":{\"452\":1}}],[\"所有版本\",{\"1\":{\"258\":1}}],[\"所有策略类都需要对外暴露\",{\"1\":{\"226\":1}}],[\"所有的请求都将由一个单一的处理程序处理\",{\"1\":{\"233\":1}}],[\"所有的依赖对象\",{\"1\":{\"223\":1}}],[\"所有的衣柜\",{\"1\":{\"207\":1}}],[\"所有依赖于它的对象都得到通知并被自动更新\",{\"1\":{\"223\":1}}],[\"所谓备忘录模式就是在不破坏封装的前提下\",{\"1\":{\"222\":1}}],[\"所以实际上也是一门\",{\"1\":{\"452\":1}}],[\"所以需要构建\",{\"1\":{\"410\":1}}],[\"所以ecmascript是javascript的规格\",{\"1\":{\"407\":1}}],[\"所以边缘会出现模糊的情况\",{\"1\":{\"315\":1}}],[\"所以里氏代换原则是对实现抽象化的具体步骤的规范\",{\"1\":{\"240\":1}}],[\"所以它可以通过网络传输\",{\"1\":{\"236\":1}}],[\"所以职责链将请求的发送者和请求的处理者解耦了\",{\"1\":{\"217\":1}}],[\"所以说孙悟空是高翠兰代理类\",{\"1\":{\"216\":1}}],[\"所以\",{\"1\":{\"215\":1}}],[\"所以想让它延迟加载\",{\"1\":{\"208\":1}}],[\"所以严格意义上它并不算单例模式\",{\"1\":{\"208\":1}}],[\"所以所有文件的处理必须通过唯一的实例来进行\",{\"1\":{\"208\":1}}],[\"所以至多只能适配一个适配者类\",{\"1\":{\"187\":1}}],[\"所以一般就分析最坏情况复杂度\",{\"1\":{\"143\":1}}],[\"所以学习算法最重要的是学习算法的设计过程\",{\"1\":{\"141\":1}}],[\"所以也必须用0和1来表示符号\",{\"1\":{\"14\":1}}],[\"所以转换比较方便\",{\"1\":{\"13\":1}}],[\"具有inline的同行特性\",{\"1\":{\"393\":1}}],[\"具有block宽度高度特性\",{\"1\":{\"393\":1}}],[\"具有反对称性和传递性\",{\"1\":{\"165\":1}}],[\"具体内容\",{\"1\":{\"241\":1}}],[\"具体元素变更比较困难\",{\"1\":{\"228\":1}}],[\"具体元素对访问者公布细节\",{\"1\":{\"228\":1}}],[\"具体哪个对象处理该请求由运行时刻自动确定\",{\"1\":{\"217\":1}}],[\"具体扩展类重写父类方法\",{\"1\":{\"213\":1}}],[\"具体的裤子也都是裤子\",{\"1\":{\"207\":1}}],[\"具体工厂\",{\"1\":{\"207\":2}}],[\"但它们的参数不一样\",{\"1\":{\"301\":1}}],[\"但不能改变父类原有的功能\",{\"1\":{\"240\":1}}],[\"但经常需要在此对象结构上定义新的操作\",{\"1\":{\"228\":1}}],[\"但调用将以抽象类中定义的方式进行\",{\"1\":{\"227\":1}}],[\"但某些场合\",{\"1\":{\"218\":1}}],[\"但对于已有的类不一定很容易\",{\"1\":{\"209\":1}}],[\"但这是实现单例模式的最佳方法\",{\"1\":{\"208\":1}}],[\"但实现更简单\",{\"1\":{\"208\":1}}],[\"但容易产生垃圾对象\",{\"1\":{\"208\":1}}],[\"但加锁会影响效率\",{\"1\":{\"208\":1}}],[\"但是ts中必须一样\",{\"1\":{\"301\":1}}],[\"但是却不能够在它上面调用任意的方法\",{\"1\":{\"298\":1}}],[\"但是通常都是有画框的\",{\"1\":{\"213\":1}}],[\"但是他又有了庙宇的功能\",{\"1\":{\"213\":1}}],[\"但是也不能确定有其他的方式\",{\"1\":{\"208\":1}}],[\"但是\",{\"1\":{\"208\":1,\"298\":1}}],[\"但是在性能上有所差异\",{\"1\":{\"208\":1}}],[\"但是将它们组合在一起的算法却相对稳定\",{\"1\":{\"188\":1}}],[\"但有利于说明抽象工厂模式\",{\"1\":{\"207\":1}}],[\"假设一种情况\",{\"1\":{\"207\":1}}],[\"假如链条容易发生变化还是使用普通调用\",{\"1\":{\"500\":1}}],[\"假如有则指向已创建的实例\",{\"1\":{\"191\":1}}],[\"假如没有则创建的实例\",{\"1\":{\"191\":1}}],[\"假如是右括号\",{\"1\":{\"167\":1}}],[\"假如是左括号\",{\"1\":{\"167\":1}}],[\"假如是运算符\",{\"1\":{\"167\":1}}],[\"即如何使用babel转码器\",{\"0\":{\"410\":1}}],[\"即便它真的有这些方法\",{\"1\":{\"298\":1}}],[\"即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层\",{\"1\":{\"239\":1}}],[\"即可\",{\"1\":{\"214\":1}}],[\"即\",{\"1\":{\"208\":1,\"210\":1}}],[\"即一系列具体产品\",{\"1\":{\"207\":1}}],[\"即定点表示法和浮点表示法\",{\"1\":{\"14\":1}}],[\"商务男装\",{\"1\":{\"207\":1}}],[\"甚至对于一个家庭来说\",{\"1\":{\"207\":1}}],[\"成功的通行版本\",{\"1\":{\"408\":1}}],[\"成套\",{\"1\":{\"207\":3}}],[\"成为国际标准\",{\"1\":{\"408\":1}}],[\"成为指令集\",{\"1\":{\"27\":1}}],[\"成为存储体\",{\"1\":{\"26\":1}}],[\"肯定有两套或多套衣服吧\",{\"1\":{\"207\":1}}],[\"为止\",{\"1\":{\"409\":1}}],[\"为传输对象填充数据的业务服务\",{\"1\":{\"236\":1}}],[\"为防止恶意操作\",{\"1\":{\"227\":1}}],[\"为遍历不同的聚合结构提供一个统一的接口\",{\"1\":{\"220\":1}}],[\"为请求创建了一个接收者对象的链\",{\"1\":{\"217\":1}}],[\"为其他对象提供一种代理以控制对这个对象的访问\",{\"1\":{\"216\":1}}],[\"为复杂的模块或子系统提供外界访问的模块\",{\"1\":{\"214\":1}}],[\"为子系统中的一组接口提供一个一致的界面\",{\"1\":{\"214\":1}}],[\"为标准\",{\"1\":{\"211\":1}}],[\"为了节约内存\",{\"1\":{\"222\":1}}],[\"为了符合迪米特原则\",{\"1\":{\"222\":1}}],[\"为了避免创建一个与产品类层次平行的工厂类层次时\",{\"1\":{\"209\":1}}],[\"为了参加一些聚会\",{\"1\":{\"207\":1}}],[\"为\",{\"1\":{\"207\":1,\"235\":1}}],[\"为颜色创建一个接口\",{\"1\":{\"207\":1}}],[\"为形状创建一个接口\",{\"1\":{\"207\":1}}],[\"为软件开发的所有阶段提供模型化和可视化支持\",{\"1\":{\"205\":1}}],[\"验证输出\",{\"1\":{\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1}}],[\"获取属性的方法\",{\"1\":{\"236\":1}}],[\"获取学生\",{\"1\":{\"232\":1,\"236\":1}}],[\"获取唯一可用的对象\",{\"1\":{\"208\":2}}],[\"获取颜色为\",{\"1\":{\"207\":3}}],[\"获取颜色工厂\",{\"1\":{\"207\":1}}],[\"获取形状为\",{\"1\":{\"207\":3}}],[\"获取形状工厂\",{\"1\":{\"207\":1}}],[\"获取\",{\"1\":{\"206\":3,\"227\":1}}],[\"步骤4\",{\"1\":{\"207\":1,\"211\":1}}],[\"步骤\",{\"1\":{\"206\":5,\"207\":8,\"208\":3,\"209\":5,\"210\":6,\"211\":4,\"212\":3,\"213\":6,\"214\":5,\"215\":5,\"216\":4,\"217\":4,\"218\":6,\"219\":4,\"220\":4,\"221\":4,\"222\":5,\"223\":5,\"224\":5,\"225\":5,\"226\":5,\"227\":4,\"228\":6,\"229\":5,\"230\":7,\"231\":6,\"232\":5,\"233\":5,\"234\":8,\"235\":7,\"236\":4}}],[\"构建工具\",{\"0\":{\"470\":1}}],[\"构件环境类\",{\"1\":{\"219\":1}}],[\"构件语法树\",{\"1\":{\"219\":1}}],[\"构件图\",{\"1\":{\"205\":1}}],[\"构成和表示时\",{\"1\":{\"209\":1}}],[\"构造函数是私有的\",{\"1\":{\"208\":1}}],[\"构造函数\",{\"1\":{\"191\":1,\"208\":1,\"212\":1,\"328\":1}}],[\"协作图\",{\"1\":{\"205\":1}}],[\"协议进行连接\",{\"1\":{\"89\":1}}],[\"活动图\",{\"1\":{\"205\":1}}],[\"属性类接口\",{\"1\":{\"300\":1}}],[\"属性被用来检查现有的\",{\"1\":{\"215\":1}}],[\"属性\",{\"1\":{\"205\":1,\"224\":1}}],[\"它们的行为可能跟object的行为不一致\",{\"1\":{\"463\":1}}],[\"它们之间的区别仅在于它们的行为\",{\"1\":{\"226\":1}}],[\"它将允许隐式类型转换\",{\"1\":{\"452\":1}}],[\"它将请求的发送者和接收者解耦\",{\"1\":{\"217\":1}}],[\"它表示与项目依赖的\",{\"1\":{\"301\":1}}],[\"它允许你在编译时可选择地包含或移除类型检查\",{\"1\":{\"298\":1}}],[\"它强调降低依赖\",{\"1\":{\"242\":1}}],[\"它还有另外一个意思是\",{\"1\":{\"242\":1}}],[\"它没有任何的行为\",{\"1\":{\"236\":1}}],[\"它有自己的生命周期\",{\"1\":{\"231\":1}}],[\"它可以是粗粒的\",{\"1\":{\"231\":1}}],[\"它提供了对业务服务方法的访问\",{\"1\":{\"230\":1}}],[\"它提供了减少对象数量从而改善应用所需的对象结构的方式\",{\"1\":{\"215\":1}}],[\"它基本上是用来减少通信或对表示层代码中的业务层代码的远程查询功能\",{\"1\":{\"230\":1}}],[\"它基于\",{\"1\":{\"208\":1}}],[\"它使视图与模型分离开\",{\"1\":{\"229\":1}}],[\"它控制数据流向模型对象\",{\"1\":{\"229\":1}}],[\"它也可以带有逻辑\",{\"1\":{\"229\":1}}],[\"它改变了元素类的执行算法\",{\"1\":{\"228\":1}}],[\"它的模板方法被设置为\",{\"1\":{\"227\":1}}],[\"它的子类可以按需要重写方法实现\",{\"1\":{\"227\":1}}],[\"它支持以不同的方式遍历一个聚合对象\",{\"1\":{\"220\":1}}],[\"它属于行为型模式\",{\"1\":{\"218\":1,\"219\":1}}],[\"它向现有的系统添加一个接口\",{\"1\":{\"214\":1}}],[\"它是可序列化的\",{\"1\":{\"236\":1}}],[\"它是主要的实体\",{\"1\":{\"231\":1}}],[\"它是作为现有的类的一个包装\",{\"1\":{\"213\":1}}],[\"它是一个支持模型化和软件系统开发的图形化语言\",{\"1\":{\"205\":1}}],[\"它在我们树型结构的问题中\",{\"1\":{\"212\":1}}],[\"它创建了对象组的树形结构\",{\"1\":{\"212\":1}}],[\"它结合多个标准来获得单一标准\",{\"1\":{\"211\":1}}],[\"它通过提供抽象化和实现化之间的桥接结构\",{\"1\":{\"210\":1}}],[\"它同样要求这些\",{\"1\":{\"209\":1}}],[\"它不仅能避免多线程同步问题\",{\"1\":{\"208\":1}}],[\"它不仅统一了booch\",{\"1\":{\"205\":1}}],[\"它更简洁\",{\"1\":{\"208\":1}}],[\"它跟第\",{\"1\":{\"208\":1}}],[\"它能保证客户端始终只使用同一个产品族中的对象\",{\"1\":{\"207\":1}}],[\"方便找到这些变量\",{\"1\":{\"439\":1}}],[\"方法的重载\",{\"1\":{\"301\":1}}],[\"方法的剩余参数\",{\"1\":{\"301\":1}}],[\"方法的默认参数\",{\"1\":{\"301\":1}}],[\"方法的可选参数\",{\"1\":{\"301\":1}}],[\"方法的简单的\",{\"1\":{\"236\":1}}],[\"方法的发展在80年代末至90年代中出现了一个高潮\",{\"1\":{\"205\":1}}],[\"方法来存储通过使用\",{\"1\":{\"232\":1}}],[\"方法来演示\",{\"1\":{\"229\":1}}],[\"方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝\",{\"1\":{\"209\":1}}],[\"方法时\",{\"1\":{\"208\":1}}],[\"方法中需要使用同步锁\",{\"1\":{\"208\":1}}],[\"方法\",{\"1\":{\"206\":6,\"207\":6,\"208\":1,\"209\":1,\"239\":1}}],[\"方法获取形状类型的对象\",{\"1\":{\"206\":1}}],[\"方式\",{\"1\":{\"32\":1}}],[\"练习\",{\"0\":{\"205\":1},\"1\":{\"205\":1}}],[\"委托模式\",{\"0\":{\"204\":1}}],[\"管理的\",{\"1\":{\"231\":1}}],[\"管理者模式\",{\"0\":{\"198\":1}}],[\"管理建造出来的实例的依赖关系\",{\"1\":{\"188\":1}}],[\"插件众多\",{\"1\":{\"302\":1}}],[\"插件设计模式\",{\"0\":{\"195\":1}}],[\"插入操作在表的一端\",{\"1\":{\"168\":1}}],[\"插入和删除操作都限制在表的同一端进行\",{\"1\":{\"167\":1}}],[\"采用这种工厂模式可以使得获取单例的方式唯一不变\",{\"1\":{\"191\":1}}],[\"无法导入图片问题\",{\"0\":{\"321\":1}}],[\"无须修改原有代码\",{\"1\":{\"220\":1}}],[\"无须关心请求的处理细节和请求的传递\",{\"1\":{\"217\":1}}],[\"无需使用工厂模式\",{\"1\":{\"189\":1,\"206\":1}}],[\"无异于一场灾难\",{\"1\":{\"187\":1}}],[\"都有\",{\"1\":{\"298\":1}}],[\"都将得到通知\",{\"1\":{\"223\":1}}],[\"都是衣柜类的\",{\"1\":{\"207\":1}}],[\"都可以使用工厂方法模式\",{\"1\":{\"189\":1,\"206\":1}}],[\"都需要增加一个具体类和对象实现工厂\",{\"1\":{\"189\":1,\"206\":1}}],[\"共同实现一个接口\",{\"1\":{\"189\":1,\"206\":1}}],[\"需要基础核心知识扎实\",{\"1\":{\"474\":1}}],[\"需要经历5个阶段\",{\"1\":{\"325\":1}}],[\"需要管理员权限\",{\"1\":{\"286\":1}}],[\"需要对一个对象结构中的对象进行很多不同的并且不相关的操作\",{\"1\":{\"228\":2}}],[\"需要保存\",{\"1\":{\"222\":1}}],[\"需要为聚合对象提供多种遍历方式\",{\"1\":{\"220\":1}}],[\"需要缓冲池的场景\",{\"1\":{\"215\":1}}],[\"需要分离出外部状态和内部状态\",{\"1\":{\"215\":1}}],[\"需要三个协议\",{\"1\":{\"189\":1,\"206\":1}}],[\"需要生成的对象内部属性本身相互依赖\",{\"1\":{\"188\":1}}],[\"需要生成的对象具有复杂的内部结构\",{\"1\":{\"188\":1}}],[\"远程代理\",{\"1\":{\"216\":1}}],[\"远程服务器等\",{\"1\":{\"189\":1,\"206\":1}}],[\"远程教育\",{\"1\":{\"6\":1}}],[\"记录每一个请求\",{\"1\":{\"233\":1}}],[\"记录日志\",{\"1\":{\"233\":1,\"234\":1}}],[\"记录\",{\"1\":{\"218\":1}}],[\"记录可能记录到本地硬盘\",{\"1\":{\"189\":1,\"206\":1}}],[\"记录是用来指定主机名\",{\"1\":{\"72\":1}}],[\"日志记录器\",{\"1\":{\"189\":1,\"206\":1}}],[\"屏蔽产品的具体实现\",{\"1\":{\"189\":1,\"206\":1}}],[\"返回的也是一个抽象的产品\",{\"1\":{\"189\":1,\"206\":1}}],[\"返回到根目录\",{\"1\":{\"85\":1}}],[\"我们需要使用接口和抽象类\",{\"1\":{\"239\":1}}],[\"我们使用了一个访问者类\",{\"1\":{\"228\":1}}],[\"我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的\",{\"1\":{\"226\":1}}],[\"我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的\",{\"1\":{\"224\":1}}],[\"我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类\",{\"1\":{\"225\":1}}],[\"我们创建具有现有对象的对象\",{\"1\":{\"216\":1}}],[\"我们也需要跟踪与之相关联的对象\",{\"1\":{\"221\":1}}],[\"我们可以在访问此对象时加上一个对此对象的访问层\",{\"1\":{\"216\":1}}],[\"我们可以缓存该对象\",{\"1\":{\"209\":1}}],[\"我们把其中共同的部分抽象出来\",{\"1\":{\"215\":1}}],[\"我们把书写形式\",{\"1\":{\"14\":1}}],[\"我们将通过创建\",{\"1\":{\"215\":1}}],[\"我们将把一个形状装饰上不同的颜色\",{\"1\":{\"213\":1}}],[\"我们为了扩展一个类经常使用继承方式实现\",{\"1\":{\"213\":1}}],[\"我们通过下面的实例来演示装饰器模式的用法\",{\"1\":{\"213\":1}}],[\"我们通过下面的实例来演示组合模式的用法\",{\"1\":{\"212\":1}}],[\"我们通过下面的实例来演示桥接模式\",{\"1\":{\"210\":1}}],[\"我们要添加三种形状\",{\"1\":{\"209\":1}}],[\"我们在创建对象时不会对客户端暴露创建逻辑\",{\"1\":{\"206\":1}}],[\"我们明确地计划不同条件下创建不同实例时\",{\"1\":{\"189\":1,\"206\":1}}],[\"如bom\",{\"1\":{\"463\":1}}],[\"如font\",{\"1\":{\"315\":1}}],[\"如number类型等\",{\"1\":{\"292\":1}}],[\"如null的类型等\",{\"1\":{\"292\":1}}],[\"如树形菜单\",{\"1\":{\"212\":1}}],[\"如下所示\",{\"1\":{\"208\":1}}],[\"如果高度为奇数的文字可能会存在半个像素的计算量\",{\"1\":{\"315\":1}}],[\"如果不一样就需要配置可选参数\",{\"1\":{\"301\":1}}],[\"如果不用恰当的模式\",{\"1\":{\"226\":1}}],[\"如果使用不当将导致程序结构和代码的混乱\",{\"1\":{\"224\":1}}],[\"如果使用工厂模式\",{\"1\":{\"189\":1,\"206\":1}}],[\"如果顺序执行\",{\"1\":{\"223\":1}}],[\"如果在一个系统里面有许多类\",{\"1\":{\"226\":1}}],[\"如果在观察者和观察目标之间有循环依赖的话\",{\"1\":{\"223\":1}}],[\"如果在内存中有\",{\"1\":{\"215\":1}}],[\"如果类的成员变量过多\",{\"1\":{\"222\":1}}],[\"如果一种特定类型的问题发生的频率足够高\",{\"1\":{\"219\":1}}],[\"如果一个系统的策略多于四个\",{\"1\":{\"226\":1}}],[\"如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性\",{\"1\":{\"210\":1}}],[\"如果一个对象有很多的行为\",{\"1\":{\"226\":1}}],[\"如果一个对象不能处理该请求\",{\"1\":{\"217\":1}}],[\"如果一个被观察者对象有很多的直接和间接的观察者的话\",{\"1\":{\"223\":1}}],[\"如果没达到条件则向下传递\",{\"1\":{\"217\":1}}],[\"如果没有则创建一个字符串保存在字符串缓存池里面\",{\"1\":{\"215\":1}}],[\"如果没有则创建\",{\"1\":{\"208\":1}}],[\"如果未找到匹配的对象\",{\"1\":{\"215\":1}}],[\"如果要改东西很麻烦\",{\"1\":{\"214\":1}}],[\"如果有相同的业务请求\",{\"1\":{\"215\":1}}],[\"如果有提供接待人员\",{\"1\":{\"214\":1}}],[\"如果有其他特殊的需求\",{\"1\":{\"208\":1}}],[\"如果有则返回\",{\"1\":{\"208\":1,\"215\":1}}],[\"如果涉及到反序列化创建对象时\",{\"1\":{\"208\":1}}],[\"如果实例化\",{\"1\":{\"208\":1}}],[\"如果想增加一个产品\",{\"1\":{\"189\":1,\"206\":1}}],[\"如内部变化复杂\",{\"1\":{\"188\":1}}],[\"如何处理es6的兼容问题\",{\"0\":{\"410\":1}}],[\"如何查看各浏览器\",{\"0\":{\"409\":1}}],[\"如何演变到现在的es\",{\"0\":{\"408\":1}}],[\"如何将\",{\"1\":{\"218\":1}}],[\"如何解决\",{\"1\":{\"187\":1,\"188\":1,\"189\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"227\":1,\"228\":1}}],[\"如何找到某一本书\",{\"1\":{\"160\":1}}],[\"如何组织数据跟数据的规模以及存储的地方是有关系\",{\"1\":{\"160\":1}}],[\"范围有限制\",{\"1\":{\"188\":1}}],[\"产品等级易扩展\",{\"1\":{\"207\":1}}],[\"产品族难扩展\",{\"1\":{\"207\":1}}],[\"产品族扩展非常困难\",{\"1\":{\"207\":1}}],[\"产品必须有共同点\",{\"1\":{\"188\":1}}],[\"产生一个对象需要非常繁琐的数据准备或访问权限\",{\"1\":{\"209\":1}}],[\"产生式\",{\"1\":{\"156\":1}}],[\"产生输出\",{\"1\":{\"141\":1}}],[\"套餐\",{\"1\":{\"188\":1}}],[\"炸鸡翅等是不变的\",{\"1\":{\"188\":1}}],[\"薯条\",{\"1\":{\"188\":1}}],[\"汉堡\",{\"1\":{\"188\":1}}],[\"导致类的个数增加\",{\"1\":{\"227\":1}}],[\"导致类装载\",{\"1\":{\"208\":1}}],[\"导致它们之间的依赖关系结构混乱而且难以复用该对象\",{\"1\":{\"221\":1}}],[\"导演\",{\"1\":{\"188\":1}}],[\"导弹军事\",{\"1\":{\"6\":1}}],[\"使其满足新的需求\",{\"1\":{\"239\":1}}],[\"使代码易于维护\",{\"1\":{\"221\":1}}],[\"使效率提高\",{\"1\":{\"215\":1}}],[\"使它们都可以独立的变化\",{\"1\":{\"210\":1}}],[\"使用transform的盒子为奇数\",{\"1\":{\"315\":1}}],[\"使用tslint\",{\"0\":{\"303\":1}}],[\"使用eslint\",{\"0\":{\"304\":1}}],[\"使用enum\",{\"1\":{\"301\":1}}],[\"使用的语法树\",{\"1\":{\"302\":1}}],[\"使用多个隔离的接口\",{\"1\":{\"242\":1}}],[\"使用继承时尽量遵循里氏替换原则\",{\"1\":{\"241\":1}}],[\"使用访问者模式将这些封装到类中\",{\"1\":{\"228\":1}}],[\"使用面向对象技术\",{\"1\":{\"223\":1}}],[\"使用命令模式可能会导致某些系统有过多的具体命令类\",{\"1\":{\"218\":1}}],[\"使用命令对象的入口\",{\"1\":{\"218\":1}}],[\"使用该外观类画出各种类型的形状\",{\"1\":{\"214\":1}}],[\"使用该工厂\",{\"1\":{\"206\":1,\"215\":1}}],[\"使用不同的标准\",{\"1\":{\"211\":1}}],[\"使用桥接模式再适合不过了\",{\"1\":{\"210\":1}}],[\"使用\",{\"1\":{\"206\":1,\"207\":1,\"209\":1,\"210\":2,\"212\":1,\"213\":1,\"216\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":2,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"301\":3}}],[\"使用场景\",{\"1\":{\"187\":1,\"188\":1,\"189\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"227\":1,\"228\":1}}],[\"使得对象的属性具有唯一标识\",{\"1\":{\"462\":1}}],[\"使得对象不需要知道链的结构\",{\"1\":{\"217\":1}}],[\"使得在一个文件中的类型定义能够联动到其他文件中的代码检查\",{\"1\":{\"302\":1}}],[\"使得系统功能模块相对独立\",{\"1\":{\"244\":1}}],[\"使得系统更加庞大\",{\"1\":{\"227\":1}}],[\"使得系统中类的个数成倍增加\",{\"1\":{\"189\":1,\"206\":1}}],[\"使得用户不需要关心状态的保存细节\",{\"1\":{\"222\":1}}],[\"使得他有\",{\"1\":{\"222\":1}}],[\"使得生灵可以动态地选择\",{\"1\":{\"210\":1}}],[\"使得实体类的功能独立于接口实现类\",{\"1\":{\"210\":1}}],[\"使得二者可以独立变化\",{\"1\":{\"210\":1}}],[\"使得同样的构建过程可以创建不同的表示\",{\"1\":{\"188\":1}}],[\"使之立即生效\",{\"1\":{\"90\":1}}],[\"至多继承一个类\",{\"1\":{\"187\":1}}],[\"明明看到调用的是\",{\"1\":{\"187\":1}}],[\"会后不久改为es\",{\"1\":{\"408\":1}}],[\"会使用联合类型替代\",{\"1\":{\"298\":1}}],[\"会自动更新\",{\"1\":{\"231\":1}}],[\"会增加系统的复杂度\",{\"1\":{\"189\":1,\"206\":1}}],[\"会有很多的建造类\",{\"1\":{\"188\":1}}],[\"会让系统非常零乱\",{\"1\":{\"187\":1}}],[\"会进入命令模式\",{\"1\":{\"98\":1}}],[\"会进入插入模式\",{\"1\":{\"98\":1}}],[\"过滤管理器管理过滤器和过滤器链\",{\"1\":{\"234\":1}}],[\"过滤管理器\",{\"1\":{\"234\":1}}],[\"过滤器链带有多个过滤器\",{\"1\":{\"234\":1}}],[\"过滤器链\",{\"1\":{\"234\":1}}],[\"过滤器在请求处理程序执行请求之前或之后\",{\"1\":{\"234\":1}}],[\"过滤器\",{\"1\":{\"234\":1}}],[\"过滤器可以做认证\",{\"1\":{\"234\":1}}],[\"过滤器模式\",{\"0\":{\"211\":1},\"1\":{\"183\":1}}],[\"过多地使用适配器\",{\"1\":{\"187\":1}}],[\"缺点\",{\"1\":{\"187\":1,\"188\":1,\"189\":1,\"206\":1,\"207\":1,\"208\":3,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"227\":1,\"228\":1}}],[\"则会自动通知它的依赖对象\",{\"1\":{\"223\":1}}],[\"则使用观察者模式\",{\"0\":{\"223\":1}}],[\"则返回这个唯一标识码所标识的对象\",{\"1\":{\"215\":1}}],[\"则创建新对象\",{\"1\":{\"215\":1}}],[\"则可以使用原型模式\",{\"1\":{\"209\":1}}],[\"则采用这种模式\",{\"1\":{\"209\":1}}],[\"则要将以前系统的\",{\"1\":{\"187\":1}}],[\"则把堆栈中存留的运算符一并输出\",{\"1\":{\"167\":1}}],[\"则把它压栈\",{\"1\":{\"167\":1}}],[\"提案变成正式标准\",{\"1\":{\"325\":1}}],[\"提取公共代码\",{\"1\":{\"227\":1}}],[\"提高了系统的复杂度\",{\"1\":{\"215\":1}}],[\"提高了安全性\",{\"1\":{\"214\":1}}],[\"提高了类的复用\",{\"1\":{\"187\":1}}],[\"提高灵活性\",{\"1\":{\"214\":1}}],[\"提倡的方式\",{\"1\":{\"208\":1}}],[\"提供一个可回滚的操作\",{\"1\":{\"222\":1}}],[\"提供一个创建一系列相关或相互依赖对象的接口\",{\"1\":{\"207\":1}}],[\"提供一种方法顺序访问一个聚合对象中各个元素\",{\"1\":{\"220\":1}}],[\"提供了实际的业务实现逻辑\",{\"1\":{\"230\":1}}],[\"提供了评估语言的语法或表达式的方式\",{\"1\":{\"219\":1}}],[\"提供了额外的功能\",{\"1\":{\"213\":1}}],[\"提供了\",{\"1\":{\"187\":1}}],[\"提示的问题不一致\",{\"1\":{\"301\":1}}],[\"提示\",{\"1\":{\"2\":1}}],[\"美国电器\",{\"1\":{\"187\":1}}],[\"适配器不是在详细设计时添加的\",{\"1\":{\"187\":1}}],[\"适配器继承或依赖已有的对象\",{\"1\":{\"187\":1}}],[\"适配器模式主要改变所考虑对象的接口\",{\"1\":{\"216\":1}}],[\"适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作\",{\"1\":{\"187\":1}}],[\"适配器模式\",{\"0\":{\"187\":1,\"488\":1},\"1\":{\"183\":1}}],[\"关于编程\",{\"0\":{\"289\":1}}],[\"关于设计模式的短文\",{\"1\":{\"237\":1}}],[\"关于学习\",{\"0\":{\"2\":1}}],[\"关键字与保留字\",{\"0\":{\"446\":1}}],[\"关键词\",{\"1\":{\"227\":1}}],[\"关键代码\",{\"1\":{\"187\":1,\"188\":1,\"189\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"227\":1,\"228\":1}}],[\"关闭\",{\"1\":{\"227\":1}}],[\"推荐书籍\",{\"0\":{\"330\":1}}],[\"推荐\",{\"1\":{\"187\":1}}],[\"想将其标准化\",{\"1\":{\"407\":1}}],[\"想不通\",{\"1\":{\"292\":1}}],[\"想通过一个中间类来封装多个类中的行为\",{\"1\":{\"221\":1}}],[\"想在访问一个类时做一些控制\",{\"1\":{\"216\":1}}],[\"想象一下\",{\"1\":{\"208\":1}}],[\"想要达到这样的效果\",{\"1\":{\"239\":1}}],[\"想要使用\",{\"1\":{\"187\":1}}],[\"想要建立一个可以重复使用的类\",{\"1\":{\"187\":1}}],[\"想查询的单词\",{\"1\":{\"99\":1}}],[\"何时使用\",{\"1\":{\"187\":1,\"188\":1,\"189\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"227\":1,\"228\":1}}],[\"放到新的环境中\",{\"1\":{\"187\":1}}],[\"现实中是不存在的\",{\"1\":{\"207\":1}}],[\"现代模块化设计模式\",{\"0\":{\"193\":1}}],[\"现在是各个国家通过\",{\"1\":{\"221\":1}}],[\"现在多了一个飞虎\",{\"1\":{\"187\":1}}],[\"现在的日期\",{\"1\":{\"85\":1}}],[\"现存的对象\",{\"1\":{\"187\":1}}],[\"意图\",{\"1\":{\"187\":1,\"188\":1,\"189\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"227\":1,\"228\":1}}],[\"连接内存卡与电脑\",{\"1\":{\"187\":1}}],[\"像现实生活中的读卡器\",{\"1\":{\"187\":1}}],[\"服务器端的业务类通常从数据库读取数据\",{\"1\":{\"236\":1}}],[\"服务器中查找到\",{\"1\":{\"235\":1}}],[\"服务\",{\"1\":{\"235\":1,\"302\":1}}],[\"服务定位器是通过\",{\"1\":{\"235\":1}}],[\"服务定位器\",{\"1\":{\"235\":1}}],[\"服务定位器会在它的缓存中查找\",{\"1\":{\"235\":1}}],[\"服务定位器在\",{\"1\":{\"235\":1}}],[\"服务定位器模式充分利用了缓存技术\",{\"1\":{\"235\":1}}],[\"服务定位器模式\",{\"0\":{\"235\":1},\"1\":{\"185\":1}}],[\"服务端\",{\"0\":{\"174\":1}}],[\"特性\",{\"1\":{\"208\":1}}],[\"特别当一个类引用不支持串行化的间接对象\",{\"1\":{\"209\":1}}],[\"特别是只需要通过\",{\"1\":{\"189\":1,\"206\":1}}],[\"特别关注表示层\",{\"0\":{\"185\":1}}],[\"特点\",{\"1\":{\"165\":1}}],[\"模块化\",{\"0\":{\"493\":1},\"1\":{\"329\":1}}],[\"模板方法模式\",{\"0\":{\"482\":1}}],[\"模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤\",{\"1\":{\"227\":1}}],[\"模板字符串\",{\"1\":{\"298\":1}}],[\"模板\",{\"1\":{\"227\":2}}],[\"模板模式\",{\"0\":{\"227\":1},\"1\":{\"184\":1}}],[\"模型对象\",{\"1\":{\"232\":1}}],[\"模型代表一个存取数据的对象或\",{\"1\":{\"229\":1}}],[\"模型\",{\"1\":{\"221\":1,\"229\":2}}],[\"模拟\",{\"1\":{\"218\":1}}],[\"模糊了简单元素和复杂元素的概念\",{\"1\":{\"212\":1}}],[\"模式\",{\"0\":{\"192\":1,\"229\":1,\"232\":1},\"1\":{\"185\":1,\"229\":1}}],[\"模式切换\",{\"0\":{\"98\":1}}],[\"空对象模式\",{\"0\":{\"225\":1},\"1\":{\"184\":1}}],[\"空间复杂度分析\",{\"1\":{\"159\":1}}],[\"空间复杂度\",{\"1\":{\"147\":1}}],[\"空间复杂度s\",{\"1\":{\"143\":1}}],[\"状态图\",{\"1\":{\"205\":1}}],[\"状态模式对\",{\"1\":{\"224\":1}}],[\"状态模式的结构与实现都较为复杂\",{\"1\":{\"224\":1}}],[\"状态模式的使用必然会增加系统类和对象的个数\",{\"1\":{\"224\":1}}],[\"状态模式的实现类的方法\",{\"1\":{\"224\":1}}],[\"状态模式和命令模式一样\",{\"1\":{\"224\":1}}],[\"状态模式一般和对象的状态有关\",{\"1\":{\"224\":1}}],[\"状态模式\",{\"0\":{\"224\":1,\"487\":1},\"1\":{\"184\":1}}],[\"状态寄存器\",{\"1\":{\"29\":1}}],[\"备忘录模式属于行为型模式\",{\"1\":{\"222\":1}}],[\"备忘录模式\",{\"0\":{\"222\":1},\"1\":{\"184\":1}}],[\"代表了对象的图解\",{\"1\":{\"231\":1}}],[\"代表\",{\"1\":{\"229\":1}}],[\"代替\",{\"1\":{\"219\":1}}],[\"代理\",{\"1\":{\"216\":5}}],[\"代理模式\",{\"0\":{\"216\":1,\"477\":1},\"1\":{\"183\":1}}],[\"代码检查\",{\"0\":{\"302\":1}}],[\"代码\",{\"1\":{\"230\":1}}],[\"代码中包含大量与对象状态有关的条件语句\",{\"1\":{\"224\":1}}],[\"代码实例\",{\"1\":{\"208\":6}}],[\"代码设计经验的总结\",{\"1\":{\"179\":1}}],[\"享元模式尝试重用现有的同类对象\",{\"1\":{\"215\":1}}],[\"享元模式\",{\"0\":{\"215\":1,\"483\":1},\"1\":{\"183\":1}}],[\"类型转换\",{\"0\":{\"334\":1},\"1\":{\"298\":1}}],[\"类型断言\",{\"1\":{\"298\":1}}],[\"类型\",{\"1\":{\"298\":4}}],[\"类型元素数组\",{\"1\":{\"298\":2}}],[\"类型名称\",{\"1\":{\"163\":1}}],[\"类与接口\",{\"1\":{\"239\":1}}],[\"类检索到的数据\",{\"1\":{\"232\":1}}],[\"类充当抽象角色\",{\"1\":{\"213\":1}}],[\"类来演示业务代表模式\",{\"1\":{\"230\":1}}],[\"类来创建规则\",{\"1\":{\"219\":1}}],[\"类来创建和打印员工的层次结构\",{\"1\":{\"212\":1}}],[\"类来接受并执行命令\",{\"1\":{\"218\":1}}],[\"类来获取存储在\",{\"1\":{\"209\":1}}],[\"类画出不同颜色的圆\",{\"1\":{\"210\":1}}],[\"类初始化需要消化非常多的资源\",{\"1\":{\"209\":1}}],[\"类的行为是基于它的状态改变的\",{\"1\":{\"224\":1}}],[\"类的个数成对增加\",{\"1\":{\"220\":1}}],[\"类的对象\",{\"1\":{\"216\":1}}],[\"类的实体装饰类\",{\"1\":{\"213\":1}}],[\"类的\",{\"1\":{\"209\":1}}],[\"类还可能在其他的地方被主动使用从而被加载\",{\"1\":{\"208\":1}}],[\"类加载时就实例化\",{\"1\":{\"208\":1}}],[\"类加载时就初始化\",{\"1\":{\"208\":1}}],[\"类没有被主动使用\",{\"1\":{\"208\":1}}],[\"类被装载了\",{\"1\":{\"208\":2}}],[\"类获取唯一的对象\",{\"1\":{\"208\":1}}],[\"类\",{\"1\":{\"208\":2,\"212\":1,\"213\":1,\"221\":1,\"222\":3,\"223\":2,\"224\":1,\"225\":1,\"226\":1,\"236\":1}}],[\"类名\",{\"1\":{\"205\":1}}],[\"类图\",{\"1\":{\"205\":1}}],[\"类和对象的组合\",{\"1\":{\"183\":1}}],[\"原型链\",{\"0\":{\"438\":1}}],[\"原型\",{\"0\":{\"437\":1},\"1\":{\"328\":1,\"474\":1}}],[\"原型模式是通过拷贝一个现有对象生成新对象的\",{\"1\":{\"209\":1}}],[\"原型模式已经与\",{\"1\":{\"209\":1}}],[\"原型模式很少单独出现\",{\"1\":{\"209\":1}}],[\"原型模式同样用于隔离类对象的使用者和具体类型\",{\"1\":{\"209\":1}}],[\"原型模式\",{\"0\":{\"209\":1},\"1\":{\"182\":1}}],[\"原因是javascript是被网景公司注册了的\",{\"1\":{\"407\":1}}],[\"原因\",{\"1\":{\"315\":1}}],[\"原理\",{\"0\":{\"3\":1}}],[\"建议使用tslint\",{\"1\":{\"302\":1}}],[\"建议使用第\",{\"1\":{\"208\":1}}],[\"建立一套触发机制\",{\"1\":{\"223\":1}}],[\"建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些\",{\"1\":{\"209\":1}}],[\"建立目录\",{\"1\":{\"85\":1}}],[\"建造者独立\",{\"1\":{\"188\":1}}],[\"建造者\",{\"1\":{\"188\":1}}],[\"建造者模式更加关注与零件装配的顺序\",{\"1\":{\"188\":1}}],[\"建造者模式\",{\"0\":{\"188\":1},\"1\":{\"182\":1}}],[\"工程化\",{\"1\":{\"329\":1}}],[\"工具中安装typescript插件\",{\"1\":{\"297\":1}}],[\"工具是拿来用的\",{\"1\":{\"95\":1}}],[\"工作了\",{\"1\":{\"207\":1}}],[\"工厂模式使其创建过程延迟到子类进行\",{\"1\":{\"189\":1,\"206\":1}}],[\"工厂模式\",{\"0\":{\"189\":1,\"206\":1},\"1\":{\"182\":1}}],[\"创造了javascript\",{\"1\":{\"407\":1}}],[\"创建配置文件\",{\"1\":{\"303\":1}}],[\"创建各个模块的entity实体\",{\"1\":{\"284\":1}}],[\"创建所需的各个模块\",{\"1\":{\"284\":1}}],[\"创建传输对象\",{\"1\":{\"236\":1}}],[\"创建服务定位器\",{\"1\":{\"235\":1}}],[\"创建服务接口\",{\"1\":{\"235\":1}}],[\"创建缓存\",{\"1\":{\"235\":1}}],[\"创建过滤管理器\",{\"1\":{\"234\":1}}],[\"创建过滤器链\",{\"1\":{\"234\":1}}],[\"创建过滤器接口\",{\"1\":{\"234\":1}}],[\"创建过程在其子类执行\",{\"1\":{\"189\":1,\"206\":1}}],[\"创建前端控制器\",{\"1\":{\"233\":1}}],[\"创建调度器\",{\"1\":{\"233\":1}}],[\"创建数据库和数据库连接\",{\"1\":{\"284\":1}}],[\"创建数据访问对象接口\",{\"1\":{\"232\":1}}],[\"创建数值对象\",{\"1\":{\"232\":1}}],[\"创建使用组合实体的客户端类\",{\"1\":{\"231\":1}}],[\"创建组合实体\",{\"1\":{\"231\":1}}],[\"创建粗粒度对象\",{\"1\":{\"231\":1}}],[\"创建依赖对象\",{\"1\":{\"231\":1}}],[\"创建客户端\",{\"1\":{\"230\":1,\"234\":1}}],[\"创建业务对象\",{\"1\":{\"236\":1}}],[\"创建业务代表\",{\"1\":{\"230\":1}}],[\"创建业务查询服务\",{\"1\":{\"230\":1}}],[\"创建控制器\",{\"1\":{\"229\":1}}],[\"创建视图\",{\"1\":{\"229\":1,\"233\":1}}],[\"创建模型\",{\"1\":{\"229\":1}}],[\"创建实体服务\",{\"1\":{\"235\":1}}],[\"创建实体服务类\",{\"1\":{\"230\":1}}],[\"创建实体过滤器\",{\"1\":{\"234\":1}}],[\"创建实体观察者类\",{\"1\":{\"223\":1}}],[\"创建实现了上述类的实体访问者\",{\"1\":{\"228\":1}}],[\"创建实现了上述接口的实体类\",{\"1\":{\"219\":1,\"232\":1}}],[\"创建实现了\",{\"1\":{\"210\":2,\"211\":1,\"213\":1,\"218\":1,\"220\":1}}],[\"创建实现接口的实体类\",{\"1\":{\"206\":1,\"207\":2,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"224\":1,\"226\":1}}],[\"创建中介类\",{\"1\":{\"221\":1}}],[\"创建接口\",{\"1\":{\"220\":1}}],[\"创建命令调用类\",{\"1\":{\"218\":1}}],[\"创建不同类型的记录器\",{\"1\":{\"217\":1}}],[\"创建抽象的记录器类\",{\"1\":{\"217\":1}}],[\"创建桥接实现接口\",{\"1\":{\"210\":1}}],[\"创建\",{\"1\":{\"208\":1,\"212\":1,\"221\":1,\"222\":3,\"223\":2,\"224\":1,\"225\":1,\"226\":1,\"230\":1,\"234\":1}}],[\"创建的一个对象需要消耗的资源过多\",{\"1\":{\"208\":1}}],[\"创建扩展了上述类的实体类\",{\"1\":{\"225\":1,\"227\":1,\"228\":1}}],[\"创建扩展了上面抽象类的实体类\",{\"1\":{\"209\":1}}],[\"创建扩展了该记录器类的实体类\",{\"1\":{\"217\":1}}],[\"创建扩展了\",{\"1\":{\"207\":1,\"213\":1}}],[\"创建一个视图\",{\"1\":{\"229\":1}}],[\"创建一个抽象类\",{\"1\":{\"225\":1,\"227\":1}}],[\"创建一个表达式接口\",{\"1\":{\"219\":1}}],[\"创建一个请求类\",{\"1\":{\"218\":1}}],[\"创建一个命令接口\",{\"1\":{\"218\":1}}],[\"创建一个外观类\",{\"1\":{\"214\":1}}],[\"创建一个类\",{\"1\":{\"209\":1,\"211\":1}}],[\"创建一个实现了\",{\"1\":{\"209\":1}}],[\"创建一个\",{\"1\":{\"208\":1}}],[\"创建一个工厂创造器\",{\"1\":{\"207\":1}}],[\"创建一个工厂\",{\"1\":{\"206\":1,\"215\":1}}],[\"创建一个接口\",{\"1\":{\"206\":1,\"211\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"224\":1,\"226\":1}}],[\"创建类\",{\"1\":{\"191\":1}}],[\"创建对象\",{\"1\":{\"191\":1}}],[\"创建对象的最佳方式\",{\"1\":{\"188\":1}}],[\"创建和提供实例\",{\"1\":{\"188\":1}}],[\"创建型模式creational\",{\"0\":{\"182\":1}}],[\"创建网站\",{\"0\":{\"83\":1}}],[\"创作设计模式\",{\"0\":{\"182\":1}}],[\"熟练使用每一个设计模式\",{\"1\":{\"179\":1}}],[\"前者相当于抽象化\",{\"1\":{\"210\":1}}],[\"前者以cpu为中心\",{\"1\":{\"11\":1}}],[\"前端框架\",{\"0\":{\"294\":1}}],[\"前端工程化\",{\"0\":{\"293\":1}}],[\"前端基础\",{\"0\":{\"288\":1}}],[\"前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序\",{\"1\":{\"233\":1}}],[\"前端控制器\",{\"1\":{\"233\":1}}],[\"前端控制器模式\",{\"0\":{\"233\":1},\"1\":{\"185\":1}}],[\"前端开发\",{\"0\":{\"177\":1}}],[\"图像将无法从磁盘加载\",{\"1\":{\"216\":1}}],[\"图像将从磁盘加载\",{\"1\":{\"216\":1}}],[\"图\",{\"0\":{\"172\":1}}],[\"图形结构\",{\"1\":{\"161\":1}}],[\"堆\",{\"0\":{\"171\":1}}],[\"堆排序\",{\"1\":{\"148\":1}}],[\"宽搜\",{\"1\":{\"168\":1}}],[\"若各对象处理完毕\",{\"1\":{\"167\":1}}],[\"若优先级小于等于栈顶运算符时\",{\"1\":{\"167\":1}}],[\"若优先级大于栈顶运算符时\",{\"1\":{\"167\":1}}],[\"出栈\",{\"1\":{\"167\":1}}],[\"直到有对象处理它为止\",{\"1\":{\"217\":1}}],[\"直到该运算符大于栈顶运算符优先级为止\",{\"1\":{\"167\":1}}],[\"直到遇到左括号\",{\"1\":{\"167\":1}}],[\"直接丢一个实体就可以保存\",{\"1\":{\"227\":1}}],[\"直接访问会给使用者或者系统结构带来很多麻烦\",{\"1\":{\"216\":1}}],[\"直接返回在内存中已有的对象\",{\"1\":{\"215\":1}}],[\"直接输出\",{\"1\":{\"167\":1}}],[\"直接存储器方式\",{\"1\":{\"32\":1}}],[\"直接存储器传输\",{\"1\":{\"32\":1}}],[\"压入堆栈\",{\"1\":{\"167\":1}}],[\"深拷贝是通过实现\",{\"1\":{\"209\":1}}],[\"深搜\",{\"1\":{\"167\":1}}],[\"深度优先搜索\",{\"1\":{\"152\":1}}],[\"缩短\",{\"1\":{\"165\":1}}],[\"长度可增长\",{\"1\":{\"165\":1}}],[\"长度为零的线性表叫空表\",{\"1\":{\"165\":1}}],[\"长度往往与输入数据的规模n有关\",{\"1\":{\"143\":2}}],[\"或操作从高级的业务服务中分离出来\",{\"1\":{\"232\":1}}],[\"或标准模式\",{\"0\":{\"211\":1}}],[\"或者编辑\",{\"1\":{\"301\":1}}],[\"或者删除对应版本后再install一遍\",{\"1\":{\"286\":1}}],[\"或者两者都具备\",{\"1\":{\"241\":1}}],[\"或者跟踪请求\",{\"1\":{\"233\":1,\"234\":1}}],[\"或者是其他的存储机制\",{\"1\":{\"232\":1}}],[\"或者是改变实例变量的值\",{\"1\":{\"224\":1}}],[\"或者可以包含一个粗粒度对象\",{\"1\":{\"231\":1}}],[\"或者需要进程外的访问\",{\"1\":{\"216\":1}}],[\"或者某些操作需要安全控制\",{\"1\":{\"216\":1}}],[\"或者引用含有循环结构的时候\",{\"1\":{\"209\":1}}],[\"或者其他的静态方法\",{\"1\":{\"208\":1}}],[\"或\",{\"0\":{\"232\":1},\"1\":{\"165\":1,\"225\":1,\"230\":1,\"303\":2}}],[\"或域名\",{\"1\":{\"72\":1}}],[\"索引\",{\"1\":{\"165\":1}}],[\"索引存储结构\",{\"1\":{\"162\":1}}],[\"称为表目\",{\"1\":{\"165\":1}}],[\"称为存储器组件\",{\"1\":{\"26\":1}}],[\"简言之\",{\"1\":{\"239\":1}}],[\"简化了对象\",{\"1\":{\"217\":1}}],[\"简化客户端与之的接口\",{\"1\":{\"214\":1}}],[\"简称表\",{\"1\":{\"165\":1}}],[\"简单条件下可以用\",{\"1\":{\"499\":1}}],[\"简单的\",{\"1\":{\"236\":1}}],[\"简单单例\",{\"1\":{\"196\":1}}],[\"简单\",{\"1\":{\"161\":1}}],[\"简单示例\",{\"1\":{\"2\":1}}],[\"根据模式\",{\"1\":{\"228\":1}}],[\"根据矩阵元素的值的类型而定\",{\"1\":{\"163\":1}}],[\"根据数据结构的逻辑特性\",{\"1\":{\"160\":1}}],[\"矩阵\",{\"1\":{\"163\":1}}],[\"抽象不应该依赖细节\",{\"1\":{\"241\":1}}],[\"抽象约束\",{\"1\":{\"239\":1}}],[\"抽象出一个迭代器类来负责\",{\"1\":{\"220\":1}}],[\"抽象和实现的分离\",{\"1\":{\"210\":1}}],[\"抽象类依赖实现类\",{\"1\":{\"210\":1}}],[\"抽象产品\",{\"1\":{\"207\":1}}],[\"抽象工厂\",{\"1\":{\"207\":1}}],[\"抽象工厂模式\",{\"0\":{\"190\":1,\"207\":1},\"1\":{\"182\":1}}],[\"抽象数据结构\",{\"1\":{\"167\":1}}],[\"抽象数据类型\",{\"0\":{\"163\":1}}],[\"抽象\",{\"1\":{\"163\":1}}],[\"抽象运算\",{\"1\":{\"163\":1}}],[\"抽象好了可大大提高开发效率\",{\"1\":{\"163\":1}}],[\"散列\",{\"1\":{\"162\":1}}],[\"散列表\",{\"1\":{\"161\":1}}],[\"哈希\",{\"1\":{\"162\":1}}],[\"哈希表\",{\"1\":{\"148\":1}}],[\"树枝内部组合该接口\",{\"1\":{\"212\":2}}],[\"树枝和叶子实现统一接口\",{\"1\":{\"212\":1}}],[\"树\",{\"0\":{\"169\":1}}],[\"树形结构\",{\"1\":{\"161\":1,\"212\":1}}],[\"树的高度越低效率就越高\",{\"1\":{\"148\":1}}],[\"广义表\",{\"1\":{\"161\":1}}],[\"广度优先搜索\",{\"1\":{\"152\":1}}],[\"队列\",{\"0\":{\"168\":1},\"1\":{\"161\":1}}],[\"栈\",{\"0\":{\"167\":1},\"1\":{\"161\":1}}],[\"`hello\",{\"1\":{\"298\":1}}],[\"`gene`\",{\"1\":{\"298\":1}}],[\"```txt\",{\"1\":{\"211\":1,\"223\":1,\"224\":1,\"235\":1}}],[\"```java\",{\"1\":{\"211\":1,\"213\":1,\"222\":3,\"224\":2,\"225\":1,\"229\":1,\"232\":1,\"235\":2}}],[\"```js\",{\"1\":{\"167\":1}}],[\"```\",{\"1\":{\"163\":1,\"167\":1}}],[\"```s\",{\"1\":{\"163\":1}}],[\"`\",{\"1\":{\"160\":1,\"298\":1}}],[\"`b\",{\"1\":{\"160\":1}}],[\"逻辑结构\",{\"0\":{\"161\":1},\"1\":{\"163\":1}}],[\"逻辑结构表示\",{\"1\":{\"160\":1}}],[\"逻辑运算与移位操作\",{\"0\":{\"20\":1},\"1\":{\"3\":1}}],[\"数值的扩展\",{\"0\":{\"417\":1}}],[\"数值对象\",{\"1\":{\"232\":1}}],[\"数组的扩展\",{\"0\":{\"418\":1}}],[\"数组类型\",{\"1\":{\"298\":1}}],[\"数组结构中讨论的元素关系主要是指相邻关系或邻接关系\",{\"1\":{\"160\":1}}],[\"数字类型\",{\"1\":{\"298\":1}}],[\"数据流图\",{\"0\":{\"249\":1}}],[\"数据源可以是数据库\",{\"1\":{\"232\":1}}],[\"数据访问对象实体类\",{\"1\":{\"232\":1}}],[\"数据访问对象接口\",{\"1\":{\"232\":1}}],[\"数据访问对象模式\",{\"0\":{\"232\":1},\"1\":{\"185\":1}}],[\"数据对象集\",{\"1\":{\"163\":1}}],[\"数据对象在计算机中的组织方式\",{\"1\":{\"160\":1}}],[\"数据集合相关联的操作集\",{\"1\":{\"163\":1}}],[\"数据类型\",{\"0\":{\"298\":1,\"448\":1,\"452\":1},\"1\":{\"163\":1,\"327\":1}}],[\"数据运算高效实现\",{\"1\":{\"160\":1}}],[\"数据结构与算法javascript描述\",{\"1\":{\"331\":1}}],[\"数据结构\",{\"0\":{\"158\":1,\"451\":1},\"1\":{\"327\":1}}],[\"数据结构的价值\",{\"1\":{\"141\":1}}],[\"数据之类的\",{\"1\":{\"84\":1}}],[\"数据库的事务管理\",{\"1\":{\"222\":1}}],[\"数据库的数据池\",{\"1\":{\"215\":1}}],[\"数据库访问\",{\"1\":{\"189\":1,\"206\":1}}],[\"数据库\",{\"1\":{\"83\":1}}],[\"数据表示\",{\"0\":{\"67\":1}}],[\"数据缓冲寄存器\",{\"1\":{\"29\":1}}],[\"数据加工\",{\"1\":{\"29\":1}}],[\"数据信号线\",{\"1\":{\"26\":1}}],[\"数据中的小数点在计算机中有两种表示方法\",{\"1\":{\"14\":1}}],[\"数据字的最高位为符号位\",{\"1\":{\"14\":1}}],[\"数据往往使用十进制或十六进制表示\",{\"1\":{\"13\":1}}],[\"数据包括数值型数据和非数值型数据\",{\"1\":{\"12\":1}}],[\"数据直接进入cpu进行处理\",{\"1\":{\"11\":1}}],[\"数据处理\",{\"1\":{\"6\":1}}],[\"数据校验码\",{\"0\":{\"17\":1},\"1\":{\"3\":1}}],[\"映射到计算机中的存储结构\",{\"1\":{\"160\":1}}],[\"差不多的\",{\"1\":{\"160\":1}}],[\"跟算法的巧妙程度有关系\",{\"1\":{\"160\":1}}],[\"跟空间的利用效率有关\",{\"1\":{\"160\":1}}],[\"跟数据的组织方式是直接相关的\",{\"1\":{\"160\":1}}],[\"跟普通的输入文字是一样的\",{\"1\":{\"99\":1}}],[\"也不会占据文档空间\",{\"1\":{\"400\":1}}],[\"也不希望在增加新操作时修改这些类\",{\"1\":{\"228\":1}}],[\"也有精华的地方\",{\"1\":{\"292\":1}}],[\"也能管理依赖对象的生命周期\",{\"1\":{\"231\":1}}],[\"也就是说\",{\"1\":{\"224\":1}}],[\"也就是基本算法设计方法\",{\"1\":{\"159\":1}}],[\"也可以是基于桌面的应用程序\",{\"1\":{\"233\":1}}],[\"也可以是\",{\"1\":{\"232\":1}}],[\"也可以用于消除\",{\"1\":{\"224\":1}}],[\"也可以用链表\",{\"1\":{\"167\":1}}],[\"也可以考虑使用命令模式\",{\"1\":{\"218\":1}}],[\"也可以去代售点\",{\"1\":{\"216\":1}}],[\"也很少用\",{\"1\":{\"208\":1}}],[\"也是一种受限制的线性表\",{\"1\":{\"168\":1}}],[\"也包括一些复制\",{\"1\":{\"98\":1}}],[\"背景及目标\",{\"0\":{\"159\":1}}],[\"那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为\",{\"1\":{\"226\":1}}],[\"那么可能就值得将该问题的各个实例表述为一个简单语言中的句子\",{\"1\":{\"219\":1}}],[\"那么它会把相同的请求传给下一个接收者\",{\"1\":{\"217\":1}}],[\"那么这个时候实例化\",{\"1\":{\"208\":1}}],[\"那么\",{\"1\":{\"208\":1}}],[\"那么形式表示的规则\",{\"1\":{\"156\":1}}],[\"那x就是我们要查找的排名第k位的元素了\",{\"1\":{\"148\":1}}],[\"表征程序性知识的最小单位\",{\"1\":{\"156\":1}}],[\"表示方法没有返回值\",{\"1\":{\"298\":1}}],[\"表示层代码可以是\",{\"1\":{\"230\":1}}],[\"表示\",{\"1\":{\"14\":2}}],[\"表示进制数中第i位的位权\",{\"1\":{\"13\":1}}],[\"巴科斯范式\",{\"1\":{\"156\":1}}],[\"汇编语言或机器语言程序\",{\"1\":{\"156\":1}}],[\"汇编语言层\",{\"1\":{\"10\":1}}],[\"把使用transform的盒子宽高改为奇数\",{\"1\":{\"315\":1}}],[\"把学生详细信息输出到控制台\",{\"1\":{\"229\":1}}],[\"把它们一个个封装起来\",{\"1\":{\"226\":1}}],[\"把在元素之间游走的责任交给迭代器\",{\"1\":{\"220\":1}}],[\"把高翠兰的外貌抽象出来\",{\"1\":{\"216\":1}}],[\"把这种多角度分类分离出来\",{\"1\":{\"210\":1}}],[\"把一种高级语言程序等价地转换成另一种低级语言程序\",{\"1\":{\"156\":1}}],[\"把某一种语言程序\",{\"1\":{\"156\":1}}],[\"源语言程序\",{\"1\":{\"156\":1}}],[\"翻译程序\",{\"1\":{\"156\":1}}],[\"引入的\",{\"1\":{\"462\":1}}],[\"引用数据类型\",{\"0\":{\"455\":1}}],[\"引言\",{\"0\":{\"156\":1}}],[\"引号里的内容\",{\"1\":{\"99\":2}}],[\"目标对象\",{\"1\":{\"223\":1}}],[\"目标\",{\"1\":{\"179\":1}}],[\"目标程序\",{\"1\":{\"156\":1}}],[\"目标代码生成\",{\"1\":{\"155\":1}}],[\"目录内没有文档\",{\"1\":{\"85\":1}}],[\"目录名删除目录及子目录\",{\"1\":{\"85\":1}}],[\"目录名\",{\"1\":{\"85\":1}}],[\"优秀的扩展性\",{\"1\":{\"228\":1}}],[\"优秀的扩展能力\",{\"1\":{\"210\":1}}],[\"优点\",{\"1\":{\"187\":1,\"188\":1,\"189\":1,\"206\":1,\"207\":1,\"208\":3,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"227\":1,\"228\":1}}],[\"优先使用对象组合而不是继承\",{\"1\":{\"180\":1}}],[\"优化\",{\"1\":{\"155\":1}}],[\"优缺点\",{\"1\":{\"2\":1}}],[\"语句\",{\"0\":{\"450\":1}}],[\"语义化标签\",{\"0\":{\"349\":1}}],[\"语义分析与中间代码产生\",{\"1\":{\"155\":1}}],[\"语言精髓与编程实践\",{\"1\":{\"333\":1}}],[\"语言扩展\",{\"0\":{\"271\":1}}],[\"语法\",{\"0\":{\"468\":1},\"1\":{\"327\":1}}],[\"语法分析\",{\"1\":{\"155\":1}}],[\"课程内容主要是原理性质\",{\"1\":{\"155\":1}}],[\"滑动窗口\",{\"0\":{\"153\":1}}],[\"描述\",{\"1\":{\"208\":6}}],[\"描述算法的常用工具\",{\"1\":{\"152\":1}}],[\"描述应不依赖于任何一种计算机语言以及具体实现\",{\"1\":{\"141\":1}}],[\"搜索算法\",{\"0\":{\"152\":1}}],[\"归并排序\",{\"1\":{\"148\":1}}],[\"只能嵌套内联元素\",{\"1\":{\"392\":1}}],[\"只能存放某一种这样的衣服\",{\"1\":{\"207\":1}}],[\"只与你的直接朋友交谈\",{\"1\":{\"244\":1}}],[\"只需要改变对象状态即可改变对象的行为\",{\"1\":{\"224\":1}}],[\"只让接待人员来处理\",{\"1\":{\"214\":1}}],[\"只有当派生类可以替换掉基类\",{\"1\":{\"240\":1}}],[\"只有设置\",{\"1\":{\"236\":1}}],[\"只有在建筑的后期才有加壁橱加栅栏等差异\",{\"1\":{\"227\":1}}],[\"只有在要明确实现\",{\"1\":{\"208\":1}}],[\"只有一个\",{\"1\":{\"218\":1}}],[\"只有显示通过调用\",{\"1\":{\"208\":1}}],[\"只要扩展一个工厂类就可以\",{\"1\":{\"189\":1,\"206\":1}}],[\"只要知道其名称就可以了\",{\"1\":{\"189\":1,\"206\":1}}],[\"只描述数据对象集\",{\"1\":{\"163\":1}}],[\"只是想找排名第k个的元素\",{\"1\":{\"148\":1}}],[\"只读存储器存储元\",{\"1\":{\"26\":1}}],[\"只读存储器\",{\"1\":{\"24\":1}}],[\"快速地生成和原型对象一样的实例\",{\"1\":{\"209\":1}}],[\"快速选择算法\",{\"1\":{\"148\":1}}],[\"快速排序\",{\"1\":{\"148\":1}}],[\"快速排序算法\",{\"0\":{\"148\":1}}],[\"快排优化\",{\"1\":{\"148\":1}}],[\"联想到二叉树\",{\"1\":{\"148\":1}}],[\"第\",{\"1\":{\"208\":1,\"331\":1,\"332\":1,\"333\":1}}],[\"第一次调用才初始化\",{\"1\":{\"208\":1}}],[\"第一次轮n次\",{\"1\":{\"148\":1}}],[\"第二次轮n\",{\"1\":{\"148\":1}}],[\"大部分内容放到了es6\",{\"1\":{\"408\":1}}],[\"大大减少对象的创建\",{\"1\":{\"215\":1}}],[\"大家可以随手拿来使用\",{\"1\":{\"209\":1}}],[\"大于基准值放右边\",{\"1\":{\"148\":1}}],[\"大规模\",{\"1\":{\"5\":1}}],[\"小于基准值放左边\",{\"1\":{\"148\":1}}],[\"没有依赖抽象\",{\"1\":{\"228\":1}}],[\"没有达到\",{\"1\":{\"208\":1}}],[\"没有加锁\",{\"1\":{\"208\":1}}],[\"没有接口\",{\"1\":{\"208\":1}}],[\"没法进入共产主义了\",{\"1\":{\"207\":1}}],[\"没找到\",{\"1\":{\"147\":1}}],[\"没必要深入去了解学习\",{\"1\":{\"80\":1}}],[\"取消原来的继承关系\",{\"1\":{\"240\":1}}],[\"取药\",{\"1\":{\"214\":1}}],[\"取中间值\",{\"1\":{\"147\":1}}],[\"取指令\",{\"1\":{\"29\":1}}],[\"排序算法\",{\"0\":{\"146\":1}}],[\"的优点\",{\"1\":{\"302\":2}}],[\"的地方\",{\"1\":{\"292\":1}}],[\"的官网\",{\"1\":{\"237\":1}}],[\"的代价很高\",{\"1\":{\"235\":1}}],[\"的应用程序\",{\"1\":{\"233\":1}}],[\"的参与者\",{\"1\":{\"231\":1}}],[\"的组成部分\",{\"1\":{\"228\":1}}],[\"的模板方法\",{\"1\":{\"227\":1}}],[\"的支持\",{\"1\":{\"227\":1}}],[\"的支持并不太好\",{\"1\":{\"224\":1}}],[\"的状态发生改变\",{\"1\":{\"223\":1}}],[\"的中介者\",{\"1\":{\"221\":1}}],[\"的拦截器\",{\"1\":{\"217\":1}}],[\"的处理\",{\"1\":{\"217\":1}}],[\"的三层开发模式\",{\"1\":{\"214\":1}}],[\"的层次结构\",{\"1\":{\"212\":1}}],[\"的用法\",{\"1\":{\"210\":1}}],[\"的方法创建一个对象\",{\"1\":{\"209\":1}}],[\"的性能对应用程序很关键\",{\"1\":{\"208\":1}}],[\"的性能对应用程序不是很关键\",{\"1\":{\"208\":1}}],[\"的效果\",{\"1\":{\"208\":1}}],[\"的一个对象\",{\"1\":{\"208\":1}}],[\"的工厂类\",{\"1\":{\"207\":1}}],[\"的思想去理解\",{\"1\":{\"207\":1}}],[\"的对象\",{\"1\":{\"206\":3,\"207\":6}}],[\"的创建工作\",{\"1\":{\"188\":1}}],[\"的\",{\"1\":{\"165\":1,\"187\":1,\"206\":3,\"207\":6,\"217\":1,\"407\":1}}],[\"的程序\",{\"1\":{\"156\":2}}],[\"的最大值\",{\"1\":{\"145\":1}}],[\"的数据称为机器数\",{\"1\":{\"14\":1}}],[\"的数据称为真值\",{\"1\":{\"14\":1}}],[\"∑\",{\"1\":{\"145\":1}}],[\"求函数f\",{\"1\":{\"145\":1}}],[\"最少知识\",{\"0\":{\"491\":1}}],[\"最少知道原则是指\",{\"1\":{\"244\":1}}],[\"最佳实践\",{\"0\":{\"344\":1}}],[\"最新版本\",{\"1\":{\"258\":1}}],[\"最难及最挑战学习能力的课程之一\",{\"1\":{\"155\":1}}],[\"最坏\",{\"1\":{\"147\":1}}],[\"最坏情况复杂度tworst\",{\"1\":{\"143\":1}}],[\"最好\",{\"1\":{\"147\":1}}],[\"最大子列和问题\",{\"0\":{\"145\":1}}],[\"复杂情况下不要用\",{\"1\":{\"499\":1}}],[\"复杂的方法\",{\"1\":{\"223\":1,\"227\":1}}],[\"复杂\",{\"1\":{\"161\":1}}],[\"复杂度的渐进表示\",{\"0\":{\"144\":1}}],[\"复制整行\",{\"1\":{\"99\":1}}],[\"复制一行\",{\"1\":{\"99\":1}}],[\"复制选中的内容\",{\"1\":{\"99\":1}}],[\"复制文件\",{\"1\":{\"85\":1}}],[\"写成的程序在执行时耗费时间的长度\",{\"1\":{\"143\":1}}],[\"写成的程序在执行时占用存储单元的长度\",{\"1\":{\"143\":1}}],[\"好的算法\",{\"0\":{\"143\":1}}],[\"将部分功能改善的一小部分发布为es\",{\"1\":{\"408\":1}}],[\"将该语言称为ecmascript\",{\"1\":{\"407\":1}}],[\"将该语言提交给了ecma\",{\"1\":{\"407\":1}}],[\"将之前的remove掉\",{\"1\":{\"252\":1}}],[\"将自身引用传入访问者\",{\"1\":{\"228\":1}}],[\"将这些通用算法抽象出来\",{\"1\":{\"227\":1}}],[\"将这些算法封装成一个一个的类\",{\"1\":{\"226\":1}}],[\"将这些对象连接成一条链\",{\"1\":{\"217\":1}}],[\"将所有与某个状态有关的行为放到一个类中\",{\"1\":{\"224\":1}}],[\"将所有的观察者都通知到会花费很多时间\",{\"1\":{\"223\":1}}],[\"将各种具体的状态类抽象出来\",{\"1\":{\"224\":1}}],[\"将上述网状结构分离为星型结构\",{\"1\":{\"221\":1}}],[\"将一些已经定好的方法封装起来\",{\"1\":{\"227\":1}}],[\"将一对多转化成了一对一\",{\"1\":{\"221\":1}}],[\"将一组行为抽象为对象\",{\"1\":{\"218\":1}}],[\"将一个请求封装成一个对象\",{\"1\":{\"218\":1}}],[\"将一个复杂的构建与其表示相分离\",{\"1\":{\"188\":1}}],[\"将一个类插入另一个类系中\",{\"1\":{\"187\":1}}],[\"将一个类的接口转换成客户希望的另外一个接口\",{\"1\":{\"187\":1}}],[\"将具体功能职责划分\",{\"1\":{\"213\":1}}],[\"将对象组合成树形结构以表示\",{\"1\":{\"212\":1}}],[\"将抽象部分与实现部分分离\",{\"1\":{\"210\":1}}],[\"将变与不变分离开\",{\"1\":{\"188\":1}}],[\"将栈顶运算符弹出并输出\",{\"1\":{\"167\":1}}],[\"将栈顶的运算符弹出并输出\",{\"1\":{\"167\":1}}],[\"将未排序部分的最小元换到有序部分的最后位置\",{\"1\":{\"142\":1}}],[\"将其拖入废纸篓中清空即可\",{\"1\":{\"92\":1}}],[\"从babel\",{\"1\":{\"410\":1}}],[\"从来都不会出现的值\",{\"1\":{\"298\":1}}],[\"从数据库中检索学生名单\",{\"1\":{\"232\":1,\"236\":1}}],[\"从数据库获取实体类\",{\"1\":{\"209\":1}}],[\"从数据可获取学生记录\",{\"1\":{\"229\":1}}],[\"从而减少系统中对象的个数\",{\"1\":{\"224\":1}}],[\"从而使其耦合松散\",{\"1\":{\"221\":1}}],[\"从而使您可以用不同的请求对客户进行参数化\",{\"1\":{\"218\":1}}],[\"从而使得客户程序与复杂元素的内部结构解耦\",{\"1\":{\"212\":1}}],[\"从而实例化\",{\"1\":{\"208\":1}}],[\"从\",{\"1\":{\"208\":1}}],[\"从目标系统的不同角度出发\",{\"1\":{\"205\":1}}],[\"从头到尾读取中缀表达式的每个对象\",{\"1\":{\"167\":1}}],[\"从list\",{\"1\":{\"142\":1}}],[\"从finder进入\",{\"1\":{\"92\":1}}],[\"<style\",{\"1\":{\"501\":2}}],[\"<style>插入<head>的顺序\",{\"1\":{\"501\":1}}],[\"<style>\",{\"1\":{\"501\":1}}],[\"<html\",{\"1\":{\"340\":1}}],[\"<div>111<\",{\"1\":{\"305\":1}}],[\"<=\",{\"1\":{\"143\":1,\"147\":1,\"148\":1,\"217\":1}}],[\"<\",{\"1\":{\"142\":1,\"147\":1,\"148\":4,\"191\":2,\"215\":1,\"220\":1,\"225\":1,\"228\":1,\"231\":1,\"339\":2,\"413\":3}}],[\"示例\",{\"1\":{\"142\":1}}],[\"确定性\",{\"1\":{\"142\":1}}],[\"再重新添加新的\",{\"1\":{\"252\":1}}],[\"再比较新的栈顶运算符\",{\"1\":{\"167\":1}}],[\"再高一层就是通用算法设计\",{\"1\":{\"159\":1}}],[\"再去学习复杂度算法这些\",{\"1\":{\"141\":1}}],[\"再与存储器进行交流\",{\"1\":{\"26\":1}}],[\"理论要与实践相结合\",{\"1\":{\"141\":1}}],[\"而javascript算是ecmascript的一种实现\",{\"1\":{\"407\":1}}],[\"而基类与子类的继承关系就是抽象化的具体实现\",{\"1\":{\"240\":1}}],[\"而派生类也能够在基类的基础上增加新的行为\",{\"1\":{\"240\":1}}],[\"而将相同的可变因素封装在相同的具体实现类中\",{\"1\":{\"239\":1}}],[\"而将一些步骤延迟到子类中\",{\"1\":{\"227\":1}}],[\"而需要避免让这些操作\",{\"1\":{\"228\":2}}],[\"而区分它们的只是他们直接的行为\",{\"1\":{\"226\":1}}],[\"而状态模式的接口中有一个或者多个方法\",{\"1\":{\"224\":1}}],[\"而仅仅只是知道观察目标发生了变化\",{\"1\":{\"223\":1}}],[\"而又不想生成太多的子类\",{\"1\":{\"221\":1}}],[\"而又无须暴露该对象的内部表示\",{\"1\":{\"220\":1}}],[\"而模型层的类会随着不同的应用有不同的模型类\",{\"1\":{\"218\":1}}],[\"而代理模式是为了加以控制\",{\"1\":{\"216\":1}}],[\"而代理模式不能改变所代理类的接口\",{\"1\":{\"216\":1}}],[\"而这种方式是\",{\"1\":{\"208\":1}}],[\"而每一件成套的衣服又包括具体的上衣\",{\"1\":{\"207\":1}}],[\"而系统只消费其中某一族的产品\",{\"1\":{\"207\":1}}],[\"而无需指定它们具体的类\",{\"1\":{\"207\":1}}],[\"而简单对象\",{\"1\":{\"189\":1,\"206\":1}}],[\"而不是抛出一个错误\",{\"1\":{\"452\":1}}],[\"而不是某一个巨大的条件语句块\",{\"1\":{\"224\":1}}],[\"而不是聚合对象\",{\"1\":{\"220\":1}}],[\"而不是接口\",{\"1\":{\"212\":1}}],[\"而不是算法本身\",{\"1\":{\"141\":1}}],[\"而不关心外面怎么样来实例化\",{\"1\":{\"208\":1}}],[\"而不用去管这辆汽车是怎么做出来的\",{\"1\":{\"189\":1,\"206\":1}}],[\"而其组合是经常变化的\",{\"1\":{\"188\":1}}],[\"而其组合经常变化的时候\",{\"1\":{\"188\":1}}],[\"而是反应一个不做任何动作的关系\",{\"1\":{\"225\":1}}],[\"而是解决正在服役的项目的问题\",{\"1\":{\"187\":1}}],[\"而是直接对系统进行重构\",{\"1\":{\"187\":1}}],[\"而在\",{\"1\":{\"187\":1}}],[\"而此类的接口不符合系统的需要\",{\"1\":{\"187\":1}}],[\"而新环境要求的接口是现对象不能满足的\",{\"1\":{\"187\":1}}],[\"而且状态不超过\",{\"1\":{\"224\":1}}],[\"而且修改某个状态类的行为也需修改对应类的源代码\",{\"1\":{\"224\":1}}],[\"而且\",{\"1\":{\"224\":1}}],[\"而且要考虑到易用和低耦合\",{\"1\":{\"223\":1}}],[\"而且要做得漂亮\",{\"1\":{\"173\":1}}],[\"而且每一次保存都会消耗一定的内存\",{\"1\":{\"222\":1}}],[\"而且可以独立地改变它们之间的交互\",{\"1\":{\"221\":1}}],[\"而且在进行代码调试时不太方便\",{\"1\":{\"217\":1}}],[\"而且外部状态具有固有化的性质\",{\"1\":{\"215\":1}}],[\"而且各个调用者可能都需要修改其值时\",{\"1\":{\"209\":1}}],[\"而且还自动支持序列化机制\",{\"1\":{\"208\":1}}],[\"而且还有一些新的特性在里面\",{\"1\":{\"95\":1}}],[\"而且对其作了进一步的发展\",{\"1\":{\"205\":1}}],[\"而且目标类必须是抽象类\",{\"1\":{\"187\":1}}],[\"有时会出现\",{\"1\":{\"301\":1}}],[\"有时候面临着\",{\"1\":{\"188\":1}}],[\"有让人吐槽\",{\"1\":{\"292\":1}}],[\"有一些通用的方法\",{\"1\":{\"227\":1}}],[\"有一点需要注意的地方就是复杂对象适合使用工厂模式\",{\"1\":{\"189\":1,\"206\":1}}],[\"有多个子类共有的方法\",{\"1\":{\"223\":1,\"227\":1}}],[\"有多个对象可以处理同一个请求\",{\"1\":{\"217\":1}}],[\"有碍于除错\",{\"1\":{\"217\":1}}],[\"有些代理模式的实现非常复杂\",{\"1\":{\"216\":1}}],[\"有些对象由于某些原因\",{\"1\":{\"216\":1}}],[\"有些情况下不需要输入\",{\"1\":{\"141\":1}}],[\"有可能会造成内存溢出\",{\"1\":{\"215\":1}}],[\"有两点需求\",{\"1\":{\"191\":1}}],[\"有动机地修改一个正常运行的系统的接口\",{\"1\":{\"187\":1}}],[\"有定义数据结构就是adt的物理实现\",{\"1\":{\"163\":1}}],[\"有输出\",{\"1\":{\"142\":1}}],[\"有输入\",{\"1\":{\"142\":1}}],[\"有穷性\",{\"1\":{\"142\":1}}],[\"有充分明确的目标\",{\"1\":{\"141\":1}}],[\"有复制的功能\",{\"1\":{\"99\":1}}],[\"接待员\",{\"1\":{\"214\":1}}],[\"接下来介绍的几种实现方式都支持多线程\",{\"1\":{\"208\":1}}],[\"接受一些输入\",{\"1\":{\"141\":1}}],[\"接口与面向接口编程\",{\"0\":{\"498\":1}}],[\"接口与输入输出\",{\"0\":{\"30\":1},\"1\":{\"3\":1}}],[\"接口文档的集成\",{\"1\":{\"284\":1}}],[\"接口逻辑具体开发\",{\"1\":{\"284\":1}}],[\"接口隔离原则\",{\"0\":{\"243\":1}}],[\"接口创建抽象类\",{\"1\":{\"210\":1}}],[\"接口是负责创建一个相关对象的工厂\",{\"1\":{\"207\":1}}],[\"接口的内部类\",{\"1\":{\"220\":1}}],[\"接口的抽象装饰类\",{\"1\":{\"213\":1}}],[\"接口的抽象类\",{\"1\":{\"209\":1}}],[\"接口的实体类\",{\"1\":{\"210\":1,\"211\":1,\"218\":1,\"220\":1}}],[\"接口的实体桥接实现类\",{\"1\":{\"210\":1}}],[\"接口的实现\",{\"1\":{\"187\":1}}],[\"接口的功能与组成\",{\"1\":{\"31\":1}}],[\"接口转化为\",{\"1\":{\"187\":1}}],[\"接口\",{\"0\":{\"300\":1},\"1\":{\"187\":4,\"209\":1,\"230\":1}}],[\"接口概述\",{\"0\":{\"31\":1},\"1\":{\"3\":1}}],[\"算术表达式包括操作数\",{\"1\":{\"212\":1}}],[\"算术逻辑单元\",{\"1\":{\"29\":1}}],[\"算法可以自由切换\",{\"1\":{\"226\":1}}],[\"算法与数据结构始终是一起的\",{\"1\":{\"160\":1}}],[\"算法思维\",{\"1\":{\"141\":1}}],[\"算法\",{\"0\":{\"140\":1}}],[\"=studentbusinessobject\",{\"1\":{\"236\":1}}],[\"=studentdao\",{\"1\":{\"232\":1}}],[\"=null\",{\"1\":{\"217\":1}}],[\"===\",{\"1\":{\"191\":1,\"301\":1,\"303\":1,\"456\":1}}],[\"==\",{\"1\":{\"148\":1,\"191\":1,\"206\":1,\"207\":2,\"208\":4,\"215\":1,\"216\":1,\"303\":2}}],[\"=\",{\"1\":{\"120\":1,\"142\":2,\"145\":1,\"147\":8,\"148\":13,\"160\":1,\"163\":1,\"165\":3,\"191\":31,\"196\":1,\"206\":4,\"207\":8,\"208\":8,\"209\":14,\"210\":6,\"211\":19,\"212\":11,\"213\":4,\"214\":4,\"215\":9,\"216\":4,\"217\":11,\"218\":9,\"219\":15,\"220\":4,\"221\":4,\"222\":6,\"223\":6,\"224\":5,\"225\":7,\"226\":10,\"227\":2,\"228\":3,\"229\":8,\"230\":6,\"231\":8,\"232\":8,\"233\":4,\"234\":6,\"235\":12,\"236\":8,\"298\":25,\"301\":6,\"303\":1,\"364\":1,\"378\":1,\"413\":11}}],[\"=>\",{\"1\":{\"24\":1,\"148\":1,\"191\":6,\"298\":1,\"301\":1}}],[\"让多个对象都有可能接收请求\",{\"1\":{\"217\":1}}],[\"让患者或患者家属觉得很复杂\",{\"1\":{\"214\":1}}],[\"让它们独立变化\",{\"1\":{\"210\":1}}],[\"让构造函数为\",{\"1\":{\"208\":1}}],[\"让其子类实现工厂接口\",{\"1\":{\"189\":1,\"206\":1}}],[\"让其子类自己决定实例化哪一个工厂类\",{\"1\":{\"189\":1,\"206\":1}}],[\"让\",{\"1\":{\"99\":1}}],[\"让光标所在的行居屏幕最下一行\",{\"1\":{\"99\":1}}],[\"让光标所在的行居屏幕最上一行\",{\"1\":{\"99\":1}}],[\"让光标所在的行居屏幕中央\",{\"1\":{\"99\":1}}],[\"替换第一行\",{\"1\":{\"99\":1}}],[\"替换全局所有\",{\"1\":{\"99\":1}}],[\"替换当前光标到单词末尾\",{\"1\":{\"99\":1}}],[\"打篮球的时候运动员可以有正常状态\",{\"1\":{\"224\":1}}],[\"打游戏时的存档\",{\"1\":{\"222\":1}}],[\"打印出下标\",{\"1\":{\"298\":1}}],[\"打印该组织的所有员工\",{\"1\":{\"212\":1}}],[\"打印机\",{\"1\":{\"36\":1}}],[\"打开文件\",{\"1\":{\"99\":1}}],[\"qt5\",{\"1\":{\"277\":1}}],[\"qt5中文网\",{\"1\":{\"277\":1}}],[\"queries\",{\"1\":{\"355\":1}}],[\"quantity\",{\"1\":{\"218\":7}}],[\"quicksort\",{\"1\":{\"148\":4}}],[\"qq\",{\"1\":{\"207\":1}}],[\"q可以退出\",{\"1\":{\"99\":1}}],[\"q\",{\"1\":{\"99\":1}}],[\"保护\",{\"1\":{\"216\":1}}],[\"保证高度的协作\",{\"1\":{\"223\":1}}],[\"保证一个类仅有一个实例\",{\"1\":{\"208\":1}}],[\"保证程序中指令执行顺序的正确\",{\"1\":{\"29\":1}}],[\"保存一个对象的某个状态\",{\"1\":{\"222\":1}}],[\"保存\",{\"1\":{\"99\":1}}],[\"保存并退出\",{\"1\":{\"99\":1}}],[\"跳到第几页\",{\"1\":{\"99\":1}}],[\"跳到第几行\",{\"1\":{\"99\":1}}],[\"跳到下一个相同word处\",{\"1\":{\"99\":1}}],[\"跳到括号那里\",{\"1\":{\"99\":1}}],[\"这会启用字距调整和可选的连字\",{\"1\":{\"315\":1}}],[\"这就是访问者模式\",{\"1\":{\"228\":1}}],[\"这就是一个顶层的逻辑骨架\",{\"1\":{\"227\":1}}],[\"这在一定程度上增加了系统的复杂性\",{\"1\":{\"220\":1}}],[\"这样可以在很大程度上提高应用程序的性能\",{\"1\":{\"235\":1}}],[\"这样可以在以后将对象恢复到原先保存的状态\",{\"1\":{\"222\":1}}],[\"这样访问者对象就可以处理元素对象上的操作\",{\"1\":{\"228\":1}}],[\"这样的\",{\"1\":{\"225\":1}}],[\"这样做的目的就是为了允许用户取消不确定或者错误的操作\",{\"1\":{\"222\":1}}],[\"这样势必会导致系统的结构变得很复杂\",{\"1\":{\"221\":1}}],[\"这样既可以做到不暴露集合的内部结构\",{\"1\":{\"220\":1}}],[\"这样就可以构建一个解释器\",{\"1\":{\"219\":1}}],[\"这样该类就不会被实例化\",{\"1\":{\"208\":1}}],[\"这一层将调用顺序\",{\"1\":{\"214\":1}}],[\"这两种类型的类可被结构化改变而互不影响\",{\"1\":{\"210\":1}}],[\"这对于全新的类不是很难\",{\"1\":{\"209\":1}}],[\"这种处理方法不直观\",{\"1\":{\"298\":1}}],[\"这种类型的设计模式属于行为型模式\",{\"1\":{\"224\":1,\"227\":1,\"228\":1}}],[\"这种类型的设计模式属于结构型模式\",{\"1\":{\"210\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1}}],[\"这种无法抵御变化的紧耦合是不合适的\",{\"1\":{\"218\":1}}],[\"这种无法抵御变化的紧耦合的设计就不太合适\",{\"1\":{\"218\":1}}],[\"这种模式用于应用程序的分层开发\",{\"1\":{\"229\":1}}],[\"这种模式用于顺序访问集合对象的元素\",{\"1\":{\"220\":1}}],[\"这种模式提供了一个中介类\",{\"1\":{\"221\":1}}],[\"这种模式被用在\",{\"1\":{\"219\":1}}],[\"这种模式实现了一个表达式接口\",{\"1\":{\"219\":1}}],[\"这种模式给予请求的类型\",{\"1\":{\"217\":1}}],[\"这种模式创建了一个装饰类\",{\"1\":{\"213\":1}}],[\"这种模式创建了一个包含自己对象组的类\",{\"1\":{\"212\":1}}],[\"这种模式允许开发人员使用不同的标准来过滤一组对象\",{\"1\":{\"211\":1}}],[\"这种模式涉及到一个作为桥接的接口\",{\"1\":{\"210\":1}}],[\"这种模式涉及到一个单一的类\",{\"1\":{\"208\":1,\"214\":1}}],[\"这种模式是实现了一个原型接口\",{\"1\":{\"209\":1}}],[\"这种实现方式还没有被广泛采用\",{\"1\":{\"208\":1}}],[\"这种实现最大的问题就是不支持多线程\",{\"1\":{\"208\":1}}],[\"这种方式是\",{\"1\":{\"208\":1}}],[\"这种方式是最基本的实现方式\",{\"1\":{\"208\":1}}],[\"这种方式相比第\",{\"1\":{\"208\":1}}],[\"这种方式同样利用了\",{\"1\":{\"208\":1}}],[\"这种方式只适用于静态域的情况\",{\"1\":{\"208\":1}}],[\"这种方式能达到双检锁方式一样的功效\",{\"1\":{\"208\":1}}],[\"这种方式采用双锁机制\",{\"1\":{\"208\":1}}],[\"这种方式比较常用\",{\"1\":{\"208\":1}}],[\"这种方式具备很好的\",{\"1\":{\"208\":1}}],[\"这种方式\",{\"1\":{\"208\":1}}],[\"这并不是什么好事\",{\"1\":{\"189\":1,\"206\":1}}],[\"这时会出现函数重载的情况\",{\"1\":{\"301\":1}}],[\"这时画\",{\"1\":{\"213\":1}}],[\"这时候初始化\",{\"1\":{\"208\":1}}],[\"这时应该考虑使用适配器模式\",{\"1\":{\"187\":1}}],[\"这时就需要适配器模式\",{\"1\":{\"187\":1}}],[\"这个原则的意思是\",{\"1\":{\"242\":1}}],[\"这个原则是开闭原则的基础\",{\"1\":{\"241\":1}}],[\"这个乌龟就是观察者\",{\"1\":{\"223\":1}}],[\"这个解释器使用该标识来解释语言中的句子\",{\"1\":{\"219\":1}}],[\"这个接口使得这一子系统更加容易使用\",{\"1\":{\"214\":1}}],[\"这个资源包括数据\",{\"1\":{\"209\":1}}],[\"这个时候\",{\"1\":{\"208\":1}}],[\"这个时候ctrl\",{\"1\":{\"99\":1}}],[\"这个类提供了一种访问其唯一的对象的方式\",{\"1\":{\"208\":1}}],[\"这个复杂对象的各个部分经常面临着剧烈的变化\",{\"1\":{\"188\":1}}],[\"这个是重点\",{\"1\":{\"163\":1}}],[\"这里后续都用es代替\",{\"0\":{\"407\":1}}],[\"这里的elementtype\",{\"1\":{\"163\":1}}],[\"这里的n是指行数\",{\"1\":{\"99\":1}}],[\"这里\",{\"1\":{\"99\":1}}],[\"这些行为就只好使用多重的条件选择语句来实现\",{\"1\":{\"226\":1}}],[\"这些类必须有一个工厂对象加以控制\",{\"1\":{\"215\":1}}],[\"这些对象的类\",{\"1\":{\"228\":2}}],[\"这些对象的状态大部分可以外部化\",{\"1\":{\"215\":1}}],[\"这些对象是不可分辨的\",{\"1\":{\"215\":1}}],[\"这些对象可以按照内蕴状态分为很多组\",{\"1\":{\"215\":1}}],[\"这些对象消耗大量内存\",{\"1\":{\"215\":1}}],[\"这些具体的上衣其实也都是上衣\",{\"1\":{\"207\":1}}],[\"这些也都是成套的\",{\"1\":{\"207\":1}}],[\"这些源类不一定有一致的接口\",{\"1\":{\"187\":1}}],[\"这些结点可能是处理器\",{\"1\":{\"50\":1}}],[\"这些个电路排成矩阵\",{\"1\":{\"26\":1}}],[\"全局范围内有效\",{\"1\":{\"413\":1}}],[\"全部删除\",{\"1\":{\"99\":1}}],[\"全部复制\",{\"1\":{\"99\":1}}],[\"全选操作\",{\"1\":{\"99\":1}}],[\"包中的可执行文件的工具\",{\"1\":{\"260\":1}}],[\"包管理和分发工具\",{\"1\":{\"257\":1}}],[\"包含了\",{\"1\":{\"232\":1}}],[\"包含解释器之外的一些全局信息\",{\"1\":{\"219\":1}}],[\"包含括号\",{\"1\":{\"99\":1}}],[\"包括由需求分析到规格\",{\"1\":{\"205\":1}}],[\"包括一些可能在将来引进的类一起工作\",{\"1\":{\"187\":1}}],[\"包括数据对象集\",{\"1\":{\"163\":1}}],[\"包括硬盘\",{\"1\":{\"24\":1}}],[\"选定基准值\",{\"1\":{\"148\":1}}],[\"选择器\",{\"1\":{\"318\":1}}],[\"选择骑自行车\",{\"1\":{\"226\":1}}],[\"选择排序\",{\"1\":{\"148\":1}}],[\"选择排序伪代码\",{\"1\":{\"142\":1}}],[\"选择文本\",{\"1\":{\"98\":1}}],[\"选中括号\",{\"1\":{\"99\":2}}],[\"中级\",{\"0\":{\"332\":1}}],[\"中文官网地址\",{\"1\":{\"281\":1}}],[\"中查找服务\",{\"1\":{\"235\":1}}],[\"中对\",{\"1\":{\"227\":1}}],[\"中已经有了对观察者模式的支持类\",{\"1\":{\"223\":1}}],[\"中介者会庞大\",{\"1\":{\"221\":1}}],[\"中介者使各对象不需要显式地相互引用\",{\"1\":{\"221\":1}}],[\"中介者模式属于行为型模式\",{\"1\":{\"221\":1}}],[\"中介者模式\",{\"0\":{\"203\":1,\"221\":1,\"485\":1},\"1\":{\"184\":1}}],[\"中如果碰到可以用\",{\"1\":{\"219\":1}}],[\"中每一个按钮都是一条命令\",{\"1\":{\"218\":1}}],[\"中遇到很多应用\",{\"1\":{\"217\":1}}],[\"中\",{\"1\":{\"209\":1,\"212\":1,\"217\":1}}],[\"中可以使用\",{\"1\":{\"209\":1}}],[\"中最简单的设计模式之一\",{\"1\":{\"208\":1}}],[\"中的变量与任何特定值类型没有任何关联\",{\"1\":{\"452\":1}}],[\"中的配置编译整个项目\",{\"1\":{\"302\":1}}],[\"中的后退\",{\"1\":{\"222\":1}}],[\"中的事件冒泡\",{\"1\":{\"217\":1}}],[\"中的形状的克隆\",{\"1\":{\"209\":1}}],[\"中的计数器\",{\"1\":{\"208\":1}}],[\"中的\",{\"1\":{\"187\":1,\"188\":1,\"209\":1,\"215\":1,\"218\":1,\"220\":1,\"226\":1}}],[\"中提供了\",{\"1\":{\"187\":1}}],[\"中国科学技术大学\",{\"1\":{\"273\":1}}],[\"中国科技大学\",{\"1\":{\"273\":1}}],[\"中国加入\",{\"1\":{\"221\":1}}],[\"中国\",{\"1\":{\"187\":1}}],[\"中缀表达式转换为后缀表达式\",{\"1\":{\"167\":1}}],[\"中找最小元\",{\"1\":{\"142\":1}}],[\"中括号\",{\"1\":{\"99\":2}}],[\"中断方式\",{\"1\":{\"32\":1}}],[\"重绘和重排\",{\"0\":{\"313\":1}}],[\"重新分配\",{\"1\":{\"452\":1}}],[\"重新设计它们之间的关系\",{\"1\":{\"240\":1}}],[\"重新操作上一步\",{\"1\":{\"99\":1}}],[\"重要的\",{\"1\":{\"223\":1,\"227\":1}}],[\"重做\",{\"1\":{\"218\":1}}],[\"重写\",{\"1\":{\"209\":2}}],[\"重复执行上一条命令\",{\"1\":{\"99\":1}}],[\"更换submodule\",{\"1\":{\"252\":1}}],[\"更新学生\",{\"1\":{\"232\":1,\"236\":1}}],[\"更新模型数据\",{\"1\":{\"229\":1}}],[\"更快\",{\"1\":{\"99\":1}}],[\"更改密码\",{\"1\":{\"85\":1}}],[\"zh\",{\"1\":{\"340\":1}}],[\"z\",{\"1\":{\"222\":1}}],[\"zb\",{\"1\":{\"99\":1}}],[\"zt\",{\"1\":{\"99\":1}}],[\"zz\",{\"1\":{\"99\":1}}],[\"移到单词最左边\",{\"1\":{\"99\":1}}],[\"移动文件\",{\"1\":{\"85\":1}}],[\"下标\",{\"1\":{\"165\":1}}],[\"下一代响应式web设计\",{\"1\":{\"355\":1}}],[\"下一页\",{\"1\":{\"99\":1}}],[\"下一个单词\",{\"1\":{\"99\":1}}],[\"下移\",{\"1\":{\"99\":1}}],[\"下载地址\",{\"1\":{\"286\":1}}],[\"下载unzip\",{\"1\":{\"90\":1}}],[\"下载解压文件过程\",{\"0\":{\"90\":1}}],[\"下载\",{\"1\":{\"88\":1,\"89\":1,\"90\":1}}],[\"justify\",{\"1\":{\"395\":1}}],[\"julie\",{\"1\":{\"219\":7,\"220\":2,\"225\":3}}],[\"jwt登录鉴权\",{\"1\":{\"284\":1}}],[\"jndiname\",{\"1\":{\"235\":6}}],[\"jndi\",{\"1\":{\"235\":7}}],[\"jms\",{\"1\":{\"230\":3}}],[\"jmsservice\",{\"1\":{\"230\":3}}],[\"js引擎\",{\"1\":{\"452\":1}}],[\"js中\",{\"0\":{\"320\":1}}],[\"js中单例提供一个公共的资源空间\",{\"1\":{\"191\":1}}],[\"js执行机制\",{\"1\":{\"306\":1}}],[\"json中添加tslint脚本\",{\"1\":{\"303\":1}}],[\"jsonp\",{\"1\":{\"303\":1}}],[\"json\",{\"0\":{\"465\":1},\"1\":{\"297\":2,\"301\":1,\"302\":1}}],[\"jsp\",{\"1\":{\"217\":1,\"230\":1}}],[\"js\",{\"1\":{\"217\":1,\"260\":1,\"332\":1},\"2\":{\"337\":1,\"467\":1}}],[\"jpg\",{\"1\":{\"216\":4}}],[\"jproxypatterndemo\",{\"1\":{\"216\":1}}],[\"joe\",{\"1\":{\"225\":1}}],[\"john\",{\"1\":{\"211\":2,\"212\":2,\"219\":7,\"220\":2,\"221\":6,\"229\":2,\"232\":2,\"236\":2}}],[\"josh\",{\"1\":{\"208\":1}}],[\"jdbc\",{\"1\":{\"187\":1}}],[\"jdk1\",{\"1\":{\"208\":3}}],[\"jdk\",{\"1\":{\"187\":2,\"208\":2}}],[\"jan\",{\"1\":{\"221\":2}}],[\"january\",{\"1\":{\"129\":1}}],[\"java中方法的重载\",{\"1\":{\"301\":1}}],[\"javatm\",{\"1\":{\"237\":3}}],[\"javascript命名空间模式\",{\"0\":{\"194\":1}}],[\"javascript\",{\"0\":{\"192\":1,\"292\":1},\"1\":{\"331\":1,\"332\":1,\"333\":2,\"452\":2}}],[\"javascript设计模式与开发实践\",{\"1\":{\"331\":1}}],[\"javascript设计模式\",{\"0\":{\"191\":1}}],[\"java\",{\"1\":{\"187\":3,\"188\":1,\"206\":6,\"207\":13,\"208\":4,\"209\":10,\"210\":6,\"211\":19,\"212\":5,\"213\":6,\"214\":7,\"215\":6,\"216\":4,\"217\":7,\"218\":8,\"219\":6,\"220\":6,\"221\":4,\"222\":6,\"223\":9,\"224\":5,\"225\":5,\"226\":7,\"227\":4,\"228\":8,\"229\":5,\"230\":8,\"231\":6,\"232\":7,\"233\":5,\"234\":10,\"235\":9,\"236\":5,\"237\":9}}],[\"j2ee设计模式\",{\"0\":{\"185\":1}}],[\"jjj\",{\"1\":{\"99\":1}}],[\"j\",{\"1\":{\"99\":1,\"145\":2,\"163\":1,\"228\":1}}],[\"左移\",{\"1\":{\"99\":1}}],[\"到目前\",{\"1\":{\"409\":1}}],[\"到构造和配置\",{\"1\":{\"205\":1}}],[\"到\",{\"1\":{\"142\":1}}],[\"到文件结束\",{\"1\":{\"99\":1}}],[\"到该行最后一个非空字符处\",{\"1\":{\"99\":1}}],[\"到该行第一个非空字符处\",{\"1\":{\"99\":1}}],[\"在开发时执行的顺序按照子组件在template中出现的顺序\",{\"1\":{\"501\":1}}],[\"在线转换\",{\"1\":{\"410\":1}}],[\"在使用了transform的位置\",{\"1\":{\"315\":1}}],[\"在使用组合模式时\",{\"1\":{\"212\":1}}],[\"在模糊字体一级级往外找\",{\"1\":{\"315\":1}}],[\"在div进行css3动画时\",{\"0\":{\"315\":1}}],[\"在对现有代码进行改写的时候\",{\"1\":{\"298\":1}}],[\"在其它程序设计语言中\",{\"1\":{\"298\":1}}],[\"在软件复用时\",{\"1\":{\"245\":1}}],[\"在软件系统中\",{\"1\":{\"218\":1}}],[\"在程序需要进行拓展的时候\",{\"1\":{\"239\":1}}],[\"在首次请求某个服务时\",{\"1\":{\"235\":1}}],[\"在业务层中我们有以下实体\",{\"1\":{\"230\":1}}],[\"在数据变化时更新控制器\",{\"1\":{\"229\":1}}],[\"在数据基础类里面有一个方法接受访问者\",{\"1\":{\"228\":1}}],[\"在被访问的类里面加一个对外提供接待访问者的接口\",{\"1\":{\"228\":1}}],[\"在造房子的时候\",{\"1\":{\"227\":1}}],[\"在策略模式中\",{\"1\":{\"226\":1}}],[\"在空对象模式中\",{\"1\":{\"225\":1}}],[\"在行为受状态约束的时候使用状态模式\",{\"1\":{\"224\":1}}],[\"在行尾追加插入\",{\"1\":{\"99\":1}}],[\"在枚举状态之前需要确定状态种类\",{\"1\":{\"224\":1}}],[\"在状态模式中\",{\"1\":{\"224\":1}}],[\"在抽象类实现\",{\"1\":{\"227\":1}}],[\"在抽象类里有一个\",{\"1\":{\"223\":1}}],[\"在抽象工厂模式中\",{\"1\":{\"207\":1}}],[\"在迭代器模式中\",{\"1\":{\"220\":1}}],[\"在同一个聚合上可以有多个遍历\",{\"1\":{\"220\":1}}],[\"在这种情况下\",{\"1\":{\"218\":1}}],[\"在这种模式中\",{\"1\":{\"217\":1}}],[\"在某些场合\",{\"1\":{\"218\":1}}],[\"在处理消息的时候以过滤很多道\",{\"1\":{\"217\":1}}],[\"在面向对象系统中\",{\"1\":{\"216\":1}}],[\"在直接访问对象时带来的问题\",{\"1\":{\"216\":1}}],[\"在代理模式中\",{\"1\":{\"216\":1}}],[\"在有多种算法相似的情况下\",{\"1\":{\"226\":1}}],[\"在有多种可能会变化的情况下\",{\"1\":{\"210\":1}}],[\"在有大量对象时\",{\"1\":{\"215\":1}}],[\"在层次化结构中\",{\"1\":{\"214\":1}}],[\"在客户端和复杂系统之间再加一层\",{\"1\":{\"214\":1}}],[\"在挂在墙上之前\",{\"1\":{\"213\":1}}],[\"在该类上应用标准\",{\"1\":{\"211\":1}}],[\"在实际项目中\",{\"1\":{\"209\":1}}],[\"在实际工作中\",{\"1\":{\"208\":1}}],[\"在运行期建立和删除原型\",{\"1\":{\"209\":1}}],[\"在需要的时候更新数据库\",{\"1\":{\"209\":1}}],[\"在下一个请求时返回它的克隆\",{\"1\":{\"209\":1}}],[\"在单例模式中大多数都是调用\",{\"1\":{\"208\":1}}],[\"在类装载时就实例化\",{\"1\":{\"208\":1}}],[\"在多线程不能正常工作\",{\"1\":{\"208\":1}}],[\"在内存里只有一个实例\",{\"1\":{\"208\":1}}],[\"在输出的时候就要处理不能两台打印机打印同一个文件\",{\"1\":{\"208\":1}}],[\"在操作一个文件的时候\",{\"1\":{\"208\":1}}],[\"在您的家中\",{\"1\":{\"207\":1}}],[\"在一个工厂里聚合多个同类产品\",{\"1\":{\"207\":1}}],[\"在一个产品族里面\",{\"1\":{\"207\":1}}],[\"在一定程度上增加了系统的复杂度\",{\"1\":{\"189\":1,\"206\":1}}],[\"在工厂模式中\",{\"1\":{\"206\":1}}],[\"在任何需要生成复杂对象的地方\",{\"1\":{\"189\":1,\"206\":1}}],[\"在\",{\"1\":{\"187\":1,\"209\":2,\"212\":1,\"217\":2}}],[\"在里面包容一个虎对象\",{\"1\":{\"187\":1}}],[\"在不修改软件实体的源代码或者二进制代码的前提下\",{\"1\":{\"239\":1}}],[\"在不破坏封装性的前提下\",{\"1\":{\"222\":1}}],[\"在不明确指定接收者的情况下\",{\"1\":{\"217\":1}}],[\"在不想增加很多子类的情况下扩展类\",{\"1\":{\"213\":1}}],[\"在不增加实体的需求下\",{\"1\":{\"187\":1}}],[\"在不同的存储结构中\",{\"1\":{\"160\":1}}],[\"在创建对象的同时隐藏创建逻辑的方式\",{\"1\":{\"182\":1}}],[\"在于其思维逻辑结构层面的价值\",{\"1\":{\"141\":1}}],[\"在计算机能处理的范围之内\",{\"1\":{\"141\":1}}],[\"在当前行之前插入新的一行\",{\"1\":{\"99\":1}}],[\"在当前行下面插入新的一行\",{\"1\":{\"99\":1}}],[\"在光标末尾追加插入\",{\"1\":{\"99\":1}}],[\"在档案中查找字符串\",{\"1\":{\"85\":1}}],[\"上下padding不会影响其它元素\",{\"1\":{\"392\":1}}],[\"上下选择按n\",{\"1\":{\"99\":1}}],[\"上按照定义的顺序执行这些过滤器\",{\"1\":{\"234\":1}}],[\"上运行\",{\"1\":{\"187\":1}}],[\"上一页\",{\"1\":{\"99\":1}}],[\"上移\",{\"1\":{\"99\":1}}],[\"上传\",{\"1\":{\"88\":1,\"89\":1}}],[\"上传代码包\",{\"1\":{\"82\":1}}],[\"上传代码\",{\"0\":{\"82\":1}}],[\"按照<style>出现的顺序插入<head>\",{\"1\":{\"501\":1}}],[\"按职责来划分\",{\"1\":{\"216\":1}}],[\"按enter键结束\",{\"1\":{\"99\":1}}],[\"按下\",{\"1\":{\"98\":1}}],[\"^i\",{\"1\":{\"120\":1,\"378\":1}}],[\"^r\",{\"1\":{\"120\":2,\"378\":2}}],[\"^\",{\"1\":{\"99\":1,\"120\":1,\"378\":1}}],[\"$$\",{\"1\":{\"120\":2,\"378\":2}}],[\"$\",{\"1\":{\"99\":1,\"298\":2}}],[\"光标移动到本行行尾\",{\"1\":{\"99\":1}}],[\"光标移动到行头\",{\"1\":{\"99\":1}}],[\"光盘存储设备\",{\"1\":{\"37\":1}}],[\"光盘等\",{\"1\":{\"24\":1}}],[\"各个类之间的解耦\",{\"1\":{\"221\":1}}],[\"各个场景的用法\",{\"1\":{\"2\":1}}],[\"各种不同的style\",{\"1\":{\"501\":1}}],[\"各种标签\",{\"0\":{\"340\":1}}],[\"各种数据结构的运算定义\",{\"1\":{\"159\":1}}],[\"各种数据的存储结构表示\",{\"1\":{\"159\":1}}],[\"各种数据的逻辑结构表示\",{\"1\":{\"159\":1}}],[\"各种命令操作\",{\"0\":{\"99\":1}}],[\"v2x\",{\"0\":{\"513\":1}}],[\"v8\",{\"1\":{\"409\":2}}],[\"vs\",{\"1\":{\"301\":3}}],[\"vscode中\",{\"1\":{\"297\":1}}],[\"versions\",{\"1\":{\"258\":1}}],[\"version\",{\"1\":{\"258\":1,\"286\":3,\"301\":1}}],[\"volatile\",{\"1\":{\"208\":1}}],[\"void\",{\"1\":{\"142\":1,\"147\":1,\"206\":5,\"207\":9,\"208\":3,\"209\":7,\"210\":6,\"211\":2,\"212\":3,\"213\":7,\"214\":8,\"215\":6,\"216\":5,\"217\":7,\"218\":8,\"219\":1,\"220\":1,\"221\":4,\"222\":4,\"223\":8,\"224\":5,\"225\":1,\"226\":1,\"227\":11,\"228\":14,\"229\":7,\"230\":7,\"231\":7,\"232\":7,\"233\":6,\"234\":12,\"235\":5,\"236\":5,\"298\":2}}],[\"value\",{\"1\":{\"191\":6,\"232\":1,\"375\":1}}],[\"val\",{\"1\":{\"191\":2}}],[\"variable\",{\"1\":{\"364\":2}}],[\"var\",{\"1\":{\"191\":12,\"196\":1,\"298\":2,\"301\":2,\"413\":5}}],[\"vue中有没有好的方式处理中英文转换后的样式问题\",{\"0\":{\"323\":1}}],[\"vue\",{\"0\":{\"384\":1,\"388\":1},\"1\":{\"131\":2,\"384\":2}}],[\"vuepress\",{\"0\":{\"114\":1,\"362\":1},\"1\":{\"110\":2,\"112\":2,\"113\":1,\"114\":2,\"115\":1,\"130\":1,\"305\":1,\"360\":2,\"361\":1,\"362\":2,\"363\":1,\"380\":1}}],[\"v+a+大括号\",{\"1\":{\"99\":1}}],[\"v+i+大括号\",{\"1\":{\"99\":1}}],[\"v\",{\"1\":{\"98\":1,\"221\":1,\"364\":1}}],[\"vite\",{\"0\":{\"472\":1}}],[\"virtual\",{\"0\":{\"389\":1}}],[\"video\",{\"0\":{\"350\":1}}],[\"visit\",{\"1\":{\"228\":12}}],[\"visitorpatterndemo\",{\"1\":{\"228\":2}}],[\"visitor\",{\"0\":{\"228\":1},\"1\":{\"184\":2}}],[\"view\",{\"1\":{\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"191\":1,\"229\":9,\"233\":1,\"258\":2,\"364\":1,\"365\":1,\"366\":1,\"367\":1,\"368\":1,\"369\":1,\"370\":1,\"371\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1}}],[\"via\",{\"1\":{\"113\":1,\"361\":1}}],[\"vim学习视频\",{\"1\":{\"100\":1}}],[\"vim是vi的加强版\",{\"1\":{\"95\":1}}],[\"vim\",{\"0\":{\"94\":1},\"1\":{\"90\":1,\"97\":1,\"99\":1}}],[\"vi\",{\"1\":{\"76\":1,\"97\":1}}],[\"就需要考虑使用混合模式\",{\"1\":{\"226\":1}}],[\"就需要引入一个工厂类\",{\"1\":{\"189\":1,\"206\":1}}],[\"就很方便\",{\"1\":{\"214\":1}}],[\"就增加功能来说\",{\"1\":{\"213\":1}}],[\"就会被实例化\",{\"1\":{\"208\":1}}],[\"就不可避免地出现多个进程或线程同时操作一个文件的现象\",{\"1\":{\"208\":1}}],[\"就可以完成创建的对象\",{\"1\":{\"189\":1,\"206\":1}}],[\"就要有一个适配器将\",{\"1\":{\"187\":1}}],[\"就是\",{\"1\":{\"221\":1}}],[\"就是将一类对象抽象成一种数据类型的过程\",{\"1\":{\"163\":1}}],[\"就是一些命令组织在一起\",{\"1\":{\"57\":1}}],[\"就像它在其它语言中那样\",{\"1\":{\"298\":1}}],[\"就像图书与书架的关系\",{\"1\":{\"160\":1}}],[\"就像shell一样\",{\"1\":{\"98\":1}}],[\"键\",{\"1\":{\"98\":1}}],[\"键盘\",{\"1\":{\"35\":1}}],[\"命令模式下\",{\"1\":{\"99\":1}}],[\"命令模式\",{\"0\":{\"218\":1,\"480\":1},\"1\":{\"98\":1,\"184\":1}}],[\"启动vim后默认位于正常模式\",{\"1\":{\"98\":1}}],[\"粘贴剪贴板的内容\",{\"1\":{\"99\":1}}],[\"粘贴\",{\"1\":{\"98\":1}}],[\"不存在变量提升\",{\"1\":{\"413\":1}}],[\"不会换行\",{\"1\":{\"392\":1}}],[\"不会相互耦合\",{\"1\":{\"213\":1}}],[\"不受限于\",{\"1\":{\"302\":1}}],[\"不跟\",{\"1\":{\"244\":1}}],[\"不正常状态和超常状态\",{\"1\":{\"224\":1}}],[\"不应当在职责混乱的时候使用\",{\"1\":{\"221\":1}}],[\"不应该随着内部状态的变化而变化\",{\"1\":{\"215\":1}}],[\"不应该具体实现\",{\"1\":{\"213\":1}}],[\"不同的方式来遍历整个整合对象\",{\"1\":{\"220\":1}}],[\"不符合开闭原则\",{\"1\":{\"214\":1}}],[\"不用管里面具体怎么实现的\",{\"1\":{\"210\":1}}],[\"不用每次刷新都在数据库里加一次\",{\"1\":{\"208\":1}}],[\"不建议使用第\",{\"1\":{\"208\":1}}],[\"不能嵌套块级元素\",{\"1\":{\"392\":1}}],[\"不能去修改原有的代码\",{\"1\":{\"239\":1}}],[\"不能保证请求一定被接收\",{\"1\":{\"217\":1}}],[\"不能通过\",{\"1\":{\"208\":1}}],[\"不能继承\",{\"1\":{\"208\":1}}],[\"不一定被初始化\",{\"1\":{\"208\":1}}],[\"不过\",{\"1\":{\"208\":2}}],[\"不要求线程安全\",{\"1\":{\"208\":1}}],[\"不要让它成为一个负担\",{\"1\":{\"95\":1}}],[\"不合法的构造函数\",{\"1\":{\"208\":1}}],[\"不需要知道集合对象的底层表示\",{\"1\":{\"220\":1}}],[\"不需要实例化该类的对象\",{\"1\":{\"208\":1}}],[\"不需要显式指定它们的类\",{\"1\":{\"207\":1}}],[\"不易整体进行把握\",{\"1\":{\"187\":1}}],[\"不输出\",{\"1\":{\"167\":1}}],[\"不涉及其他\",{\"1\":{\"163\":1}}],[\"不考虑计算机的具体实现\",{\"1\":{\"163\":1}}],[\"不可以有歧义\",{\"1\":{\"141\":1}}],[\"不保存\",{\"1\":{\"99\":1}}],[\"不论一幅画有没有画框都可以挂在墙上\",{\"1\":{\"213\":1}}],[\"不论\",{\"1\":{\"98\":1}}],[\"不仅兼容vi的所有指令\",{\"1\":{\"95\":1}}],[\"升级版\",{\"1\":{\"95\":1}}],[\"对单个组件\",{\"1\":{\"501\":1}}],[\"对扩展开放\",{\"1\":{\"239\":1}}],[\"对修改关闭\",{\"1\":{\"239\":2}}],[\"对这种服务的引用可以在\",{\"1\":{\"235\":1}}],[\"对用户进行身份验证\",{\"1\":{\"233\":1}}],[\"对\",{\"1\":{\"217\":1}}],[\"对请求的发送者和接收者进行解耦\",{\"1\":{\"217\":1}}],[\"对每种形状都运行数据库查询\",{\"1\":{\"209\":1}}],[\"对静态域使用延迟初始化\",{\"1\":{\"208\":1}}],[\"对象发送请求的对象\",{\"1\":{\"234\":1}}],[\"对象是请求处理程序\",{\"1\":{\"234\":1}}],[\"对象也可以在数据不可用的时候提供默认的行为\",{\"1\":{\"225\":1}}],[\"对象不是检查空值\",{\"1\":{\"225\":1}}],[\"对象实例的检查\",{\"1\":{\"225\":1}}],[\"对象的扩展\",{\"0\":{\"420\":1}}],[\"对象的执行算法\",{\"1\":{\"226\":1}}],[\"对象的行为依赖于它的状态\",{\"1\":{\"224\":1}}],[\"对象的列表\",{\"1\":{\"211\":1,\"212\":1}}],[\"对象看起来好像修改了它的类\",{\"1\":{\"224\":1}}],[\"对象来显示他们之间的通信\",{\"1\":{\"221\":1}}],[\"对象与对象之间存在大量的关联关系\",{\"1\":{\"221\":1}}],[\"对象\",{\"1\":{\"213\":1,\"215\":1,\"221\":1,\"222\":1,\"224\":1,\"225\":1,\"226\":1}}],[\"对象图\",{\"1\":{\"205\":1}}],[\"对象字面量\",{\"1\":{\"191\":1}}],[\"对象属性赋值\",{\"1\":{\"191\":1}}],[\"对象之间的通信\",{\"1\":{\"184\":1}}],[\"对象结构中对象对应的类很少改变\",{\"1\":{\"228\":1}}],[\"对象结构\",{\"1\":{\"183\":1}}],[\"对象创建抽象类来获取工厂\",{\"1\":{\"207\":1}}],[\"对象创建\",{\"1\":{\"182\":1}}],[\"对接口编程而不是对实现编程\",{\"1\":{\"180\":1}}],[\"对于模块的每个版本\",{\"1\":{\"259\":1}}],[\"对于客户端\",{\"1\":{\"236\":1}}],[\"对于可以切换状态的状态模式\",{\"1\":{\"224\":1}}],[\"对于复杂的文法比较难维护\",{\"1\":{\"219\":1}}],[\"对于一些固定文法构建一个解释句子的解释器\",{\"1\":{\"219\":1}}],[\"对于\",{\"1\":{\"212\":1,\"452\":1}}],[\"对于两个独立变化的维度\",{\"1\":{\"210\":1}}],[\"对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统\",{\"1\":{\"210\":1}}],[\"对于左边与右边的分区递归进行分区\",{\"1\":{\"148\":1}}],[\"对于大软件\",{\"1\":{\"92\":1}}],[\"对应的ip地址记录\",{\"1\":{\"72\":1}}],[\"点击左侧列表application\",{\"1\":{\"92\":1}}],[\"卸载软件\",{\"0\":{\"92\":1}}],[\"临时添加环境变量\",{\"1\":{\"90\":1}}],[\"是不受ecma的约束的\",{\"1\":{\"463\":1}}],[\"是不可见的\",{\"1\":{\"208\":1}}],[\"是为了解决什么样的问题或者说是能解决什么样的问题\",{\"1\":{\"462\":1}}],[\"是为了使程序的扩展性好\",{\"1\":{\"239\":1}}],[\"是怎么保持的长连接\",{\"0\":{\"311\":1}}],[\"是继承复用的基石\",{\"1\":{\"240\":1}}],[\"是通过\",{\"1\":{\"235\":1}}],[\"是向\",{\"1\":{\"234\":1}}],[\"是具体环境\",{\"1\":{\"224\":1}}],[\"是用来降低多个对象和类之间的通信复杂性\",{\"1\":{\"221\":1}}],[\"是用于把一组相似的对象当作一个单一的对象\",{\"1\":{\"212\":1}}],[\"是用于把抽象化与实现化解耦\",{\"1\":{\"210\":1}}],[\"是用于创建重复的对象\",{\"1\":{\"209\":1}}],[\"是男性\",{\"1\":{\"219\":1}}],[\"是树枝\",{\"1\":{\"212\":1}}],[\"是树叶\",{\"1\":{\"212\":1}}],[\"是否多线程安全\",{\"1\":{\"208\":6}}],[\"是否\",{\"1\":{\"208\":6}}],[\"是多进程多线程的\",{\"1\":{\"208\":1}}],[\"是围绕一个超级工厂创建其他工厂\",{\"1\":{\"207\":1}}],[\"是始于1997年一个omg标准\",{\"1\":{\"205\":1}}],[\"是零个或多个元素的有穷序列\",{\"1\":{\"165\":1}}],[\"是已经实现了的数据结构\",{\"1\":{\"163\":1}}],[\"是描述数据结构的方法\",{\"1\":{\"163\":1}}],[\"是指人脑中贮存的一系列如果\",{\"1\":{\"156\":1}}],[\"是一种数据驱动的设计模式\",{\"1\":{\"218\":1}}],[\"是一种由开关元件按照一定的拓扑结构和控制方式将集中式系统或分布式系统中的结点连接起来所构成的网络\",{\"1\":{\"50\":1}}],[\"是一套被反复使用的\",{\"1\":{\"179\":1}}],[\"是一个由\",{\"1\":{\"260\":1}}],[\"是一个已婚的女性\",{\"1\":{\"219\":1}}],[\"是一个值的集合和定义在此集合上的一组操作的总称\",{\"1\":{\"163\":1}}],[\"是一个编辑器\",{\"1\":{\"95\":1}}],[\"是\",{\"1\":{\"90\":1,\"208\":10,\"220\":1}}],[\"单一职责\",{\"0\":{\"490\":1}}],[\"单一职责原则\",{\"0\":{\"242\":1}}],[\"单例类必须给所有其他对象提供这一实例\",{\"1\":{\"208\":1}}],[\"单例类必须自己创建自己的唯一实例\",{\"1\":{\"208\":1}}],[\"单例类只能有一个实例\",{\"1\":{\"208\":1}}],[\"单例模式的实现有多种方式\",{\"1\":{\"208\":1}}],[\"单例模式的几种实现方式\",{\"1\":{\"208\":1}}],[\"单例模式\",{\"0\":{\"196\":1,\"208\":1,\"475\":1},\"1\":{\"182\":1}}],[\"单向链尾不能找到前一个\",{\"1\":{\"167\":1}}],[\"单引号\",{\"1\":{\"99\":2}}],[\"单词移动\",{\"1\":{\"99\":2}}],[\"单单使用\",{\"1\":{\"90\":1}}],[\"单管动态存储元\",{\"1\":{\"26\":1}}],[\"添加\",{\"1\":{\"90\":1}}],[\"添加站点\",{\"1\":{\"83\":1}}],[\"先备份\",{\"1\":{\"90\":1}}],[\"xaxis\",{\"1\":{\"375\":1}}],[\"xml\",{\"1\":{\"232\":1}}],[\"x\",{\"1\":{\"99\":1,\"147\":3,\"210\":12,\"215\":26,\"298\":6,\"374\":5}}],[\"xzz\",{\"1\":{\"99\":1}}],[\"xz\",{\"1\":{\"90\":1}}],[\"xf\",{\"1\":{\"90\":1}}],[\"同步化\",{\"1\":{\"216\":1}}],[\"同时做出相应的处理\",{\"1\":{\"221\":1}}],[\"同时若一个对象发生改变\",{\"1\":{\"221\":1}}],[\"同时继承装饰者模式\",{\"1\":{\"213\":1}}],[\"同时又不改变形状类\",{\"1\":{\"213\":1}}],[\"同时又不改变其结构\",{\"1\":{\"213\":1}}],[\"同时又能保证性能\",{\"1\":{\"209\":1}}],[\"同时确保只有单个对象被创建\",{\"1\":{\"208\":1}}],[\"同时也增加了系统具体类的依赖\",{\"1\":{\"189\":1,\"206\":1}}],[\"同时也可以设置域名的子域名\",{\"1\":{\"72\":1}}],[\"同样的运算\",{\"1\":{\"160\":1}}],[\"同一逻辑结构可以对应多种存储结构\",{\"1\":{\"160\":1}}],[\"同win2k\",{\"1\":{\"85\":2}}],[\"权限转换为指定使用者\",{\"1\":{\"85\":1}}],[\"黑客通常用它来编译c语言写的文件\",{\"1\":{\"85\":1}}],[\"停止某进程\",{\"1\":{\"85\":1}}],[\"keyboard\",{\"1\":{\"228\":9}}],[\"key\",{\"1\":{\"191\":2}}],[\"keeping\",{\"1\":{\"1\":2}}],[\"ki\",{\"1\":{\"165\":1}}],[\"kill\",{\"1\":{\"85\":1}}],[\"kn\",{\"1\":{\"165\":1}}],[\"know\",{\"1\":{\"111\":1,\"112\":1,\"359\":1,\"360\":1,\"379\":1}}],[\"k1\",{\"1\":{\"165\":1}}],[\"k=i\",{\"1\":{\"145\":1}}],[\"k\",{\"1\":{\"99\":1,\"103\":3,\"165\":2}}],[\"时的行为变化\",{\"1\":{\"226\":1}}],[\"时只有一个线程\",{\"1\":{\"208\":1}}],[\"时尚男装\",{\"1\":{\"207\":1}}],[\"时尚女装\",{\"1\":{\"207\":1}}],[\"时尚装\",{\"1\":{\"207\":1}}],[\"时间复杂度\",{\"1\":{\"147\":1,\"159\":1}}],[\"时间\",{\"1\":{\"85\":1}}],[\"时序图\",{\"1\":{\"205\":1}}],[\"时序产生器\",{\"1\":{\"29\":1}}],[\"时序控制\",{\"1\":{\"29\":1}}],[\"档案搜寻\",{\"1\":{\"85\":1}}],[\"档案文件比较\",{\"1\":{\"85\":1}}],[\"删除操作在另一端\",{\"1\":{\"168\":1}}],[\"删除光标下面的字符\",{\"1\":{\"99\":1}}],[\"删除当前行\",{\"1\":{\"99\":1}}],[\"删除等操作\",{\"1\":{\"98\":1}}],[\"删除子目录\",{\"1\":{\"85\":1}}],[\"删除文件\",{\"1\":{\"85\":1}}],[\"往abc\",{\"1\":{\"85\":1}}],[\"查找和缓存服务来获取服务的单点接触\",{\"1\":{\"235\":1}}],[\"查找服务对象负责获取相关的业务实现\",{\"1\":{\"230\":1}}],[\"查找算法\",{\"0\":{\"151\":1}}],[\"查找对应的文字\",{\"1\":{\"99\":1}}],[\"查看已安装的版本\",{\"1\":{\"286\":1}}],[\"查看node所有版本\",{\"1\":{\"286\":1}}],[\"查看包的版本\",{\"1\":{\"258\":1}}],[\"查看端口号\",{\"1\":{\"85\":1}}],[\"查看自己下过的命令\",{\"1\":{\"85\":1}}],[\"查看自己的帐号名称\",{\"1\":{\"85\":1}}],[\"查看某人的group\",{\"1\":{\"85\":1}}],[\"查看文件内容\",{\"1\":{\"85\":1}}],[\"查询创建\",{\"1\":{\"235\":1}}],[\"查询定位各种服务的时候\",{\"1\":{\"235\":1}}],[\"查询服务\",{\"1\":{\"230\":1}}],[\"查询\",{\"1\":{\"99\":1}}],[\"查询目前上机者的详细资料\",{\"1\":{\"85\":1}}],[\"查询目前和你使用同一台机器的人以及login时间地点\",{\"1\":{\"85\":1}}],[\"查询当前所在的目录位置\",{\"1\":{\"85\":1}}],[\"与object的区别\",{\"1\":{\"463\":1}}],[\"与其它行内元素位于同一行\",{\"1\":{\"392\":1}}],[\"与备忘录管理类耦合\",{\"1\":{\"222\":1}}],[\"与通过对一个类进行实例化来构造新对象不同的是\",{\"1\":{\"209\":1}}],[\"与数据库的连接等\",{\"1\":{\"208\":1}}],[\"与数据存储的物理结构无关\",{\"1\":{\"163\":1}}],[\"与单一职责原则冲突\",{\"1\":{\"208\":1}}],[\"与工厂模式的区别是\",{\"1\":{\"188\":1}}],[\"与实现操作的算法和编程语言都无关\",{\"1\":{\"163\":1}}],[\"与存放数据的机器无关\",{\"1\":{\"163\":1}}],[\"与\",{\"1\":{\"85\":1,\"218\":1,\"303\":1}}],[\"与物理位置有关\",{\"1\":{\"24\":1}}],[\"新版本es7\",{\"0\":{\"411\":1}}],[\"新的命令可以很容易添加到系统中去\",{\"1\":{\"218\":1}}],[\"新书如何插入\",{\"1\":{\"160\":1}}],[\"新建文件\",{\"1\":{\"85\":1}}],[\"新一代总线\",{\"0\":{\"44\":1},\"1\":{\"3\":1}}],[\"基础概念\",{\"0\":{\"444\":1}}],[\"基础知识\",{\"0\":{\"338\":1}}],[\"基础\",{\"0\":{\"327\":1}}],[\"基础规则比\",{\"1\":{\"302\":1}}],[\"基础语法\",{\"0\":{\"275\":1}}],[\"基类才能真正被复用\",{\"1\":{\"240\":1}}],[\"基于express框架\",{\"1\":{\"282\":1}}],[\"基于客户传递的名字\",{\"1\":{\"225\":1}}],[\"基于给定的信息生成实体类的对象\",{\"1\":{\"207\":1}}],[\"基本数据类型\",{\"0\":{\"454\":1}}],[\"基本的数据组织和数据处理方法\",{\"1\":{\"159\":1}}],[\"基本命令\",{\"0\":{\"85\":1}}],[\"基数r\",{\"1\":{\"13\":1}}],[\"完成这些操作的方法就是算法\",{\"1\":{\"160\":1}}],[\"完成之后即可访问对应的页面\",{\"1\":{\"84\":1}}],[\"完成\",{\"1\":{\"84\":1}}],[\"设置宽高不起作用\",{\"1\":{\"392\":1}}],[\"设置元素的内外部显示类型\",{\"1\":{\"391\":1}}],[\"设置项目的数据库\",{\"1\":{\"84\":1}}],[\"设定档案或目录的存取权限\",{\"1\":{\"85\":1}}],[\"设计原则\",{\"0\":{\"489\":1}}],[\"设计一个连接服务器的框架\",{\"1\":{\"189\":1,\"206\":1}}],[\"设计模式有用的书籍\",{\"1\":{\"237\":1}}],[\"设计模式相关的网站\",{\"0\":{\"237\":1}}],[\"设计模式的用法\",{\"1\":{\"229\":1}}],[\"设计模式\",{\"0\":{\"178\":1,\"474\":1},\"1\":{\"329\":1}}],[\"设计出求解问题的高效算法\",{\"1\":{\"159\":1}}],[\"设计实现运算的算法\",{\"1\":{\"159\":1}}],[\"设计\",{\"1\":{\"6\":1}}],[\"网站\",{\"1\":{\"83\":1}}],[\"注意区别js的宿主浏览器中的对象\",{\"1\":{\"463\":1}}],[\"注意划分外部状态和内部状态\",{\"1\":{\"215\":1}}],[\"注意\",{\"1\":{\"208\":1,\"393\":1,\"400\":1,\"463\":1}}],[\"注意cd\",{\"1\":{\"85\":1}}],[\"注意版本\",{\"1\":{\"83\":1}}],[\"注意事项\",{\"1\":{\"2\":1,\"187\":1,\"188\":1,\"189\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"227\":1,\"228\":1}}],[\"解释型\",{\"1\":{\"452\":1}}],[\"解释器模式采用递归调用方法\",{\"1\":{\"219\":1}}],[\"解释器模式会引起类膨胀\",{\"1\":{\"219\":1}}],[\"解释器模式\",{\"0\":{\"219\":1},\"1\":{\"184\":1}}],[\"解答\",{\"1\":{\"315\":1}}],[\"解析\",{\"1\":{\"219\":1}}],[\"解耦\",{\"1\":{\"218\":1}}],[\"解决策略类膨胀的问题\",{\"1\":{\"226\":1}}],[\"解决哪一类问题\",{\"1\":{\"182\":1,\"183\":1,\"184\":1}}],[\"解决固定的问题\",{\"1\":{\"179\":1}}],[\"解决问题方法的效率\",{\"1\":{\"160\":1}}],[\"解决cpu与主存之间速度匹配问题\",{\"1\":{\"24\":1}}],[\"解压zip文件\",{\"1\":{\"90\":1}}],[\"解压\",{\"1\":{\"82\":1,\"90\":1}}],[\"域名\",{\"1\":{\"82\":1}}],[\"域名绑定a记录就是告诉dns\",{\"1\":{\"72\":1}}],[\"等\",{\"1\":{\"227\":1}}],[\"等是具体状态\",{\"1\":{\"224\":1}}],[\"等条件选择语句\",{\"1\":{\"224\":1}}],[\"等处理\",{\"1\":{\"218\":1}}],[\"等价地转换成另一种语言程序\",{\"1\":{\"156\":1}}],[\"等到算法能力掌握到一定程度的时候\",{\"1\":{\"141\":1}}],[\"等待安装完成即可\",{\"1\":{\"81\":1}}],[\"等等\",{\"1\":{\"6\":2}}],[\"以一种非常通用的方式检查设计模式\",{\"1\":{\"237\":1}}],[\"以一页一页的方式显示一个文本文件\",{\"1\":{\"85\":1}}],[\"以下是这种设计模式的实体\",{\"1\":{\"233\":1,\"234\":1,\"235\":1,\"236\":1}}],[\"以下是数据访问对象模式的参与者\",{\"1\":{\"232\":1}}],[\"以下是组合实体\",{\"1\":{\"231\":1}}],[\"以便一次性更新数据库中的数值\",{\"1\":{\"236\":1}}],[\"以便复用它们\",{\"1\":{\"235\":1}}],[\"以便在适当的时候恢复对象\",{\"1\":{\"222\":1}}],[\"以便向外界提供功能接口\",{\"1\":{\"216\":1}}],[\"以减少内存占用和提高性能\",{\"1\":{\"215\":1}}],[\"以此来减少数据库调用\",{\"1\":{\"209\":1}}],[\"以及数据库可能有变化时\",{\"1\":{\"189\":1,\"206\":1}}],[\"以及这个汽车里面的具体实现\",{\"1\":{\"189\":1,\"206\":1}}],[\"以数据结构为中心的算法设计\",{\"1\":{\"159\":1}}],[\"以简洁描述一种编程语言的语言\",{\"1\":{\"156\":1}}],[\"以免发生莫名其妙的情况\",{\"1\":{\"81\":1}}],[\"以阿里云\",{\"1\":{\"81\":1}}],[\"以硬件为主\",{\"0\":{\"3\":1}}],[\"进阶\",{\"0\":{\"329\":1}}],[\"进行广播通知\",{\"1\":{\"223\":1}}],[\"进行登录\",{\"1\":{\"82\":1}}],[\"进去\",{\"1\":{\"217\":1}}],[\"进入网站域名\",{\"0\":{\"84\":1}}],[\"进入宝塔登录界面\",{\"1\":{\"82\":1}}],[\"进入主机空间\",{\"1\":{\"81\":1}}],[\"进位计数制的两个特征\",{\"1\":{\"13\":1}}],[\"进位计数制及其之间的转换\",{\"0\":{\"13\":1},\"1\":{\"3\":1}}],[\"宝塔是一个运维工具\",{\"1\":{\"80\":1}}],[\"每次拿这种成套的衣服时也自然要从这个衣柜中取出了\",{\"1\":{\"207\":1}}],[\"每次增加一个产品时\",{\"1\":{\"189\":1,\"206\":1}}],[\"每个阶段的变动需要tc39委员会批准\",{\"1\":{\"325\":1}}],[\"每个类尽量提供接口或抽象类\",{\"1\":{\"241\":1}}],[\"每个记录器中的下一个记录器代表的是链的一部分\",{\"1\":{\"217\":1}}],[\"每个生成的工厂都能按照工厂模式提供对象\",{\"1\":{\"207\":1}}],[\"每个distribution除了架构的严谨度与选择的套件内容外\",{\"1\":{\"79\":1}}],[\"每一个不同的实现都需要一个子类来实现\",{\"1\":{\"227\":1}}],[\"每一个锦囊就是一个策略\",{\"1\":{\"226\":1}}],[\"每一种旅行方式都是一个策略\",{\"1\":{\"226\":1}}],[\"每一种角度都可能变化\",{\"1\":{\"210\":1}}],[\"每一组对象都可以用一个对象来代替\",{\"1\":{\"215\":1}}],[\"每一条指令\",{\"1\":{\"141\":1}}],[\"每一颗螺丝钉造就了这个精彩的世界\",{\"1\":{\"23\":1}}],[\"当你了解熟悉了\",{\"1\":{\"452\":1}}],[\"当你输入域名的时候给你引导向设置在dns的a记录所对应的服务器\",{\"1\":{\"72\":1}}],[\"当操作涉及不匹配的类型是否\",{\"1\":{\"452\":1}}],[\"当嵌套iframe时的\",{\"1\":{\"400\":1}}],[\"当访问一个越界的元素\",{\"1\":{\"298\":1}}],[\"当应用的需求改变时\",{\"1\":{\"239\":1}}],[\"当再次请求相同的服务时\",{\"1\":{\"235\":1}}],[\"当更新一个组合实体时\",{\"1\":{\"231\":1}}],[\"当对象间存在一对多关系时\",{\"0\":{\"223\":1}}],[\"当被请求时\",{\"1\":{\"216\":1}}],[\"当把外蕴对象从对象中剔除出来时\",{\"1\":{\"215\":1}}],[\"当他变成\",{\"1\":{\"213\":1}}],[\"当要实例化的类是在运行时刻指定时\",{\"1\":{\"209\":1}}],[\"当一个对象的状态发生改变时\",{\"1\":{\"223\":1}}],[\"当一个对象被修改时\",{\"1\":{\"223\":1}}],[\"当一个类的实例只能有几个不同状态组合中的一种时\",{\"1\":{\"209\":1}}],[\"当一个系统应该独立于它的产品创建\",{\"1\":{\"209\":1}}],[\"当一个产品族中的多个对象被设计成一起工作时\",{\"1\":{\"207\":1}}],[\"当直接创建对象的代价比较大时\",{\"1\":{\"209\":1}}],[\"当您想控制实例数目\",{\"1\":{\"208\":1}}],[\"当用户不知道最后系统采用哪一类数据库\",{\"1\":{\"189\":1,\"206\":1}}],[\"当我们需要快速找到一个元素x\",{\"1\":{\"148\":1}}],[\"当出现bash$时就说明连接成功\",{\"1\":{\"85\":1}}],[\"当十六进制数首位为a~f时\",{\"1\":{\"13\":1}}],[\"通常命令模式的接口中只有一个方法\",{\"1\":{\"224\":1}}],[\"通常每个接收者都包含对另一个接收者的引用\",{\"1\":{\"217\":1}}],[\"通常有以下使用场景\",{\"1\":{\"216\":1}}],[\"通常由一个一维数组和一个记录栈顶元素位置的变量组成\",{\"1\":{\"167\":1}}],[\"通常可以表示为k0\",{\"1\":{\"165\":1}}],[\"通常把基于存储结构的运算实现的步骤或过程称为算法\",{\"1\":{\"163\":1}}],[\"通过为同一个函数提供多个函数类型定义来试下多种功能的目的\",{\"1\":{\"301\":1}}],[\"通过四个method区分\",{\"1\":{\"287\":1}}],[\"通过脚手架创建项目\",{\"1\":{\"284\":1}}],[\"通过这种方式\",{\"1\":{\"228\":1}}],[\"通过一个备忘录类专门存储对象状态\",{\"1\":{\"222\":1}}],[\"通过调用者调用接受者执行命令\",{\"1\":{\"218\":1}}],[\"通过改变链内的成员或者调动它们的次序\",{\"1\":{\"217\":1}}],[\"通过逻辑运算以解耦的方式把它们连接起来\",{\"1\":{\"211\":1}}],[\"通过桥接模式可以使它们在抽象层建立一个关联关系\",{\"1\":{\"210\":1}}],[\"通过动态装载\",{\"1\":{\"209\":1}}],[\"通过传递颜色信息来获取实体类的对象\",{\"1\":{\"215\":1}}],[\"通过传递形状或颜色信息来获取工厂\",{\"1\":{\"207\":1}}],[\"通过传递类型信息来获取实体类的对象\",{\"1\":{\"206\":1,\"207\":1}}],[\"通过接口转换\",{\"1\":{\"187\":1}}],[\"通过\",{\"1\":{\"89\":1,\"209\":2}}],[\"通过xshell等工具\",{\"1\":{\"81\":1}}],[\"通俗的来讲a记录就是服务器的ip\",{\"1\":{\"72\":1}}],[\"通道方式\",{\"1\":{\"32\":1}}],[\"yes\",{\"1\":{\"376\":1}}],[\"year\",{\"1\":{\"191\":3}}],[\"years\",{\"1\":{\"1\":1,\"298\":1}}],[\"yaxis\",{\"1\":{\"375\":1}}],[\"y^\",{\"1\":{\"120\":2,\"378\":2}}],[\"y的功能可类比到dvgugu\",{\"1\":{\"99\":1}}],[\"yy\",{\"1\":{\"99\":1}}],[\"y\",{\"1\":{\"81\":1,\"99\":1,\"120\":2,\"210\":10,\"215\":26,\"374\":4,\"378\":2}}],[\"yum\",{\"1\":{\"76\":1,\"81\":1,\"88\":1}}],[\"yourself\",{\"1\":{\"99\":1}}],[\"your\",{\"1\":{\"62\":1,\"130\":2,\"131\":1,\"305\":1}}],[\"you\",{\"1\":{\"61\":1,\"62\":2,\"104\":1,\"107\":1,\"110\":2,\"111\":1,\"112\":2,\"128\":1,\"129\":1,\"130\":2,\"131\":2,\"305\":2,\"359\":1,\"360\":2,\"371\":1,\"379\":1}}],[\"作者\",{\"1\":{\"208\":1}}],[\"作为一种创建类模式\",{\"1\":{\"189\":1,\"206\":1}}],[\"作为一个单独命令完成一个特定任务\",{\"1\":{\"57\":1}}],[\"作为两个不兼容接口之间的桥梁\",{\"1\":{\"187\":1}}],[\"作用域\",{\"0\":{\"439\":1},\"1\":{\"328\":1,\"452\":1,\"474\":1}}],[\"作用\",{\"1\":{\"24\":1,\"29\":1}}],[\"宏\",{\"1\":{\"57\":1}}],[\"up\",{\"1\":{\"235\":4}}],[\"updated\",{\"1\":{\"232\":2,\"236\":2}}],[\"updatestudent\",{\"1\":{\"232\":3,\"236\":2}}],[\"updateview\",{\"1\":{\"229\":3}}],[\"update\",{\"1\":{\"104\":1,\"107\":1,\"223\":5}}],[\"ui\",{\"1\":{\"228\":1,\"230\":1}}],[\"util\",{\"1\":{\"209\":1,\"211\":11,\"212\":2,\"215\":1,\"218\":2,\"221\":1,\"222\":2,\"223\":2,\"232\":3,\"234\":2,\"235\":2,\"236\":2}}],[\"umlet\",{\"1\":{\"205\":1}}],[\"uml是这个高潮的产物\",{\"1\":{\"205\":1}}],[\"uml\",{\"0\":{\"247\":1},\"1\":{\"205\":2}}],[\"u\",{\"1\":{\"99\":1}}],[\"undefined\",{\"0\":{\"457\":1},\"1\":{\"298\":2,\"454\":1}}],[\"undo\",{\"1\":{\"218\":1}}],[\"uninstall\",{\"1\":{\"286\":1}}],[\"unzip\",{\"1\":{\"90\":1}}],[\"uname\",{\"1\":{\"85\":1}}],[\"url\",{\"1\":{\"90\":1}}],[\"ubuntu\",{\"1\":{\"79\":1}}],[\"ustc\",{\"1\":{\"273\":2}}],[\"usage\",{\"1\":{\"191\":1}}],[\"using\",{\"1\":{\"112\":1,\"115\":1,\"360\":1,\"363\":1,\"380\":1}}],[\"user\",{\"1\":{\"221\":12,\"233\":3}}],[\"use\",{\"1\":{\"61\":1,\"62\":1,\"110\":1,\"130\":2,\"131\":1,\"286\":1,\"301\":1,\"305\":2,\"364\":2}}],[\"usb\",{\"1\":{\"44\":1}}],[\"u盘\",{\"1\":{\"24\":1}}],[\"闪存\",{\"1\":{\"37\":1}}],[\"闪速存储器\",{\"1\":{\"24\":1}}],[\"硬磁盘存储器\",{\"1\":{\"37\":1}}],[\"硬件资源等\",{\"1\":{\"209\":1}}],[\"硬件基本组成\",{\"0\":{\"68\":1}}],[\"硬件\",{\"0\":{\"8\":1},\"1\":{\"3\":1}}],[\"磁盘上只保存一个副本\",{\"1\":{\"259\":1}}],[\"磁记录方式\",{\"1\":{\"37\":1}}],[\"磁表面存储器的原理\",{\"1\":{\"37\":1}}],[\"鼠标\",{\"1\":{\"35\":1}}],[\"端口的编址方式\",{\"1\":{\"31\":1}}],[\"累加寄存器\",{\"1\":{\"29\":1}}],[\"分支语句的代替者\",{\"1\":{\"224\":1}}],[\"分类\",{\"0\":{\"181\":1}}],[\"分析算法的效率\",{\"1\":{\"159\":1}}],[\"分析一般算法的效率\",{\"1\":{\"143\":1}}],[\"分区\",{\"1\":{\"148\":1}}],[\"分布式仲裁\",{\"1\":{\"42\":1}}],[\"分享指令\",{\"1\":{\"29\":1}}],[\"分为指令cache和数据cache\",{\"1\":{\"24\":1}}],[\"操作符\",{\"0\":{\"449\":1}}],[\"操作符和另一个操作数\",{\"1\":{\"212\":2}}],[\"操作和恢复\",{\"1\":{\"218\":1}}],[\"操作\",{\"0\":{\"252\":1},\"1\":{\"205\":1,\"218\":1}}],[\"操作集\",{\"1\":{\"163\":1}}],[\"操作控制器\",{\"1\":{\"29\":1}}],[\"操作系统层\",{\"1\":{\"10\":1}}],[\"操作系统\",{\"0\":{\"59\":1,\"93\":1},\"1\":{\"3\":1}}],[\"程序广泛地用于处理非数值的数据\",{\"1\":{\"298\":1}}],[\"程序违背了里氏替换原则\",{\"1\":{\"240\":1}}],[\"程序员不重复写那些已经规范好的代码\",{\"1\":{\"227\":1}}],[\"程序员可以在理解基础上实现它\",{\"1\":{\"163\":1}}],[\"程序\",{\"1\":{\"187\":1}}],[\"程序框图\",{\"1\":{\"152\":1}}],[\"程序设计语言\",{\"0\":{\"157\":1}}],[\"程序设计\",{\"0\":{\"63\":1}}],[\"程序设计时\",{\"1\":{\"13\":1}}],[\"程序控制传送方式\",{\"1\":{\"32\":1}}],[\"程序计数器\",{\"1\":{\"29\":1}}],[\"实际处理请求的服务\",{\"1\":{\"235\":1}}],[\"实体与数据库表进行关联\",{\"1\":{\"284\":1}}],[\"实体\",{\"1\":{\"231\":2}}],[\"实例演示了一个组织中员工的层次结构\",{\"1\":{\"212\":1}}],[\"实现开闭原则的关键步骤就是抽象化\",{\"1\":{\"240\":1}}],[\"实现一个热插拔的效果\",{\"1\":{\"239\":1}}],[\"实现一条指令的功能\",{\"1\":{\"29\":1}}],[\"实现了该业务服务的实体类\",{\"1\":{\"230\":1}}],[\"实现了信息的封装\",{\"1\":{\"222\":1}}],[\"实现同一个接口\",{\"1\":{\"226\":1}}],[\"实现类的方法有不同的功能\",{\"1\":{\"224\":1}}],[\"实现代理模式需要额外的工作\",{\"1\":{\"216\":1}}],[\"实现与被代理类组合\",{\"1\":{\"216\":1}}],[\"实现细节对客户透明\",{\"1\":{\"210\":1}}],[\"实现系统可能有多个角度分类\",{\"1\":{\"210\":1}}],[\"实现克隆操作\",{\"1\":{\"209\":1}}],[\"实现难度\",{\"1\":{\"208\":6}}],[\"实现想要的目标接口\",{\"1\":{\"187\":1}}],[\"实现飞的接口\",{\"1\":{\"187\":1}}],[\"实质上就是对一个求解问题的形式化描述\",{\"1\":{\"163\":1}}],[\"实时控制\",{\"1\":{\"6\":1}}],[\">c2\",{\"1\":{\"377\":1}}],[\">b2\",{\"1\":{\"377\":1}}],[\">a2\",{\"1\":{\"377\":2}}],[\">abc\",{\"1\":{\"85\":1}}],[\">e\",{\"1\":{\"376\":2}}],[\">process\",{\"1\":{\"376\":1}}],[\"><\",{\"1\":{\"340\":1}}],[\">=\",{\"1\":{\"148\":1}}],[\">\",{\"1\":{\"29\":1,\"147\":1,\"160\":2,\"191\":1,\"339\":1,\"377\":3}}],[\"传输对象\",{\"1\":{\"236\":1}}],[\"传输对象是只读的\",{\"1\":{\"236\":1}}],[\"传输对象是一个具有\",{\"1\":{\"236\":1}}],[\"传输对象也被称为数值对象\",{\"1\":{\"236\":1}}],[\"传输对象模式\",{\"0\":{\"236\":1},\"1\":{\"185\":1}}],[\"传到地址总线\",{\"1\":{\"26\":1}}],[\"传统冯诺依曼计算机结构与现代的计算机系统结构\",{\"0\":{\"11\":1},\"1\":{\"3\":1}}],[\"控制信号线\",{\"1\":{\"26\":1}}],[\"控制器作用于模型和视图上\",{\"1\":{\"229\":1}}],[\"控制器\",{\"0\":{\"29\":1,\"70\":1},\"1\":{\"3\":1,\"8\":1,\"29\":2,\"221\":1,\"229\":2}}],[\"总是不允许某些隐式类型转换\",{\"1\":{\"452\":1}}],[\"总共需要这么多个存储元电路\",{\"1\":{\"26\":1}}],[\"总线定时\",{\"1\":{\"41\":1}}],[\"总线信息传送方式\",{\"1\":{\"41\":1}}],[\"总线信息传送方式及定时\",{\"0\":{\"41\":1},\"1\":{\"3\":1}}],[\"总线结构类型\",{\"1\":{\"40\":1}}],[\"总线通道组成\",{\"1\":{\"40\":1}}],[\"总线的仲裁\",{\"0\":{\"42\":1},\"1\":{\"3\":1}}],[\"总线系统结构\",{\"0\":{\"40\":1},\"1\":{\"3\":1}}],[\"总线技术概述\",{\"0\":{\"39\":1},\"1\":{\"3\":1}}],[\"总线\",{\"0\":{\"38\":1},\"1\":{\"3\":1,\"44\":2}}],[\"位于文档中最前面的位置\",{\"1\":{\"339\":1}}],[\"位于什么模式下\",{\"1\":{\"98\":1}}],[\"位数\",{\"1\":{\"26\":1}}],[\"位权w\",{\"1\":{\"13\":1}}],[\"mr\",{\"1\":{\"382\":1}}],[\"my\",{\"1\":{\"298\":1}}],[\"mysingleton\",{\"1\":{\"191\":2}}],[\"mysql\",{\"0\":{\"279\":1},\"1\":{\"76\":1}}],[\"might\",{\"1\":{\"298\":1}}],[\"mirrors\",{\"1\":{\"273\":3}}],[\"michael\",{\"1\":{\"232\":2,\"236\":2}}],[\"michel\",{\"1\":{\"212\":2}}],[\"mike\",{\"1\":{\"211\":4}}],[\"mixin\",{\"1\":{\"191\":1}}],[\"miles\",{\"1\":{\"191\":5}}],[\"min\",{\"1\":{\"147\":7}}],[\"minposition\",{\"1\":{\"142\":1}}],[\"minpostion\",{\"1\":{\"142\":1}}],[\"middle\",{\"1\":{\"99\":1,\"147\":8}}],[\"mermaid\",{\"0\":{\"377\":1}}],[\"media\",{\"1\":{\"355\":1}}],[\"mediatorpatterndemo\",{\"1\":{\"221\":2}}],[\"mediator\",{\"0\":{\"221\":1},\"1\":{\"184\":2,\"191\":1}}],[\"message\",{\"1\":{\"217\":10,\"221\":4}}],[\"meetcriteria\",{\"1\":{\"211\":14}}],[\"memberwiseclone\",{\"1\":{\"209\":1}}],[\"mementopatterndemo\",{\"1\":{\"222\":2}}],[\"mementolist\",{\"1\":{\"222\":3}}],[\"memento\",{\"0\":{\"222\":1},\"1\":{\"184\":1,\"222\":11}}],[\"me\",{\"1\":{\"191\":1}}],[\"methods\",{\"1\":{\"196\":1}}],[\"method\",{\"1\":{\"191\":1,\"206\":6,\"207\":12,\"209\":3}}],[\"meta\",{\"1\":{\"107\":1}}],[\"means\",{\"1\":{\"131\":1}}],[\"ms\",{\"1\":{\"129\":1}}],[\"mdn\",{\"1\":{\"400\":1}}],[\"md\",{\"1\":{\"115\":1,\"363\":1}}],[\"mouse\",{\"1\":{\"228\":9}}],[\"mon\",{\"1\":{\"375\":1}}],[\"month\",{\"1\":{\"298\":1}}],[\"monitor\",{\"1\":{\"228\":9}}],[\"mondeo\",{\"1\":{\"191\":3}}],[\"module>\",{\"1\":{\"501\":1}}],[\"modules\",{\"1\":{\"191\":3,\"193\":3,\"301\":1,\"303\":1}}],[\"module\",{\"0\":{\"431\":1},\"1\":{\"191\":3,\"283\":1}}],[\"model\",{\"1\":{\"191\":4,\"229\":14,\"232\":1}}],[\"move\",{\"1\":{\"99\":10}}],[\"more\",{\"1\":{\"85\":1,\"115\":1,\"127\":1,\"191\":1,\"363\":1}}],[\"mvcpatterndemo\",{\"1\":{\"229\":2}}],[\"mvc\",{\"0\":{\"229\":1},\"1\":{\"185\":2,\"221\":1,\"229\":1}}],[\"mv\",{\"0\":{\"192\":1},\"1\":{\"85\":1}}],[\"mkdir\",{\"1\":{\"85\":1}}],[\"maybe\",{\"1\":{\"298\":1}}],[\"manager\",{\"1\":{\"234\":1,\"257\":1}}],[\"males\",{\"1\":{\"211\":4}}],[\"male\",{\"1\":{\"211\":18,\"219\":2}}],[\"malepersons\",{\"1\":{\"211\":3}}],[\"mark\",{\"0\":{\"371\":1},\"1\":{\"371\":1}}],[\"marketing\",{\"1\":{\"212\":6}}],[\"markdown\",{\"0\":{\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"359\":1,\"360\":1,\"361\":1,\"380\":1},\"1\":{\"110\":2,\"111\":3,\"112\":1,\"113\":3,\"114\":2,\"115\":1,\"128\":2,\"129\":1,\"130\":2,\"131\":2,\"305\":1,\"359\":3,\"360\":1,\"361\":3,\"362\":2,\"363\":1,\"364\":2,\"379\":3,\"380\":1},\"2\":{\"126\":1}}],[\"marital\",{\"1\":{\"211\":15}}],[\"maritalstatus\",{\"1\":{\"211\":5}}],[\"married\",{\"1\":{\"211\":5,\"219\":6}}],[\"math\",{\"1\":{\"215\":3}}],[\"matrix\",{\"1\":{\"163\":8}}],[\"matter\",{\"1\":{\"61\":1,\"62\":1}}],[\"max\",{\"1\":{\"145\":1,\"147\":7}}],[\"main\",{\"0\":{\"320\":1},\"1\":{\"62\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1}}],[\"macos\",{\"0\":{\"91\":1},\"1\":{\"59\":1}}],[\"m\",{\"1\":{\"26\":1,\"99\":1,\"163\":1,\"221\":1}}],[\"字体size为奇数导致\",{\"1\":{\"315\":1}}],[\"字样\",{\"1\":{\"301\":1}}],[\"字数\",{\"1\":{\"26\":1}}],[\"字符串扩展\",{\"0\":{\"415\":1}}],[\"字符串可以赋值给\",{\"1\":{\"298\":1}}],[\"字符串类型\",{\"1\":{\"298\":1}}],[\"字符串\",{\"1\":{\"16\":1}}],[\"性价比\",{\"1\":{\"25\":1}}],[\"性能和代码量不是理由\",{\"1\":{\"499\":1}}],[\"性能和安全要求的场景\",{\"1\":{\"209\":1}}],[\"性能优化\",{\"0\":{\"295\":1},\"1\":{\"329\":1}}],[\"性能提高\",{\"1\":{\"209\":1}}],[\"性能\",{\"1\":{\"25\":1}}],[\"可设置左右margin\",{\"1\":{\"392\":1}}],[\"可选参数必须配置到参数的最后面\",{\"1\":{\"301\":1}}],[\"可索引接口\",{\"1\":{\"300\":1}}],[\"可使用原型模式+备忘录模式\",{\"1\":{\"222\":1}}],[\"可吃\",{\"1\":{\"222\":1}}],[\"可利用场景比较少\",{\"1\":{\"219\":2}}],[\"可扩展性比较好\",{\"1\":{\"219\":1}}],[\"可动态指定一组对象处理请求\",{\"1\":{\"217\":1}}],[\"可能导致系统崩溃\",{\"1\":{\"223\":1}}],[\"可能不容易观察运行时的特征\",{\"1\":{\"217\":1}}],[\"可能会造成循环调用\",{\"1\":{\"217\":1}}],[\"可能要去挂号\",{\"1\":{\"214\":1}}],[\"可能有商务女装\",{\"1\":{\"207\":1}}],[\"可代替继承\",{\"1\":{\"213\":1}}],[\"可乐\",{\"1\":{\"188\":1}}],[\"可行性\",{\"1\":{\"142\":1}}],[\"可视模式下\",{\"1\":{\"99\":1}}],[\"可视模式\",{\"1\":{\"98\":1}}],[\"可执行一些输入并执行一些vim或插件提供的指令\",{\"1\":{\"98\":1}}],[\"可以点击选择\",{\"1\":{\"301\":1}}],[\"可以自动生成代码\",{\"1\":{\"297\":1}}],[\"可以说是js的超集\",{\"1\":{\"296\":1}}],[\"可以扩展模块的功能\",{\"1\":{\"239\":1}}],[\"可以做报表\",{\"1\":{\"228\":1}}],[\"可以让多个环境对象共享一个状态对象\",{\"1\":{\"224\":1}}],[\"可以让任何两个没有关联的类一起运行\",{\"1\":{\"187\":1}}],[\"可以考虑作为模板方法\",{\"1\":{\"223\":1,\"227\":1}}],[\"可以考虑使用原型模式拷贝多个对象供调用者使用\",{\"1\":{\"209\":1}}],[\"可以考虑使用第\",{\"1\":{\"208\":1}}],[\"可以将这种依赖关系弱化\",{\"1\":{\"223\":1}}],[\"可以将一个需要解释执行的语言中的句子表示为一个抽象语法树\",{\"1\":{\"219\":1}}],[\"可以实现二者之间的松耦合\",{\"1\":{\"218\":1}}],[\"可以这样理解\",{\"1\":{\"216\":1}}],[\"可以使用户能够比较方便地回到某个历史的状态\",{\"1\":{\"222\":1}}],[\"可以使用外观模式定义系统中每一层的入口\",{\"1\":{\"214\":1}}],[\"可以使用相同的抽象类方法但是不同的桥接实现类\",{\"1\":{\"210\":1}}],[\"可以看到的开关是抽象的\",{\"1\":{\"210\":1}}],[\"可以尝试使用第\",{\"1\":{\"208\":1}}],[\"可以直接访问\",{\"1\":{\"208\":1}}],[\"可以直接从工厂里面提货\",{\"1\":{\"189\":1,\"206\":1}}],[\"可以把这三个作为产品类\",{\"1\":{\"189\":1,\"206\":1}}],[\"可以不使用适配器\",{\"1\":{\"187\":1}}],[\"可以用数组来实现堆栈\",{\"1\":{\"167\":1}}],[\"可以用partition\",{\"1\":{\"148\":1}}],[\"可以通过基本运算有限次执行来实现\",{\"1\":{\"142\":1}}],[\"可以利用xshell或是vscode进行练习\",{\"1\":{\"95\":1}}],[\"可以从application中对应的应用子文件夹中找到卸载文件进行卸载即可\",{\"1\":{\"92\":1}}],[\"可以在cpu内部\",{\"1\":{\"24\":1}}],[\"可靠性\",{\"1\":{\"25\":1}}],[\"存放观察者们\",{\"1\":{\"223\":1}}],[\"存取时间\",{\"1\":{\"25\":1}}],[\"存储这些对象\",{\"1\":{\"215\":1}}],[\"存储结构\",{\"0\":{\"162\":1},\"1\":{\"162\":1}}],[\"存储模块或者其他设备\",{\"1\":{\"50\":1}}],[\"存储体与外围电路集成在一块硅片上\",{\"1\":{\"26\":1}}],[\"存储\",{\"1\":{\"26\":1}}],[\"存储带宽\",{\"1\":{\"25\":1}}],[\"存储周期\",{\"1\":{\"25\":1}}],[\"存储容量\",{\"1\":{\"25\":1}}],[\"存储地址\",{\"1\":{\"24\":1}}],[\"存储单元\",{\"1\":{\"24\":1}}],[\"存储器芯片\",{\"1\":{\"26\":1}}],[\"存储器的数据流进入cpu\",{\"1\":{\"11\":1}}],[\"存储器\",{\"1\":{\"8\":1}}],[\"存储器系统\",{\"1\":{\"3\":1}}],[\"存储元电路\",{\"0\":{\"26\":1},\"1\":{\"3\":1}}],[\"段页式虚拟存储器\",{\"1\":{\"24\":1}}],[\"段式虚拟存储器\",{\"1\":{\"24\":1}}],[\"页式虚拟存储器\",{\"1\":{\"24\":1}}],[\"辅存结构\",{\"1\":{\"24\":1}}],[\"rgb\",{\"1\":{\"374\":1}}],[\"rules\",{\"1\":{\"303\":1}}],[\"run\",{\"1\":{\"298\":2,\"301\":1,\"303\":1}}],[\"runtime\",{\"1\":{\"298\":1}}],[\"rumbaugh和jacobson的表示方法\",{\"1\":{\"205\":1}}],[\"r表示前驱\",{\"1\":{\"165\":1}}],[\"r为集合中元素的二元关系\",{\"1\":{\"160\":1}}],[\"random\",{\"1\":{\"215\":3}}],[\"radius\",{\"1\":{\"210\":14,\"215\":26}}],[\"rational\",{\"1\":{\"205\":1}}],[\"ray\",{\"0\":{\"267\":1},\"1\":{\"139\":1,\"270\":1}}],[\"ram\",{\"1\":{\"24\":1}}],[\"r\",{\"1\":{\"120\":3,\"160\":1,\"165\":3,\"252\":1,\"378\":3}}],[\"richard\",{\"1\":{\"212\":2}}],[\"richer\",{\"1\":{\"115\":1,\"363\":1}}],[\"right\",{\"1\":{\"120\":3,\"148\":3,\"368\":1,\"378\":3}}],[\"rz\",{\"1\":{\"88\":2}}],[\"rmdir\",{\"1\":{\"85\":1}}],[\"rm\",{\"1\":{\"85\":2,\"252\":1}}],[\"rendering\",{\"1\":{\"315\":1}}],[\"result\",{\"1\":{\"301\":2}}],[\"restful规范\",{\"0\":{\"287\":1}}],[\"responsibility\",{\"0\":{\"217\":1},\"1\":{\"184\":1}}],[\"reuse\",{\"0\":{\"245\":1}}],[\"reusable\",{\"1\":{\"237\":1}}],[\"requested\",{\"1\":{\"233\":3}}],[\"request\",{\"1\":{\"233\":7,\"234\":20}}],[\"retrivestudentfromdatabase\",{\"1\":{\"229\":2}}],[\"returning\",{\"1\":{\"235\":3}}],[\"return\",{\"1\":{\"147\":2,\"148\":4,\"191\":11,\"206\":5,\"207\":15,\"208\":6,\"209\":4,\"211\":8,\"212\":2,\"215\":4,\"217\":1,\"219\":6,\"220\":5,\"221\":1,\"222\":4,\"223\":1,\"224\":3,\"225\":6,\"226\":4,\"229\":5,\"230\":2,\"231\":4,\"232\":4,\"233\":1,\"235\":9,\"236\":4,\"301\":11}}],[\"recommanded\",{\"1\":{\"382\":1}}],[\"received\",{\"1\":{\"218\":1}}],[\"rectangle\",{\"1\":{\"206\":9,\"207\":9,\"209\":12,\"213\":6,\"214\":8}}],[\"react\",{\"0\":{\"387\":1}}],[\"realcustomer\",{\"1\":{\"225\":5}}],[\"realimage\",{\"1\":{\"216\":10}}],[\"read\",{\"1\":{\"111\":1,\"112\":1,\"114\":1,\"359\":1,\"360\":1,\"362\":1,\"379\":1}}],[\"referenceerror\",{\"1\":{\"413\":3}}],[\"reference\",{\"1\":{\"216\":1}}],[\"reflection\",{\"1\":{\"208\":1}}],[\"remove\",{\"1\":{\"212\":2,\"232\":1,\"236\":1}}],[\"removeat\",{\"1\":{\"191\":1}}],[\"redrectangle\",{\"1\":{\"213\":2}}],[\"redshapedecorator\",{\"1\":{\"213\":6}}],[\"redcircle\",{\"1\":{\"210\":5,\"213\":2}}],[\"red\",{\"1\":{\"207\":9,\"210\":2,\"213\":7,\"215\":4,\"298\":3}}],[\"redo\",{\"1\":{\"99\":1,\"218\":1}}],[\"revealing\",{\"1\":{\"191\":1}}],[\"relative\",{\"1\":{\"130\":1,\"305\":1}}],[\"related\",{\"1\":{\"61\":1,\"62\":1}}],[\"regarded\",{\"1\":{\"127\":1,\"128\":1}}],[\"repeat\",{\"1\":{\"99\":1}}],[\"repo\",{\"1\":{\"76\":1}}],[\"repos\",{\"1\":{\"76\":1}}],[\"reboot\",{\"0\":{\"75\":1}}],[\"roll\",{\"1\":{\"229\":3,\"232\":3,\"236\":3}}],[\"rollno\",{\"1\":{\"229\":7,\"232\":16,\"236\":15}}],[\"rob\",{\"1\":{\"212\":2,\"225\":3}}],[\"robert\",{\"1\":{\"211\":4,\"212\":2,\"219\":4,\"220\":2,\"221\":6,\"229\":2,\"232\":2,\"236\":2}}],[\"rose\",{\"1\":{\"205\":1}}],[\"root密码\",{\"1\":{\"83\":1}}],[\"root\",{\"0\":{\"74\":1}}],[\"rom\",{\"1\":{\"24\":1}}],[\"r模型\",{\"0\":{\"65\":1}}],[\"随机存储器\",{\"1\":{\"24\":1}}],[\"系统中对象之间存在比较复杂的引用关系\",{\"1\":{\"221\":1}}],[\"系统中有大量对象\",{\"1\":{\"215\":1}}],[\"系统需要支持命令的撤销\",{\"1\":{\"218\":1}}],[\"系统需要使用现有的类\",{\"1\":{\"187\":1}}],[\"系统性能将受到一定影响\",{\"1\":{\"217\":1}}],[\"系统有大量相似对象\",{\"1\":{\"215\":1}}],[\"系统不依赖于这些对象身份\",{\"1\":{\"215\":1}}],[\"系统的产品有多于一个的产品族\",{\"1\":{\"207\":1}}],[\"系统事件\",{\"1\":{\"189\":1,\"206\":1}}],[\"系统断电后自动丢失其中存储信息\",{\"1\":{\"24\":1}}],[\"系统断电后不会丢失存储信息\",{\"1\":{\"24\":1}}],[\"系统软件\",{\"1\":{\"9\":1}}],[\"用编程的思想看待前端\",{\"1\":{\"289\":1}}],[\"用在多根轴线的情况下\",{\"1\":{\"395\":1}}],[\"用在我们想使用\",{\"1\":{\"235\":1}}],[\"用在\",{\"1\":{\"231\":1}}],[\"用一个中介对象来封装一系列的对象交互\",{\"1\":{\"221\":1}}],[\"用唯一标识码判断\",{\"1\":{\"215\":1}}],[\"用来提供一个集中的请求处理机制\",{\"1\":{\"233\":1}}],[\"用来包装原有的类\",{\"1\":{\"213\":1}}],[\"用来表示部分以及整体层次\",{\"1\":{\"212\":1}}],[\"用继承会造成类爆炸问题\",{\"1\":{\"210\":1}}],[\"用原型实例指定创建对象的种类\",{\"1\":{\"209\":1}}],[\"用这种方式写不免让人感觉生疏\",{\"1\":{\"208\":1}}],[\"用单例先缓存起来\",{\"1\":{\"208\":1}}],[\"用\",{\"1\":{\"207\":1,\"215\":1}}],[\"用于从客户端向服务器一次性传递带有多个属性的数据\",{\"1\":{\"236\":1}}],[\"用于对应用程序的请求或响应做一些预处理\",{\"1\":{\"234\":1}}],[\"用于对表示层和业务层解耦\",{\"1\":{\"230\":1}}],[\"用于把低级的数据访问\",{\"1\":{\"232\":1}}],[\"用于持续生命周期\",{\"1\":{\"231\":1}}],[\"用于与一些彼此之间没有太大关联的一些类\",{\"1\":{\"187\":1}}],[\"用于存放当前运行的程序和数据结构\",{\"1\":{\"24\":1}}],[\"用户将统一地使用组合结构中的所有对象\",{\"1\":{\"212\":1}}],[\"用户可以选择记录日志到什么地方\",{\"1\":{\"189\":1,\"206\":1}}],[\"用户可以将该域名下的网站服务器指向到自己的web\",{\"1\":{\"72\":1}}],[\"用户为解决某个应用领域中的各类问题而编写开发的程序\",{\"1\":{\"9\":1}}],[\"主要使用步骤\",{\"0\":{\"284\":1}}],[\"主要将数据结构与数据操作分离\",{\"1\":{\"228\":1}}],[\"主要用于减少创建对象的数量\",{\"1\":{\"215\":1}}],[\"主要解决接口选择的问题\",{\"1\":{\"189\":1,\"206\":1,\"207\":1}}],[\"主要解决在软件系统中\",{\"1\":{\"187\":1,\"188\":1}}],[\"主要解决\",{\"1\":{\"187\":1,\"188\":1,\"189\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"227\":1,\"228\":1}}],[\"主要是这个\",{\"1\":{\"24\":1}}],[\"主要是半导体存储器\",{\"1\":{\"24\":1}}],[\"主机空间最好干净一些些\",{\"1\":{\"81\":1}}],[\"主存\",{\"1\":{\"24\":1}}],[\"内置类型\",{\"0\":{\"453\":1}}],[\"内联块级弹性伸缩盒\",{\"1\":{\"396\":1}}],[\"内排序\",{\"0\":{\"149\":1}}],[\"内部依赖对象\",{\"1\":{\"231\":1}}],[\"内部总线\",{\"1\":{\"43\":1}}],[\"内部cache\",{\"1\":{\"24\":1}}],[\"内存\",{\"1\":{\"24\":1}}],[\"又可让外部代码透明地访问集合内部的数据\",{\"1\":{\"220\":1}}],[\"又可以在cpu外部\",{\"1\":{\"24\":1}}],[\"又叫部分整体模式\",{\"1\":{\"212\":1}}],[\"又不希望在\",{\"1\":{\"208\":1}}],[\"又要在具体的里面加代码\",{\"1\":{\"207\":1}}],[\"又称最少知道原则\",{\"1\":{\"244\":1}}],[\"又称统一建模语言或标准建模语言\",{\"1\":{\"205\":1}}],[\"又称\",{\"1\":{\"24\":1}}],[\"高阶函数\",{\"1\":{\"474\":1}}],[\"高性能npm\",{\"1\":{\"259\":1}}],[\"高层模块不应该依赖低层模块\",{\"1\":{\"241\":1}}],[\"高层模块调用简单\",{\"1\":{\"212\":1}}],[\"高扩展性\",{\"1\":{\"216\":1}}],[\"高翠兰本人和孙悟空都实现了这个接口\",{\"1\":{\"216\":1}}],[\"高级\",{\"0\":{\"333\":1}}],[\"高级程序设计\",{\"1\":{\"331\":1}}],[\"高级数据结构\",{\"0\":{\"173\":1}}],[\"高级语言层\",{\"1\":{\"10\":1}}],[\"高度抽象\",{\"1\":{\"155\":1}}],[\"高速小容量存储器\",{\"1\":{\"24\":1}}],[\"高速缓冲处理器\",{\"1\":{\"24\":1}}],[\"负符号加绝对值\",{\"1\":{\"14\":1}}],[\"正则的扩展\",{\"0\":{\"416\":1}}],[\"正视js这门语言\",{\"1\":{\"292\":1}}],[\"正常模式下按下v\",{\"1\":{\"98\":1}}],[\"正常模式下\",{\"1\":{\"98\":2,\"99\":1}}],[\"正常模式\",{\"1\":{\"98\":1}}],[\"正\",{\"1\":{\"14\":1}}],[\"+=\",{\"1\":{\"301\":1}}],[\"+servicename+\",{\"1\":{\"235\":1}}],[\"+student\",{\"1\":{\"232\":4,\"236\":4}}],[\"+name+\",{\"1\":{\"218\":2}}],[\"++i\",{\"1\":{\"215\":1}}],[\"+x+\",{\"1\":{\"210\":2}}],[\"+\",{\"0\":{\"402\":1},\"1\":{\"14\":1,\"29\":1,\"99\":3,\"120\":1,\"131\":1,\"147\":3,\"163\":1,\"191\":3,\"209\":3,\"210\":8,\"211\":6,\"212\":5,\"215\":8,\"216\":2,\"217\":3,\"218\":4,\"219\":2,\"220\":1,\"221\":4,\"222\":4,\"223\":3,\"226\":6,\"229\":2,\"231\":1,\"232\":8,\"233\":1,\"234\":3,\"236\":8,\"298\":1,\"301\":4,\"302\":1,\"378\":1}}],[\"并缓存该服务对象\",{\"1\":{\"235\":1}}],[\"并支持松耦合\",{\"1\":{\"221\":1}}],[\"并打印名字\",{\"1\":{\"220\":1}}],[\"并解析它们\",{\"1\":{\"219\":1}}],[\"并定义一个解释器\",{\"1\":{\"219\":1}}],[\"并传给调用对象\",{\"1\":{\"218\":1}}],[\"并在\",{\"1\":{\"234\":1}}],[\"并在把请求传给实际目标应用程序之前应用在请求上\",{\"1\":{\"234\":1}}],[\"并在数据变化时更新视图\",{\"1\":{\"229\":1}}],[\"并在该对象之外保存这个状态\",{\"1\":{\"222\":2}}],[\"并在每个记录器中设置下一个记录器\",{\"1\":{\"217\":1}}],[\"并在保持类方法签名完整性的前提下\",{\"1\":{\"213\":1}}],[\"并提供业务对象对业务代表对象的访问\",{\"1\":{\"230\":1}}],[\"并提供对签发人账号上资金的控制\",{\"1\":{\"216\":1}}],[\"并提供一个访问它的全局访问点\",{\"1\":{\"208\":1}}],[\"并向客户端提供了一个客户端可以访问系统的接口\",{\"1\":{\"214\":1}}],[\"并创建该形状\",{\"1\":{\"209\":1}}],[\"并把它传递给服务器\",{\"1\":{\"236\":1}}],[\"并把它发送到客户端或按值传递它\",{\"1\":{\"236\":1}}],[\"并把它们存储在一个\",{\"1\":{\"209\":1}}],[\"并把该命令传给相应的对象\",{\"1\":{\"218\":1}}],[\"并把删除的行存到剪贴板里\",{\"1\":{\"99\":1}}],[\"并调用它的\",{\"1\":{\"206\":3}}],[\"并最终统一为大众所接受的标准建模语言\",{\"1\":{\"205\":1}}],[\"并活用\",{\"1\":{\"179\":1}}],[\"并不明确指定其类型\",{\"1\":{\"163\":1}}],[\"并且任何变量都可以分配\",{\"1\":{\"452\":1}}],[\"并且使它们可相互替换\",{\"1\":{\"226\":1}}],[\"并且使得小于x的元素数量是k\",{\"1\":{\"148\":1}}],[\"并且可以方便地增加新的状态\",{\"1\":{\"224\":1}}],[\"并且可以根据它的状态改变而改变它的相关行为\",{\"1\":{\"224\":1}}],[\"并且沿着这条链传递请求\",{\"1\":{\"217\":1}}],[\"并且实际上是画框被挂在墙上\",{\"1\":{\"213\":1}}],[\"并且随着扩展功能的增多\",{\"1\":{\"213\":1}}],[\"并且含有内部属性\",{\"1\":{\"212\":1}}],[\"并且通过拷贝这些原型创建新的对象\",{\"1\":{\"209\":1}}],[\"并且是通过使用一个共同的接口来指向新创建的对象\",{\"1\":{\"206\":1}}],[\"并且只提供单一个方法入口\",{\"1\":{\"191\":1}}],[\"并且用\",{\"1\":{\"14\":1}}],[\"并将其位置赋值给minposition\",{\"1\":{\"142\":1}}],[\"并行性\",{\"1\":{\"46\":1}}],[\"并行存储器\",{\"1\":{\"24\":1}}],[\"并行处理机的两种典型结构\",{\"1\":{\"47\":1}}],[\"并行处理机基本结构\",{\"0\":{\"47\":1},\"1\":{\"3\":1}}],[\"并行处理的概念\",{\"0\":{\"46\":1},\"1\":{\"3\":1}}],[\"并行处理与互连设备\",{\"0\":{\"45\":1},\"1\":{\"3\":1}}],[\"95\",{\"1\":{\"215\":1}}],[\"93\",{\"1\":{\"215\":1}}],[\"97\",{\"1\":{\"215\":1}}],[\"91\",{\"1\":{\"215\":1}}],[\"90\",{\"1\":{\"215\":1}}],[\"98\",{\"1\":{\"215\":1}}],[\"94\",{\"1\":{\"215\":1}}],[\"99\",{\"1\":{\"208\":1,\"374\":1}}],[\"9\",{\"0\":{\"421\":1},\"1\":{\"13\":1,\"148\":2,\"205\":1,\"207\":1,\"298\":1}}],[\"81\",{\"1\":{\"227\":1}}],[\"82\",{\"1\":{\"215\":3}}],[\"89\",{\"1\":{\"215\":1}}],[\"86\",{\"1\":{\"215\":2}}],[\"8888\",{\"1\":{\"82\":1}}],[\"8\",{\"0\":{\"420\":1},\"1\":{\"13\":1,\"26\":1,\"148\":2,\"207\":1,\"216\":1,\"234\":1,\"301\":1}}],[\"76\",{\"1\":{\"215\":1}}],[\"78\",{\"1\":{\"215\":1}}],[\"70\",{\"1\":{\"215\":1}}],[\"71\",{\"1\":{\"215\":1}}],[\"72\",{\"1\":{\"213\":1}}],[\"7\",{\"0\":{\"419\":1},\"1\":{\"13\":1,\"148\":4,\"207\":1,\"209\":1,\"216\":1,\"230\":1,\"234\":1,\"235\":1,\"301\":1}}],[\"61\",{\"1\":{\"215\":1}}],[\"62\",{\"1\":{\"215\":1}}],[\"69\",{\"1\":{\"215\":1}}],[\"64\",{\"1\":{\"215\":2}}],[\"6\",{\"0\":{\"408\":1,\"418\":1},\"1\":{\"13\":1,\"103\":1,\"207\":1,\"208\":2,\"209\":1,\"210\":1,\"213\":1,\"216\":1,\"218\":1,\"228\":1,\"230\":1,\"231\":1,\"234\":1,\"235\":1,\"298\":2,\"410\":1,\"413\":3}}],[\"50\",{\"1\":{\"226\":1}}],[\"5000\",{\"1\":{\"191\":1}}],[\"55\",{\"1\":{\"215\":1}}],[\"54\",{\"1\":{\"148\":2}}],[\"5\",{\"0\":{\"195\":1,\"417\":1},\"1\":{\"13\":1,\"103\":1,\"206\":1,\"207\":1,\"208\":5,\"209\":2,\"210\":1,\"211\":1,\"213\":1,\"214\":1,\"215\":4,\"216\":2,\"218\":1,\"222\":1,\"223\":1,\"224\":3,\"225\":1,\"226\":11,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"298\":2,\"301\":1,\"374\":4,\"408\":1}}],[\"404\",{\"1\":{\"502\":1}}],[\"46\",{\"1\":{\"221\":2}}],[\"44\",{\"1\":{\"215\":1,\"301\":1}}],[\"41\",{\"1\":{\"148\":2}}],[\"45\",{\"1\":{\"148\":2}}],[\"4\",{\"0\":{\"84\":1,\"185\":1,\"190\":1,\"194\":1,\"323\":1,\"416\":1},\"1\":{\"13\":1,\"26\":1,\"103\":1,\"148\":2,\"187\":2,\"206\":1,\"208\":2,\"209\":3,\"210\":1,\"213\":1,\"214\":1,\"215\":3,\"216\":3,\"217\":2,\"218\":1,\"219\":2,\"220\":2,\"221\":1,\"222\":5,\"223\":1,\"224\":2,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"298\":1,\"325\":1,\"331\":1,\"408\":1}}],[\"37\",{\"1\":{\"298\":1}}],[\"31\",{\"1\":{\"221\":2}}],[\"38\",{\"1\":{\"215\":1}}],[\"32\",{\"1\":{\"215\":1}}],[\"36\",{\"1\":{\"215\":1}}],[\"30000\",{\"1\":{\"212\":2}}],[\"33\",{\"1\":{\"148\":4}}],[\"3p\",{\"1\":{\"99\":1}}],[\"3\",{\"0\":{\"83\":1,\"89\":1,\"184\":1,\"189\":1,\"193\":1,\"322\":1,\"415\":1},\"1\":{\"13\":1,\"29\":1,\"99\":1,\"103\":1,\"148\":2,\"187\":3,\"189\":2,\"206\":3,\"207\":1,\"208\":8,\"209\":6,\"210\":3,\"211\":1,\"212\":1,\"213\":1,\"214\":3,\"215\":4,\"216\":4,\"217\":6,\"218\":2,\"219\":4,\"220\":3,\"221\":3,\"222\":4,\"223\":3,\"224\":3,\"225\":1,\"226\":4,\"227\":3,\"228\":3,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"298\":4,\"315\":1,\"325\":1,\"333\":1,\"408\":2}}],[\"262标准文件\",{\"1\":{\"407\":1}}],[\"260\",{\"1\":{\"375\":1}}],[\"255\",{\"1\":{\"374\":1}}],[\"218\",{\"1\":{\"375\":1}}],[\"21\",{\"1\":{\"215\":2}}],[\"27\",{\"1\":{\"215\":2}}],[\"2024年\",{\"1\":{\"409\":1}}],[\"2020\",{\"1\":{\"129\":1}}],[\"2015年6月\",{\"1\":{\"408\":1}}],[\"2011年6月\",{\"1\":{\"408\":1}}],[\"2013年12月\",{\"1\":{\"408\":1}}],[\"2013年3月\",{\"1\":{\"408\":1}}],[\"2013\",{\"1\":{\"221\":2}}],[\"2010\",{\"1\":{\"191\":1}}],[\"20\",{\"1\":{\"215\":2,\"301\":1}}],[\"2008年\",{\"1\":{\"408\":1}}],[\"2007年\",{\"1\":{\"408\":1}}],[\"2000年\",{\"1\":{\"408\":1}}],[\"20000\",{\"1\":{\"191\":1,\"212\":4}}],[\"2009年12月\",{\"1\":{\"408\":1}}],[\"2009\",{\"1\":{\"191\":1}}],[\"224\",{\"1\":{\"375\":1}}],[\"220v\",{\"1\":{\"187\":2}}],[\"22\",{\"1\":{\"148\":2}}],[\"230\",{\"1\":{\"375\":1}}],[\"230816\",{\"0\":{\"322\":1,\"323\":1}}],[\"23种设计模式\",{\"1\":{\"186\":1}}],[\"23\",{\"1\":{\"148\":2}}],[\"24\",{\"1\":{\"148\":2}}],[\"2dd\",{\"1\":{\"99\":1}}],[\"2的n次方\",{\"1\":{\"26\":1}}],[\"2\",{\"0\":{\"82\":1,\"88\":1,\"183\":1,\"188\":1,\"192\":1,\"316\":1,\"321\":1,\"350\":1,\"414\":1},\"1\":{\"13\":1,\"29\":1,\"147\":3,\"148\":3,\"187\":6,\"188\":4,\"189\":3,\"206\":4,\"207\":2,\"208\":6,\"209\":9,\"210\":4,\"211\":1,\"212\":4,\"213\":4,\"214\":5,\"215\":5,\"216\":6,\"217\":6,\"218\":4,\"219\":4,\"220\":3,\"221\":4,\"222\":7,\"223\":6,\"224\":5,\"225\":1,\"226\":5,\"227\":4,\"228\":4,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"237\":2,\"298\":4,\"301\":1,\"302\":1,\"315\":1,\"325\":1,\"332\":1,\"408\":1,\"413\":3}}],[\"18\",{\"0\":{\"430\":1}}],[\"1发布\",{\"1\":{\"408\":1}}],[\"14\",{\"0\":{\"426\":1}}],[\"147\",{\"1\":{\"375\":1}}],[\"140\",{\"1\":{\"191\":1}}],[\"17\",{\"0\":{\"429\":1},\"1\":{\"223\":1}}],[\"16\",{\"0\":{\"428\":1},\"1\":{\"221\":2}}],[\"123\",{\"1\":{\"298\":1,\"301\":1}}],[\"12\",{\"0\":{\"424\":1},\"1\":{\"215\":1,\"223\":1}}],[\"135\",{\"1\":{\"375\":1}}],[\"132\",{\"1\":{\"374\":1}}],[\"13px\",{\"1\":{\"315\":1}}],[\"13\",{\"0\":{\"425\":1},\"1\":{\"215\":1}}],[\"150\",{\"1\":{\"375\":1}}],[\"15\",{\"0\":{\"427\":1},\"1\":{\"215\":1,\"223\":3,\"226\":1}}],[\"1999年\",{\"1\":{\"408\":1}}],[\"1998年\",{\"1\":{\"408\":1}}],[\"1997年\",{\"1\":{\"408\":1}}],[\"1996年\",{\"1\":{\"407\":1}}],[\"1995年\",{\"1\":{\"407\":1}}],[\"1991年\",{\"1\":{\"407\":1}}],[\"1991\",{\"1\":{\"191\":1}}],[\"19\",{\"0\":{\"431\":1},\"1\":{\"215\":1}}],[\"19th\",{\"1\":{\"123\":1,\"367\":1}}],[\"1个时\",{\"1\":{\"148\":1}}],[\"1次\",{\"1\":{\"148\":1}}],[\"11\",{\"0\":{\"423\":1}}],[\"111\",{\"1\":{\"305\":1}}],[\"1111\",{\"1\":{\"13\":1,\"223\":1}}],[\"1110\",{\"1\":{\"13\":1}}],[\"110v\",{\"1\":{\"187\":2}}],[\"110\",{\"1\":{\"148\":2}}],[\"1101\",{\"1\":{\"13\":1}}],[\"1100\",{\"1\":{\"13\":1}}],[\"10mb\",{\"1\":{\"216\":4}}],[\"10\",{\"0\":{\"422\":1},\"1\":{\"210\":4,\"215\":2,\"218\":3,\"223\":3,\"226\":9,\"229\":3,\"298\":2,\"301\":1,\"374\":3,\"413\":3}}],[\"1011\",{\"1\":{\"13\":1}}],[\"1010\",{\"1\":{\"13\":1,\"223\":1}}],[\"100\",{\"1\":{\"210\":8,\"215\":23}}],[\"100idesu\",{\"1\":{\"99\":1}}],[\"1001\",{\"1\":{\"13\":1}}],[\"10000\",{\"1\":{\"212\":8}}],[\"1000\",{\"1\":{\"13\":1,\"301\":1}}],[\"1\",{\"0\":{\"79\":1,\"81\":1,\"87\":1,\"180\":1,\"182\":1,\"187\":1,\"191\":1,\"315\":1,\"320\":1,\"349\":1,\"413\":1},\"1\":{\"13\":1,\"14\":1,\"26\":1,\"29\":1,\"103\":1,\"118\":1,\"120\":1,\"129\":1,\"131\":2,\"142\":2,\"147\":4,\"148\":5,\"165\":2,\"187\":8,\"188\":4,\"189\":3,\"191\":3,\"206\":4,\"207\":2,\"208\":6,\"209\":9,\"210\":4,\"211\":1,\"212\":4,\"213\":4,\"214\":5,\"215\":5,\"216\":6,\"217\":6,\"218\":5,\"219\":4,\"220\":3,\"221\":4,\"222\":7,\"223\":6,\"224\":5,\"225\":1,\"226\":5,\"227\":4,\"228\":4,\"229\":1,\"230\":1,\"231\":1,\"232\":3,\"233\":1,\"234\":1,\"235\":1,\"236\":3,\"298\":6,\"301\":1,\"302\":1,\"315\":1,\"325\":1,\"364\":1,\"370\":1,\"378\":1,\"408\":2,\"413\":2}}],[\"0开始不再提供浏览器版本\",{\"1\":{\"410\":1}}],[\"0b1010\",{\"1\":{\"298\":1}}],[\"0xf00d\",{\"1\":{\"298\":1}}],[\"05\",{\"1\":{\"221\":2}}],[\"04\",{\"1\":{\"191\":1}}],[\"03\",{\"1\":{\"191\":1}}],[\"02\",{\"1\":{\"191\":1}}],[\"0y$\",{\"1\":{\"99\":1}}],[\"0的电路\",{\"1\":{\"26\":1}}],[\"01\",{\"1\":{\"191\":2}}],[\"0111\",{\"1\":{\"13\":1}}],[\"0110\",{\"1\":{\"13\":1}}],[\"0101\",{\"1\":{\"13\":1}}],[\"0100\",{\"1\":{\"13\":1}}],[\"0011\",{\"1\":{\"13\":1}}],[\"0010\",{\"1\":{\"13\":1}}],[\"0001\",{\"1\":{\"13\":1}}],[\"0000\",{\"1\":{\"13\":1}}],[\"0\",{\"1\":{\"13\":2,\"14\":1,\"99\":1,\"142\":1,\"145\":1,\"147\":1,\"148\":9,\"222\":1,\"225\":1,\"228\":1,\"231\":1,\"232\":6,\"236\":6,\"298\":1,\"301\":1,\"325\":1,\"374\":3,\"408\":5,\"413\":3}}],[\"其后的版本完全继承\",{\"1\":{\"408\":1}}],[\"其次才考虑使用继承关系来实现\",{\"1\":{\"245\":1}}],[\"其他\",{\"1\":{\"318\":1}}],[\"其他步骤在子类实现\",{\"1\":{\"227\":1}}],[\"其他输入设备\",{\"1\":{\"35\":1}}],[\"其叶子和树枝的声明都是实现类\",{\"1\":{\"212\":1}}],[\"其中c\",{\"1\":{\"221\":1}}],[\"其中\",{\"1\":{\"210\":1,\"212\":1,\"213\":1}}],[\"其中运算器和控制器结合起来称为cpu\",{\"1\":{\"8\":1}}],[\"其通常由各个部分的子对象用一定的算法构成\",{\"1\":{\"188\":1}}],[\"其实设计模式就是从大型软件架构出发\",{\"1\":{\"242\":1}}],[\"其实内部被适配成了\",{\"1\":{\"187\":1}}],[\"其实就是一堆编码套路\",{\"1\":{\"179\":1}}],[\"其实现过程也是不同的\",{\"1\":{\"160\":1}}],[\"其实差异不太大\",{\"1\":{\"79\":1}}],[\"其它趣味算法\",{\"1\":{\"148\":1}}],[\"其前必须加\",{\"1\":{\"13\":1}}],[\"后端业务模块分析与拆分\",{\"1\":{\"284\":1}}],[\"后面的具体设计中我们会提到这点\",{\"1\":{\"239\":1}}],[\"后处理\",{\"1\":{\"234\":1}}],[\"后悔药\",{\"1\":{\"222\":2}}],[\"后\",{\"1\":{\"213\":1}}],[\"后者相当于实现化\",{\"1\":{\"210\":1}}],[\"后者以存储器为中心\",{\"1\":{\"11\":1}}],[\"后继关系\",{\"1\":{\"165\":1}}],[\"后缀为h\",{\"1\":{\"13\":1}}],[\"后缀为b\",{\"1\":{\"13\":1}}],[\"后缀为d\",{\"1\":{\"13\":1}}],[\"逢r进1\",{\"1\":{\"13\":1}}],[\"指的是两个或者两个以上同名函数\",{\"1\":{\"301\":1}}],[\"指的是从求解问题的数学模型中抽象出来的数据逻辑结构和运算\",{\"1\":{\"163\":1}}],[\"指描述数据结构的方法不依赖于具体实现\",{\"1\":{\"163\":1}}],[\"指标\",{\"1\":{\"143\":1}}],[\"指定好根目录和环境版本\",{\"1\":{\"83\":1}}],[\"指令译码器\",{\"1\":{\"29\":1}}],[\"指令寄存器\",{\"1\":{\"29\":1}}],[\"指令操作控制\",{\"1\":{\"29\":1}}],[\"指令系统层\",{\"1\":{\"10\":1}}],[\"指令系统与性能\",{\"0\":{\"28\":1},\"1\":{\"3\":1}}],[\"指令系统\",{\"0\":{\"27\":1},\"1\":{\"3\":1}}],[\"指计算机所能执行的全部指令的集合\",{\"1\":{\"27\":1}}],[\"指基数r的i次幂\",{\"1\":{\"13\":1}}],[\"指进制数中数码所允许取值的个数\",{\"1\":{\"13\":1}}],[\"物理上最可靠\",{\"1\":{\"12\":1}}],[\"c2\",{\"1\":{\"377\":1}}],[\"c1\",{\"1\":{\"377\":2}}],[\"css\",{\"0\":{\"291\":1,\"317\":1}}],[\"cgo\",{\"1\":{\"231\":3}}],[\"cup\",{\"1\":{\"382\":1}}],[\"curd\",{\"1\":{\"287\":1}}],[\"current\",{\"1\":{\"222\":2}}],[\"custom\",{\"0\":{\"364\":1},\"1\":{\"364\":20}}],[\"customers\",{\"1\":{\"225\":2}}],[\"customer4\",{\"1\":{\"225\":2}}],[\"customer3\",{\"1\":{\"225\":2}}],[\"customer2\",{\"1\":{\"225\":2}}],[\"customer1\",{\"1\":{\"225\":2}}],[\"customerfactory\",{\"1\":{\"225\":8}}],[\"customer\",{\"1\":{\"225\":3}}],[\"customize\",{\"1\":{\"107\":1}}],[\"ctri\",{\"1\":{\"222\":1}}],[\"ctrl\",{\"1\":{\"99\":2}}],[\"ctrl+s\",{\"1\":{\"99\":1}}],[\"ctrl+v\",{\"1\":{\"99\":1}}],[\"ctrl+v可以进入可视模式\",{\"1\":{\"98\":1}}],[\"ctrl+r\",{\"1\":{\"99\":1}}],[\"center\",{\"1\":{\"368\":1}}],[\"centos\",{\"1\":{\"79\":1}}],[\"ceo\",{\"1\":{\"212\":7}}],[\"cli\",{\"1\":{\"284\":1}}],[\"client\",{\"1\":{\"230\":10,\"231\":10,\"234\":11,\"235\":2,\"236\":1}}],[\"close\",{\"0\":{\"239\":1}}],[\"clonable\",{\"1\":{\"209\":1}}],[\"clonedshape3\",{\"1\":{\"209\":2}}],[\"clonedshape2\",{\"1\":{\"209\":2}}],[\"clonedshape\",{\"1\":{\"209\":2}}],[\"clonenotsupportedexception\",{\"1\":{\"209\":1}}],[\"clone\",{\"0\":{\"253\":1},\"1\":{\"209\":9,\"253\":1}}],[\"cloneable\",{\"1\":{\"209\":4}}],[\"clear和vertical\",{\"1\":{\"395\":1}}],[\"clear\",{\"1\":{\"218\":1}}],[\"clerk2\",{\"1\":{\"212\":2}}],[\"clerk1\",{\"1\":{\"212\":2}}],[\"classloder\",{\"1\":{\"208\":2}}],[\"class\",{\"0\":{\"429\":1},\"1\":{\"206\":5,\"207\":11,\"208\":10,\"209\":6,\"210\":5,\"211\":7,\"212\":2,\"213\":5,\"214\":5,\"215\":3,\"216\":3,\"217\":5,\"218\":5,\"219\":4,\"220\":3,\"221\":3,\"222\":4,\"223\":6,\"224\":4,\"225\":5,\"226\":5,\"227\":4,\"228\":6,\"229\":4,\"230\":6,\"231\":6,\"232\":4,\"233\":5,\"234\":7,\"235\":6,\"236\":3,\"328\":1}}],[\"circlemap\",{\"1\":{\"215\":3}}],[\"circle\",{\"1\":{\"206\":9,\"207\":9,\"209\":12,\"210\":9,\"213\":12,\"214\":8,\"215\":46}}],[\"civic\",{\"1\":{\"191\":3}}],[\"cricket\",{\"1\":{\"227\":9}}],[\"criteriapatterndemo\",{\"1\":{\"211\":2}}],[\"criteriasingle\",{\"1\":{\"211\":3}}],[\"criteriafemale\",{\"1\":{\"211\":3}}],[\"criteriamale\",{\"1\":{\"211\":3}}],[\"criteria\",{\"0\":{\"211\":1},\"1\":{\"183\":1,\"211\":33}}],[\"creating\",{\"1\":{\"215\":6,\"235\":4}}],[\"creator\",{\"1\":{\"207\":1}}],[\"create\",{\"1\":{\"110\":1,\"131\":1,\"163\":1,\"191\":4}}],[\"chrome浏览器中如何防止input\",{\"0\":{\"322\":1}}],[\"chart\",{\"0\":{\"374\":1},\"1\":{\"374\":2,\"375\":1}}],[\"change\",{\"1\":{\"223\":4}}],[\"chatroom\",{\"1\":{\"221\":3}}],[\"chainpatterndemo\",{\"1\":{\"217\":2}}],[\"chain\",{\"0\":{\"217\":1},\"1\":{\"184\":1,\"234\":1}}],[\"checker\",{\"1\":{\"409\":2}}],[\"checked\",{\"1\":{\"208\":1}}],[\"check\",{\"1\":{\"298\":1,\"303\":1}}],[\"checkbox\",{\"1\":{\"212\":1}}],[\"choice\",{\"1\":{\"207\":3}}],[\"choosesort\",{\"1\":{\"148\":3}}],[\"chmod\",{\"1\":{\"85\":1}}],[\"cmd\",{\"0\":{\"496\":1},\"1\":{\"103\":3,\"218\":1}}],[\"cw\",{\"1\":{\"99\":1}}],[\"cp\",{\"1\":{\"85\":1,\"90\":1}}],[\"cpu\",{\"0\":{\"66\":1},\"1\":{\"29\":1}}],[\"cpu通过地址信号线\",{\"1\":{\"26\":1}}],[\"cpu再进行控制\",{\"1\":{\"11\":1}}],[\"cdots\",{\"1\":{\"120\":1,\"378\":1}}],[\"cd\",{\"1\":{\"85\":3,\"90\":1,\"103\":3}}],[\"cn\",{\"1\":{\"81\":1,\"273\":3}}],[\"callback\",{\"0\":{\"402\":1}}],[\"call\",{\"0\":{\"441\":1},\"1\":{\"327\":1,\"474\":1}}],[\"called\",{\"1\":{\"191\":2}}],[\"caretaker\",{\"1\":{\"222\":11}}],[\"car\",{\"1\":{\"191\":5}}],[\"catch\",{\"1\":{\"209\":1}}],[\"category\",{\"1\":{\"129\":1,\"375\":1}}],[\"cat\",{\"1\":{\"85\":2}}],[\"candidate\",{\"1\":{\"325\":1}}],[\"can\",{\"1\":{\"62\":1,\"104\":1,\"107\":2,\"110\":2,\"128\":1,\"129\":1,\"130\":1,\"131\":2,\"191\":2,\"305\":1,\"371\":1}}],[\"cached\",{\"1\":{\"235\":3,\"252\":1}}],[\"cachedshape\",{\"1\":{\"209\":2}}],[\"cache代理\",{\"1\":{\"216\":1}}],[\"cache\",{\"1\":{\"24\":1,\"235\":11}}],[\"core\",{\"0\":{\"509\":1}}],[\"coffee\",{\"1\":{\"382\":1}}],[\"coarsegrainedobject\",{\"1\":{\"231\":4}}],[\"coarse\",{\"1\":{\"231\":1}}],[\"colleague\",{\"1\":{\"221\":1}}],[\"colorname\",{\"1\":{\"298\":1}}],[\"colors\",{\"1\":{\"215\":3}}],[\"color3\",{\"1\":{\"207\":2}}],[\"color2\",{\"1\":{\"207\":2}}],[\"color1\",{\"1\":{\"207\":2}}],[\"colorfactory\",{\"1\":{\"207\":7}}],[\"color\",{\"1\":{\"122\":1,\"207\":21,\"210\":4,\"213\":3,\"215\":38,\"298\":5,\"373\":1}}],[\"copy\",{\"1\":{\"216\":1}}],[\"count\",{\"1\":{\"191\":1}}],[\"couple\",{\"1\":{\"1\":1}}],[\"code\",{\"0\":{\"116\":1,\"366\":1,\"381\":1},\"1\":{\"301\":3,\"364\":2}}],[\"com\",{\"1\":{\"273\":2}}],[\"computer\",{\"1\":{\"228\":13}}],[\"computerpartdisplayvisitor\",{\"1\":{\"228\":4}}],[\"computerpartvisitor\",{\"1\":{\"228\":18}}],[\"computerpart\",{\"1\":{\"228\":9}}],[\"compositeentitypatterndemo\",{\"1\":{\"231\":2,\"232\":1}}],[\"compositeentity\",{\"1\":{\"231\":8}}],[\"compositepatterndemo\",{\"1\":{\"212\":2}}],[\"composite\",{\"0\":{\"212\":1,\"231\":1,\"245\":1},\"1\":{\"183\":1,\"185\":1,\"231\":1}}],[\"components\",{\"0\":{\"131\":1},\"1\":{\"131\":1}}],[\"component\",{\"0\":{\"124\":1},\"1\":{\"131\":1,\"212\":1,\"213\":2}}],[\"compiler\",{\"1\":{\"156\":1,\"298\":1}}],[\"comfortable\",{\"1\":{\"96\":1}}],[\"commonjs\",{\"0\":{\"494\":1},\"1\":{\"191\":1,\"193\":1}}],[\"comments\",{\"1\":{\"107\":1}}],[\"comment\",{\"1\":{\"104\":1,\"127\":1}}],[\"community\",{\"1\":{\"76\":1}}],[\"commandpatterndemo\",{\"1\":{\"218\":2}}],[\"command\",{\"0\":{\"73\":1,\"218\":1},\"1\":{\"184\":1,\"191\":1,\"218\":2}}],[\"cond\",{\"1\":{\"376\":2}}],[\"cond=>condition\",{\"1\":{\"376\":1}}],[\"const\",{\"0\":{\"413\":1},\"1\":{\"191\":1,\"301\":2,\"364\":1}}],[\"constructor\",{\"1\":{\"182\":1,\"191\":1}}],[\"consolelogger\",{\"1\":{\"217\":6}}],[\"console\",{\"1\":{\"148\":7,\"191\":6,\"217\":6,\"298\":3,\"413\":6}}],[\"concrete\",{\"1\":{\"232\":1}}],[\"concat\",{\"1\":{\"148\":2}}],[\"concept\",{\"1\":{\"112\":1,\"360\":1}}],[\"converted\",{\"1\":{\"131\":1}}],[\"convert\",{\"1\":{\"110\":1}}],[\"context\",{\"1\":{\"219\":9,\"224\":22,\"226\":17,\"233\":1,\"235\":5}}],[\"contents\",{\"1\":{\"107\":1}}],[\"content\",{\"0\":{\"130\":1},\"1\":{\"62\":1,\"113\":1,\"127\":1,\"361\":1,\"384\":1,\"395\":2}}],[\"control\",{\"1\":{\"191\":1}}],[\"controller\",{\"0\":{\"233\":1},\"1\":{\"185\":1,\"229\":6,\"233\":1,\"283\":1}}],[\"contributors\",{\"1\":{\"104\":1,\"107\":1}}],[\"container\",{\"0\":{\"364\":1},\"1\":{\"212\":1,\"220\":4,\"364\":10}}],[\"contain\",{\"1\":{\"107\":1}}],[\"contains\",{\"1\":{\"107\":1,\"211\":1,\"219\":1}}],[\"configurable\",{\"1\":{\"191\":4}}],[\"configuration\",{\"1\":{\"61\":1,\"62\":1,\"112\":1,\"360\":1,\"380\":1}}],[\"config\",{\"0\":{\"112\":1,\"127\":1,\"360\":1,\"380\":1},\"1\":{\"62\":1,\"129\":1,\"191\":2},\"2\":{\"133\":1}}],[\"c\",{\"1\":{\"13\":1,\"103\":1,\"147\":1,\"298\":1,\"301\":1}}],[\"集合\",{\"1\":{\"161\":1}}],[\"集中式仲裁\",{\"1\":{\"42\":1}}],[\"集中顺序控制的串行机制\",{\"1\":{\"11\":1}}],[\"集成电路时代\",{\"1\":{\"5\":1}}],[\"微程序设计层\",{\"1\":{\"10\":1}}],[\"电子商务\",{\"1\":{\"6\":1}}],[\"电子管时代\",{\"1\":{\"5\":1}}],[\"人工智能\",{\"1\":{\"6\":1}}],[\"制造\",{\"1\":{\"6\":1}}],[\"机场调度系统\",{\"1\":{\"221\":1}}],[\"机制来保证初始化\",{\"1\":{\"208\":1}}],[\"机制避免了多线程的同步问题\",{\"1\":{\"208\":1}}],[\"机器运算加减法要比乘除法要快很多\",{\"1\":{\"143\":1}}],[\"机器内的存储形式\",{\"1\":{\"14\":1}}],[\"机械\",{\"1\":{\"6\":1}}],[\"机群系统\",{\"0\":{\"57\":1},\"1\":{\"3\":1}}],[\"科学计算\",{\"1\":{\"6\":1}}],[\"超级规模集成电路时代\",{\"1\":{\"5\":1}}],[\"超大规模集成电路时代\",{\"1\":{\"5\":1}}],[\"晶体管时代\",{\"1\":{\"5\":1}}],[\"码点\",{\"0\":{\"58\":1},\"1\":{\"3\":1}}],[\"多个空格会被合成一个空格\",{\"1\":{\"392\":1}}],[\"多个类相互耦合\",{\"1\":{\"221\":1}}],[\"多很多\",{\"1\":{\"302\":1}}],[\"多层装饰比较复杂\",{\"1\":{\"213\":1}}],[\"多数人知晓的\",{\"1\":{\"179\":1}}],[\"多维数组\",{\"1\":{\"161\":1}}],[\"多行操作\",{\"1\":{\"99\":1}}],[\"多处理机软件和典型的多处理机系统\",{\"0\":{\"56\":1},\"1\":{\"3\":1}}],[\"多处理机系统特点与分类\",{\"0\":{\"55\":1},\"1\":{\"3\":1}}],[\"多处理机与机群系统\",{\"0\":{\"54\":1},\"1\":{\"3\":1}}],[\"多级存储体系结构\",{\"0\":{\"24\":1},\"1\":{\"3\":1}}],[\"互连网络的消息传递机制\",{\"0\":{\"53\":1},\"1\":{\"3\":1}}],[\"互连网络的概念\",{\"0\":{\"50\":1},\"1\":{\"3\":1}}],[\"ssr\",{\"0\":{\"390\":1}}],[\"src\",{\"1\":{\"303\":2,\"379\":1}}],[\"sdk\",{\"1\":{\"237\":2}}],[\"sql\",{\"1\":{\"219\":1}}],[\"square\",{\"1\":{\"206\":9,\"207\":9,\"209\":12,\"214\":8}}],[\"smart\",{\"1\":{\"216\":1}}],[\"swing\",{\"1\":{\"212\":1}}],[\"swap\",{\"1\":{\"142\":1}}],[\"symbol\",{\"0\":{\"421\":1,\"462\":1},\"1\":{\"452\":1,\"454\":1,\"462\":1}}],[\"synchronization\",{\"1\":{\"216\":1}}],[\"synchronized\",{\"1\":{\"208\":4}}],[\"syntax\",{\"1\":{\"113\":1,\"114\":1,\"115\":1,\"131\":1,\"361\":1,\"362\":1,\"363\":1}}],[\"system\",{\"1\":{\"206\":3,\"207\":6,\"208\":1,\"209\":6,\"210\":2,\"211\":5,\"212\":3,\"213\":6,\"214\":3,\"215\":2,\"216\":3,\"217\":3,\"218\":2,\"219\":2,\"220\":1,\"221\":1,\"222\":3,\"223\":5,\"224\":4,\"225\":5,\"226\":3,\"227\":7,\"228\":4,\"229\":3,\"230\":2,\"231\":1,\"232\":4,\"233\":4,\"234\":3,\"235\":5,\"236\":4}}],[\"spirng\",{\"1\":{\"227\":1}}],[\"spring\",{\"1\":{\"216\":1}}],[\"speed\",{\"1\":{\"191\":1}}],[\"splice\",{\"1\":{\"148\":1,\"191\":1}}],[\"space\",{\"1\":{\"143\":1}}],[\"scoped>\",{\"1\":{\"501\":1}}],[\"scss未生效\",{\"0\":{\"320\":1}}],[\"scatter\",{\"1\":{\"374\":3}}],[\"scales\",{\"1\":{\"374\":1}}],[\"scale\",{\"0\":{\"315\":1}}],[\"scanformin\",{\"1\":{\"142\":1}}],[\"scripts\",{\"1\":{\"303\":1}}],[\"screen\",{\"1\":{\"99\":3}}],[\"scheme\",{\"1\":{\"122\":1,\"373\":1}}],[\"simple\",{\"1\":{\"273\":5}}],[\"simd\",{\"0\":{\"48\":1,\"49\":1},\"1\":{\"3\":2}}],[\"singleorfemale\",{\"1\":{\"211\":2}}],[\"singleobject\",{\"1\":{\"208\":12}}],[\"singlemale\",{\"1\":{\"211\":2}}],[\"single\",{\"1\":{\"211\":21}}],[\"singlepersons\",{\"1\":{\"211\":3}}],[\"singletonholder\",{\"1\":{\"208\":4}}],[\"singletonpatterndemo\",{\"1\":{\"208\":2}}],[\"singleton\",{\"0\":{\"208\":1},\"1\":{\"182\":2,\"191\":1,\"196\":1,\"208\":39}}],[\"size\",{\"1\":{\"122\":1,\"315\":1,\"373\":1}}],[\"sites\",{\"1\":{\"110\":1}}],[\"sidebar\",{\"1\":{\"104\":1,\"107\":1}}],[\"s\",{\"1\":{\"99\":3,\"128\":1,\"129\":1,\"147\":1,\"191\":1}}],[\"sat\",{\"1\":{\"375\":1}}],[\"safely\",{\"1\":{\"364\":2}}],[\"save\",{\"1\":{\"303\":1}}],[\"saved\",{\"1\":{\"222\":4}}],[\"savestatetomemento\",{\"1\":{\"222\":3}}],[\"saveas\",{\"1\":{\"99\":1}}],[\"salesexecutive2\",{\"1\":{\"212\":2}}],[\"salesexecutive1\",{\"1\":{\"212\":2}}],[\"sales\",{\"1\":{\"212\":6}}],[\"sal\",{\"1\":{\"212\":2}}],[\"salary+\",{\"1\":{\"212\":1}}],[\"salary\",{\"1\":{\"212\":10}}],[\"sam\",{\"1\":{\"24\":1}}],[\"stylize\",{\"0\":{\"382\":1}}],[\"studentbusinessobject\",{\"1\":{\"236\":4}}],[\"studentbo\",{\"1\":{\"236\":6}}],[\"studentvo\",{\"1\":{\"236\":12}}],[\"studentview\",{\"1\":{\"229\":6,\"233\":7}}],[\"student2\",{\"1\":{\"232\":2,\"236\":2}}],[\"student1\",{\"1\":{\"232\":2,\"236\":2}}],[\"students\",{\"1\":{\"232\":8,\"236\":8}}],[\"studentdaoimpl\",{\"1\":{\"232\":4}}],[\"studentdao\",{\"1\":{\"232\":9}}],[\"studentcontroller\",{\"1\":{\"229\":6}}],[\"studentrollno\",{\"1\":{\"229\":2}}],[\"studentname\",{\"1\":{\"229\":2}}],[\"student\",{\"1\":{\"229\":15,\"232\":36,\"233\":5,\"236\":19}}],[\"stop\",{\"1\":{\"224\":4}}],[\"stopstate\",{\"1\":{\"224\":6}}],[\"stock\",{\"1\":{\"218\":12}}],[\"standard\",{\"1\":{\"217\":4,\"237\":2}}],[\"status\",{\"1\":{\"211\":15,\"301\":4}}],[\"static\",{\"1\":{\"206\":1,\"207\":2,\"208\":14,\"209\":4,\"210\":1,\"211\":2,\"212\":1,\"213\":1,\"214\":1,\"215\":7,\"216\":1,\"217\":5,\"218\":1,\"219\":3,\"220\":1,\"221\":2,\"222\":1,\"223\":1,\"224\":1,\"225\":3,\"226\":1,\"227\":1,\"228\":1,\"229\":2,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":4,\"236\":1}}],[\"statepatterndemo\",{\"1\":{\"224\":2}}],[\"state\",{\"0\":{\"224\":1},\"1\":{\"184\":1,\"222\":27,\"223\":9,\"224\":22}}],[\"started\",{\"1\":{\"227\":4}}],[\"startplay\",{\"1\":{\"227\":4}}],[\"startstate\",{\"1\":{\"224\":6}}],[\"startindex\",{\"1\":{\"191\":2}}],[\"startingwith\",{\"1\":{\"305\":1}}],[\"starting\",{\"1\":{\"130\":1,\"305\":1}}],[\"start\",{\"1\":{\"103\":3,\"224\":4,\"227\":4}}],[\"strawman\",{\"1\":{\"325\":1}}],[\"strategies\",{\"1\":{\"231\":1}}],[\"strategypatterndemo\",{\"1\":{\"226\":2}}],[\"strategy\",{\"0\":{\"226\":1},\"1\":{\"184\":1,\"226\":13}}],[\"str\",{\"1\":{\"301\":4}}],[\"strut\",{\"1\":{\"393\":1}}],[\"struts\",{\"1\":{\"218\":1}}],[\"struts2\",{\"1\":{\"217\":1}}],[\"structuredev\",{\"0\":{\"505\":1}}],[\"structure\",{\"1\":{\"110\":1}}],[\"string\",{\"0\":{\"461\":1},\"1\":{\"206\":2,\"207\":8,\"208\":1,\"209\":7,\"210\":1,\"211\":10,\"212\":6,\"213\":1,\"214\":1,\"215\":7,\"216\":6,\"217\":6,\"218\":2,\"219\":7,\"220\":4,\"221\":7,\"222\":7,\"223\":10,\"224\":3,\"225\":8,\"226\":1,\"227\":1,\"228\":1,\"229\":13,\"230\":4,\"231\":16,\"232\":5,\"233\":4,\"234\":8,\"235\":7,\"236\":5,\"298\":8,\"301\":9,\"454\":1}}],[\"stringbuilder\",{\"1\":{\"188\":1}}],[\"stronger\",{\"1\":{\"96\":1}}],[\"steps\",{\"0\":{\"96\":1}}],[\"sftp\",{\"0\":{\"89\":1},\"1\":{\"89\":1}}],[\"sz\",{\"1\":{\"88\":2}}],[\"sun\",{\"1\":{\"375\":1}}],[\"successfully\",{\"1\":{\"233\":3}}],[\"subgraph\",{\"1\":{\"377\":3}}],[\"submodule\",{\"0\":{\"252\":1},\"1\":{\"252\":1}}],[\"substitution\",{\"0\":{\"240\":1}}],[\"subscript\",{\"0\":{\"123\":1,\"367\":1}}],[\"subject\",{\"1\":{\"223\":32}}],[\"subordinates\",{\"1\":{\"212\":5}}],[\"sum1\",{\"1\":{\"301\":2}}],[\"sum\",{\"1\":{\"120\":1,\"301\":4,\"378\":1}}],[\"super\",{\"1\":{\"209\":1,\"210\":1,\"213\":1}}],[\"superscript\",{\"0\":{\"123\":1,\"367\":1}}],[\"superpower\",{\"1\":{\"96\":1}}],[\"support\",{\"1\":{\"122\":1,\"265\":1,\"269\":1,\"373\":1}}],[\"supports\",{\"1\":{\"113\":1,\"361\":1}}],[\"survive\",{\"1\":{\"96\":1}}],[\"su\",{\"1\":{\"85\":1}}],[\"shrink\",{\"1\":{\"395\":1}}],[\"show\",{\"1\":{\"233\":4}}],[\"showmessage\",{\"1\":{\"208\":2,\"221\":2}}],[\"should\",{\"1\":{\"61\":1,\"110\":1,\"305\":1}}],[\"shapemaker\",{\"1\":{\"214\":9}}],[\"shapemap\",{\"1\":{\"209\":6}}],[\"shapedecorator\",{\"1\":{\"213\":5}}],[\"shapekey\",{\"1\":{\"209\":1}}],[\"shapeid\",{\"1\":{\"209\":2}}],[\"shape>\",{\"1\":{\"209\":2,\"215\":1}}],[\"shapecache\",{\"1\":{\"209\":7}}],[\"shape3\",{\"1\":{\"206\":2,\"207\":2}}],[\"shape2\",{\"1\":{\"206\":2,\"207\":2}}],[\"shape1\",{\"1\":{\"206\":2,\"207\":2}}],[\"shapetype\",{\"1\":{\"206\":5,\"207\":6}}],[\"shapefactory\",{\"1\":{\"206\":8,\"207\":7,\"215\":3}}],[\"shape\",{\"1\":{\"206\":9,\"207\":15,\"209\":21,\"210\":9,\"213\":19,\"214\":8,\"215\":4}}],[\"shift+i\",{\"1\":{\"99\":1}}],[\"shift+g\",{\"1\":{\"99\":1}}],[\"shift+6\",{\"1\":{\"99\":1}}],[\"sh\",{\"1\":{\"81\":4}}],[\"se\",{\"1\":{\"379\":1}}],[\"segregation\",{\"0\":{\"243\":1}}],[\"session\",{\"1\":{\"227\":2}}],[\"second\",{\"1\":{\"222\":2,\"223\":2,\"231\":2}}],[\"senior\",{\"0\":{\"512\":1}}],[\"sendrequest\",{\"1\":{\"234\":2}}],[\"sendmessage\",{\"1\":{\"221\":3}}],[\"sentence\",{\"1\":{\"99\":2,\"298\":1}}],[\"self\",{\"1\":{\"395\":1}}],[\"sellstockorder\",{\"1\":{\"218\":2}}],[\"sellstock\",{\"1\":{\"218\":5}}],[\"sell\",{\"1\":{\"218\":2}}],[\"selectionsort\",{\"1\":{\"142\":1}}],[\"series\",{\"1\":{\"375\":1}}],[\"serializable\",{\"1\":{\"209\":1}}],[\"servlet\",{\"1\":{\"217\":1,\"230\":1}}],[\"servicename\",{\"1\":{\"235\":2}}],[\"services\",{\"1\":{\"235\":5}}],[\"service2\",{\"1\":{\"235\":13}}],[\"service1\",{\"1\":{\"235\":16}}],[\"servicelocatorpatterndemo\",{\"1\":{\"235\":2}}],[\"servicelocator\",{\"1\":{\"235\":8}}],[\"servicetype\",{\"1\":{\"230\":7}}],[\"service\",{\"0\":{\"235\":1},\"1\":{\"185\":1,\"230\":6,\"235\":32}}],[\"server等上面\",{\"1\":{\"72\":1}}],[\"server\",{\"1\":{\"72\":1},\"2\":{\"101\":1}}],[\"see\",{\"1\":{\"61\":1,\"62\":1,\"191\":1}}],[\"set和map数据结构\",{\"0\":{\"424\":1}}],[\"setfiltermanager\",{\"1\":{\"234\":2}}],[\"setfilter\",{\"1\":{\"234\":3}}],[\"settimeout\",{\"0\":{\"402\":1},\"1\":{\"301\":1}}],[\"settings\",{\"1\":{\"301\":1}}],[\"setting\",{\"1\":{\"104\":1,\"122\":1,\"373\":1}}],[\"setter\",{\"1\":{\"236\":1}}],[\"settarget\",{\"1\":{\"234\":2}}],[\"setdata\",{\"1\":{\"231\":11}}],[\"setservicetype\",{\"1\":{\"230\":3}}],[\"setstudentrollno\",{\"1\":{\"229\":1}}],[\"setstudentname\",{\"1\":{\"229\":2}}],[\"setstate\",{\"1\":{\"222\":5,\"223\":3,\"224\":3}}],[\"setname\",{\"1\":{\"221\":1,\"229\":3,\"232\":3,\"236\":3}}],[\"setnextlogger\",{\"1\":{\"217\":3}}],[\"setrollno\",{\"1\":{\"229\":3,\"232\":1,\"236\":1}}],[\"setradius\",{\"1\":{\"215\":2}}],[\"setredborder\",{\"1\":{\"213\":2}}],[\"sety\",{\"1\":{\"215\":2}}],[\"setx\",{\"1\":{\"215\":2}}],[\"setid\",{\"1\":{\"209\":4}}],[\"set\",{\"1\":{\"61\":1,\"62\":1,\"128\":1,\"129\":1,\"217\":1,\"232\":1}}],[\"soft\",{\"1\":{\"379\":1}}],[\"software\",{\"1\":{\"237\":1}}],[\"socket长连接\",{\"1\":{\"284\":1}}],[\"sold\",{\"1\":{\"218\":2}}],[\"sort\",{\"1\":{\"148\":1}}],[\"sortedarr\",{\"1\":{\"148\":3}}],[\"somekey\",{\"1\":{\"191\":6}}],[\"some\",{\"1\":{\"104\":1}}],[\"source\",{\"1\":{\"90\":1}}],[\"so\",{\"1\":{\"1\":1,\"110\":2}}],[\"十六进制\",{\"1\":{\"13\":1}}],[\"十进制\",{\"1\":{\"13\":1}}],[\"十一\",{\"0\":{\"54\":1},\"1\":{\"3\":1}}],[\"十\",{\"0\":{\"45\":1},\"1\":{\"3\":1}}],[\"九\",{\"0\":{\"38\":1,\"204\":1},\"1\":{\"3\":1}}],[\"外观类与系统耦合\",{\"1\":{\"214\":1}}],[\"外观模式定义了一个高层接口\",{\"1\":{\"214\":1}}],[\"外观模式\",{\"0\":{\"199\":1,\"214\":1},\"1\":{\"183\":1}}],[\"外排序\",{\"0\":{\"150\":1}}],[\"外部通信总线\",{\"1\":{\"43\":1}}],[\"外部cache\",{\"1\":{\"24\":1}}],[\"外存储设备\",{\"0\":{\"37\":1},\"1\":{\"3\":1}}],[\"外围设备的功能\",{\"1\":{\"34\":1}}],[\"外围设备的分类\",{\"1\":{\"34\":1}}],[\"外围设备的概述\",{\"1\":{\"34\":1}}],[\"外围设备概述\",{\"0\":{\"34\":1},\"1\":{\"3\":1}}],[\"外围设备\",{\"0\":{\"33\":1},\"1\":{\"3\":1}}],[\"输出所有的学生\",{\"1\":{\"232\":1,\"236\":1}}],[\"输出设备\",{\"0\":{\"36\":1},\"1\":{\"3\":1,\"8\":1}}],[\"输入模式下\",{\"1\":{\"99\":1}}],[\"输入模式\",{\"1\":{\"98\":1}}],[\"输入设备\",{\"0\":{\"35\":1},\"1\":{\"3\":1,\"8\":1}}],[\"输入输出方式\",{\"0\":{\"32\":1},\"1\":{\"3\":1}}],[\"输入接口与输出接口\",{\"0\":{\"31\":1},\"1\":{\"3\":1}}],[\"八\",{\"0\":{\"33\":1,\"203\":1},\"1\":{\"3\":1}}],[\"七种\",{\"0\":{\"453\":1}}],[\"七\",{\"0\":{\"30\":1,\"202\":1,\"245\":1},\"1\":{\"3\":1}}],[\"六管静态存储元\",{\"1\":{\"26\":1}}],[\"六\",{\"0\":{\"29\":1,\"201\":1,\"244\":1},\"1\":{\"3\":1}}],[\"五个重要特性\",{\"0\":{\"142\":1}}],[\"五大组成部分\",{\"1\":{\"8\":1}}],[\"五\",{\"0\":{\"27\":1,\"200\":1,\"243\":1},\"1\":{\"3\":1}}],[\"技术指标\",{\"0\":{\"25\":1},\"1\":{\"3\":1}}],[\"四位二进制数的编码与一位十六进制数的数码之间存在着一一对应的关系\",{\"1\":{\"13\":1}}],[\"四\",{\"0\":{\"199\":1,\"242\":1},\"1\":{\"3\":1}}],[\"浮点数的算术运算与浮点数运算器\",{\"0\":{\"22\":1},\"1\":{\"3\":1}}],[\"浮点数的表示\",{\"0\":{\"15\":1},\"1\":{\"3\":1}}],[\"三卷原著\",{\"1\":{\"332\":1}}],[\"三点运算符\",{\"1\":{\"301\":1}}],[\"三\",{\"0\":{\"18\":1,\"198\":1,\"241\":1},\"1\":{\"3\":1}}],[\"非数值数据的表示\",{\"0\":{\"16\":1},\"1\":{\"3\":1}}],[\"定案\",{\"1\":{\"325\":1}}],[\"定点运算器\",{\"0\":{\"21\":1},\"1\":{\"3\":1}}],[\"定点数的算术运算与实现\",{\"0\":{\"19\":1},\"1\":{\"3\":1}}],[\"定点数的表示\",{\"0\":{\"14\":1},\"1\":{\"3\":1}}],[\"定义过滤器\",{\"1\":{\"234\":1}}],[\"定义一个表示访问者的接口\",{\"1\":{\"228\":1}}],[\"定义一个表示元素的接口\",{\"1\":{\"228\":1}}],[\"定义一个操作中的算法的骨架\",{\"1\":{\"227\":1}}],[\"定义一个创建对象的接口\",{\"1\":{\"189\":1,\"206\":1}}],[\"定义一系列的算法\",{\"1\":{\"226\":1}}],[\"定义对象间的一种一对多的依赖关系\",{\"1\":{\"223\":1}}],[\"定义接口\",{\"1\":{\"220\":1}}],[\"定义终结符与非终结符\",{\"1\":{\"219\":1}}],[\"定义它的文法表示\",{\"1\":{\"219\":1}}],[\"定义三个角色\",{\"1\":{\"218\":1}}],[\"定义系统的入口\",{\"1\":{\"214\":1}}],[\"定义时为具体类\",{\"1\":{\"212\":1}}],[\"定义多个产品\",{\"1\":{\"207\":1}}],[\"定义了用例图\",{\"1\":{\"205\":1}}],[\"定义\",{\"0\":{\"141\":1,\"160\":1},\"1\":{\"2\":1,\"160\":1}}],[\"二段构建模式\",{\"0\":{\"197\":1}}],[\"二叉树\",{\"0\":{\"170\":1}}],[\"二元组\",{\"1\":{\"160\":1,\"165\":1}}],[\"二分法\",{\"0\":{\"147\":1}}],[\"二进制数组\",{\"0\":{\"423\":1}}],[\"二进制\",{\"1\":{\"13\":1}}],[\"二\",{\"0\":{\"12\":1,\"186\":1,\"197\":1,\"240\":1,\"304\":1},\"1\":{\"3\":1}}],[\"软件实体应当对扩展开放\",{\"1\":{\"239\":1}}],[\"软件管理\",{\"1\":{\"83\":1}}],[\"软件开发\",{\"0\":{\"64\":1}}],[\"软件设计的基础\",{\"1\":{\"27\":1}}],[\"软件\",{\"0\":{\"9\":1},\"1\":{\"3\":1}}],[\"软件建立在硬件的基础之上\",{\"0\":{\"3\":1}}],[\"计算机网络\",{\"0\":{\"71\":1}}],[\"计算机本身是无法识别数据的符号的\",{\"1\":{\"14\":1}}],[\"计算机内部职能识别二进制数\",{\"1\":{\"13\":1}}],[\"计算机处理的是数据是二进制\",{\"1\":{\"12\":1}}],[\"计算机辅助系统\",{\"1\":{\"6\":1}}],[\"计算机的应用\",{\"0\":{\"49\":1},\"1\":{\"3\":1}}],[\"计算机基本结构\",{\"0\":{\"48\":1},\"1\":{\"3\":1}}],[\"计算机基础\",{\"0\":{\"3\":1}}],[\"计算机中的总线\",{\"0\":{\"43\":1},\"1\":{\"3\":1}}],[\"计算机中数据表示\",{\"0\":{\"12\":1},\"1\":{\"3\":1}}],[\"计算机系统的层次结构\",{\"0\":{\"10\":1},\"1\":{\"3\":1}}],[\"计算机系统概论\",{\"0\":{\"4\":1},\"1\":{\"3\":1}}],[\"计算机组成\",{\"0\":{\"7\":1},\"1\":{\"3\":1}}],[\"计算机应用\",{\"0\":{\"6\":1},\"1\":{\"3\":1}}],[\"计算机发展\",{\"0\":{\"5\":1},\"1\":{\"3\":1}}],[\"一套存储变量用的设计良好规则\",{\"1\":{\"439\":1}}],[\"一篇关于设计模式的好文章\",{\"1\":{\"237\":1}}],[\"一张支票或银行存单是账户中资金的代理\",{\"1\":{\"216\":1}}],[\"一些方法通用\",{\"1\":{\"227\":1}}],[\"一些重复出现的问题可以用一种简单的语言来进行表达\",{\"1\":{\"219\":1}}],[\"一些设备管理器常常设计为单例模式\",{\"1\":{\"208\":1}}],[\"一些基本部件不会变\",{\"1\":{\"188\":1}}],[\"一整套一起换\",{\"1\":{\"207\":1}}],[\"一系列具体产品\",{\"1\":{\"207\":3}}],[\"一系列对象的状态变动将通知到观察者中\",{\"1\":{\"191\":1}}],[\"一个有趣的事实\",{\"1\":{\"452\":1}}],[\"一个有限指令集\",{\"1\":{\"141\":1}}],[\"一个实体应当尽量少地与其他实体之间发生相互作用\",{\"1\":{\"244\":1}}],[\"一个组合实体是一个\",{\"1\":{\"231\":1}}],[\"一个为客户端实体提供的入口类\",{\"1\":{\"230\":1}}],[\"一个抽象类公开定义了执行它的方法的方式\",{\"1\":{\"227\":1}}],[\"一个系统需要动态地在几种算法中选择一种\",{\"1\":{\"226\":1}}],[\"一个系统有许多许多类\",{\"1\":{\"226\":1}}],[\"一个系统如果太多出现这种情况\",{\"1\":{\"187\":1}}],[\"一个空对象取代\",{\"1\":{\"225\":1}}],[\"一个简单语法需要解释的场景\",{\"1\":{\"219\":1}}],[\"一个类应该有且仅有一个引起它变化的原因\",{\"1\":{\"242\":1}}],[\"一个类应该只关心内部逻辑\",{\"1\":{\"208\":1}}],[\"一个类的行为或其算法可以在运行时更改\",{\"1\":{\"226\":1}}],[\"一个类代表另一个类的功能\",{\"1\":{\"216\":1}}],[\"一个类存在两个独立变化的维度\",{\"1\":{\"210\":1}}],[\"一个对象\",{\"1\":{\"223\":1}}],[\"一个对象状态改变给其他对象通知的问题\",{\"1\":{\"223\":1}}],[\"一个对象需要提供给其他对象访问\",{\"1\":{\"209\":1}}],[\"一个对象需要在一个高代价的数据库操作之后被创建\",{\"1\":{\"209\":1}}],[\"一个对象多个修改者的场景\",{\"1\":{\"209\":1}}],[\"一个党只能有一个主席\",{\"1\":{\"208\":1}}],[\"一个全局使用的类频繁地创建与销毁\",{\"1\":{\"208\":1}}],[\"一个调用者想创建一个对象\",{\"1\":{\"189\":1,\"206\":1}}],[\"一个复杂对象\",{\"1\":{\"188\":1}}],[\"一个函数不仅要做好\",{\"1\":{\"173\":1}}],[\"一元多项式及其运算\",{\"0\":{\"166\":1}}],[\"一定在有限步骤之后终止\",{\"1\":{\"141\":1}}],[\"一台计算机指令系统的优劣直接影响着计算机系统的性能和功能\",{\"1\":{\"27\":1}}],[\"一般用一个数值代表某一状态\",{\"1\":{\"298\":1}}],[\"一般用于浏览文件\",{\"1\":{\"98\":1}}],[\"一般模板方法都加上\",{\"1\":{\"227\":1}}],[\"一般返回值\",{\"1\":{\"224\":1}}],[\"一般采用异步方式\",{\"1\":{\"223\":1}}],[\"一般的\",{\"1\":{\"213\":1}}],[\"一般情况下\",{\"1\":{\"208\":1}}],[\"一般\",{\"1\":{\"208\":1}}],[\"一般为install文件夹\",{\"1\":{\"84\":1}}],[\"一般为1\",{\"1\":{\"26\":1}}],[\"一般是和工厂方法模式一起出现\",{\"1\":{\"209\":1}}],[\"一般是\",{\"1\":{\"82\":1,\"219\":1}}],[\"一般是按字节编址\",{\"1\":{\"24\":1}}],[\"一般磁表面存储器\",{\"1\":{\"24\":1}}],[\"一一对应\",{\"1\":{\"24\":1}}],[\"一\",{\"0\":{\"4\":1,\"181\":1,\"196\":1,\"239\":1,\"303\":1},\"1\":{\"3\":1}}],[\"nvm\",{\"1\":{\"286\":6}}],[\"npx\",{\"0\":{\"260\":1},\"1\":{\"260\":1}}],[\"npm全局安装脚手架\",{\"1\":{\"284\":1}}],[\"npm\",{\"0\":{\"256\":1},\"1\":{\"258\":2,\"259\":1,\"260\":1,\"284\":1,\"297\":1,\"303\":2,\"409\":1},\"2\":{\"262\":1}}],[\"number\",{\"0\":{\"459\":1},\"1\":{\"298\":10,\"301\":13,\"454\":1}}],[\"num\",{\"1\":{\"298\":4,\"301\":3}}],[\"num2\",{\"1\":{\"226\":9}}],[\"num1\",{\"1\":{\"226\":9}}],[\"nullpatterndemo\",{\"1\":{\"225\":2}}],[\"nullcustomer\",{\"1\":{\"225\":4}}],[\"null\",{\"0\":{\"225\":1,\"456\":1},\"1\":{\"184\":1,\"191\":1,\"206\":3,\"207\":9,\"208\":4,\"209\":1,\"215\":1,\"216\":1,\"219\":4,\"220\":1,\"224\":1,\"225\":3,\"235\":3,\"298\":1,\"303\":2,\"454\":1,\"456\":1}}],[\"nrectangle\",{\"1\":{\"213\":1}}],[\"ncircle\",{\"1\":{\"213\":1}}],[\"none\",{\"0\":{\"400\":1}}],[\"nodejs对es6的支持度\",{\"0\":{\"409\":1}}],[\"nodejs\",{\"1\":{\"329\":1,\"409\":1}}],[\"nodejs版本切换工具\",{\"0\":{\"286\":1}}],[\"node\",{\"1\":{\"257\":1,\"260\":1,\"301\":1,\"303\":1,\"409\":2}}],[\"no\",{\"1\":{\"229\":3,\"232\":3,\"236\":3,\"376\":1}}],[\"normal\",{\"1\":{\"213\":2}}],[\"notsure\",{\"1\":{\"298\":5}}],[\"not\",{\"1\":{\"225\":3,\"502\":1}}],[\"notifyallobservers\",{\"1\":{\"223\":2}}],[\"notice\",{\"1\":{\"2\":1}}],[\"notation\",{\"1\":{\"191\":1}}],[\"nsingle\",{\"1\":{\"211\":2}}],[\"nfemales\",{\"1\":{\"211\":1}}],[\"n是表的长度\",{\"1\":{\"165\":1}}],[\"n>=1\",{\"1\":{\"165\":1}}],[\"nd\",{\"1\":{\"130\":1}}],[\"nginx\",{\"0\":{\"280\":1}}],[\"ng\",{\"1\":{\"99\":1}}],[\"navbar\",{\"1\":{\"104\":1,\"107\":1}}],[\"namesrepository\",{\"1\":{\"220\":2}}],[\"names\",{\"1\":{\"220\":3,\"225\":3}}],[\"namerepository\",{\"1\":{\"220\":5}}],[\"nameiterator\",{\"1\":{\"220\":3}}],[\"name\",{\"1\":{\"90\":2,\"196\":1,\"211\":20,\"212\":13,\"218\":5,\"220\":7,\"221\":8,\"225\":8,\"229\":10,\"232\":13,\"236\":13,\"284\":1,\"298\":4,\"301\":9}}],[\"nap\",{\"1\":{\"85\":1}}],[\"natural\",{\"1\":{\"1\":1}}],[\"never\",{\"1\":{\"298\":2}}],[\"nest\",{\"1\":{\"284\":1}}],[\"nestjs\",{\"0\":{\"281\":1},\"1\":{\"284\":1}}],[\"netscape\",{\"1\":{\"407\":1}}],[\"netstat\",{\"1\":{\"85\":1}}],[\"net\",{\"1\":{\"209\":1,\"220\":1}}],[\"newservice\",{\"1\":{\"235\":3}}],[\"newo\",{\"1\":{\"191\":9}}],[\"new\",{\"1\":{\"111\":1,\"189\":1,\"191\":6,\"206\":5,\"207\":8,\"208\":7,\"209\":5,\"210\":4,\"211\":15,\"212\":8,\"213\":5,\"214\":4,\"215\":2,\"216\":2,\"217\":3,\"218\":5,\"219\":6,\"220\":2,\"221\":3,\"222\":4,\"223\":5,\"224\":3,\"225\":2,\"226\":6,\"227\":2,\"228\":6,\"229\":3,\"230\":5,\"231\":6,\"232\":4,\"233\":4,\"234\":7,\"235\":9,\"236\":4,\"284\":1,\"298\":1,\"328\":1,\"359\":1,\"379\":1}}],[\"nextlogger\",{\"1\":{\"217\":6}}],[\"next\",{\"1\":{\"99\":1,\"104\":1,\"220\":4,\"298\":1}}],[\"need\",{\"1\":{\"62\":1,\"112\":1,\"360\":1}}],[\"n\",{\"1\":{\"26\":1,\"99\":2,\"142\":4,\"143\":6,\"147\":5,\"163\":1}}],[\"okay\",{\"1\":{\"298\":2}}],[\"ok\",{\"1\":{\"298\":2}}],[\"old\",{\"1\":{\"298\":1}}],[\"octal\",{\"1\":{\"223\":3}}],[\"octalobserver\",{\"1\":{\"223\":4}}],[\"othercriteriaitems\",{\"1\":{\"211\":2}}],[\"othercriteria\",{\"1\":{\"211\":10}}],[\"oo\",{\"1\":{\"207\":1}}],[\"ooad\",{\"1\":{\"205\":1}}],[\"ooa\",{\"1\":{\"205\":1}}],[\"override\",{\"1\":{\"206\":3,\"207\":10,\"209\":3,\"210\":2,\"211\":5,\"213\":3,\"214\":3,\"215\":1,\"216\":2,\"217\":3,\"219\":3,\"220\":3,\"223\":3,\"225\":4,\"226\":3,\"227\":6,\"228\":8,\"230\":2,\"232\":4,\"235\":2}}],[\"our\",{\"1\":{\"191\":1}}],[\"output\",{\"1\":{\"191\":1}}],[\"out\",{\"1\":{\"167\":1,\"168\":1,\"206\":3,\"207\":6,\"208\":1,\"209\":6,\"210\":2,\"211\":5,\"212\":3,\"213\":6,\"214\":3,\"215\":2,\"216\":3,\"217\":3,\"218\":2,\"219\":2,\"220\":1,\"221\":1,\"222\":3,\"223\":5,\"224\":4,\"225\":5,\"226\":3,\"227\":7,\"228\":4,\"229\":3,\"230\":2,\"231\":1,\"232\":4,\"233\":4,\"234\":3,\"235\":5,\"236\":4}}],[\"optimizelegibility\",{\"1\":{\"315\":1}}],[\"options\",{\"1\":{\"107\":1,\"374\":1,\"409\":2}}],[\"operationmultiply\",{\"1\":{\"226\":3}}],[\"operationsubstract\",{\"1\":{\"226\":3}}],[\"operationadd\",{\"1\":{\"226\":3}}],[\"open\",{\"0\":{\"239\":1},\"1\":{\"191\":1}}],[\"obj\",{\"1\":{\"191\":6}}],[\"object类型的变量只是允许你给它赋任意值\",{\"1\":{\"298\":1}}],[\"object有相似的作用\",{\"1\":{\"298\":1}}],[\"objects\",{\"1\":{\"191\":1}}],[\"object\",{\"0\":{\"225\":1,\"232\":1,\"236\":1,\"463\":1},\"1\":{\"184\":1,\"185\":2,\"191\":10,\"208\":3,\"209\":4,\"220\":2,\"231\":2,\"232\":4,\"235\":8,\"236\":2,\"237\":1,\"298\":3,\"455\":1,\"456\":1}}],[\"observerpatterndemo\",{\"1\":{\"223\":2}}],[\"observers\",{\"1\":{\"223\":3}}],[\"observerlist\",{\"1\":{\"191\":15}}],[\"observer\",{\"0\":{\"223\":1},\"1\":{\"184\":2,\"191\":1,\"223\":12}}],[\"own\",{\"1\":{\"131\":1}}],[\"omega^i\",{\"1\":{\"120\":1,\"378\":1}}],[\"omega^r\",{\"1\":{\"120\":1,\"378\":1}}],[\"omega\",{\"1\":{\"120\":4,\"378\":4}}],[\"oriented\",{\"1\":{\"237\":1}}],[\"originator\",{\"1\":{\"222\":18}}],[\"orexpression\",{\"1\":{\"219\":4}}],[\"orderlist\",{\"1\":{\"218\":4}}],[\"order\",{\"1\":{\"218\":11,\"395\":1}}],[\"orcriteria\",{\"1\":{\"211\":4}}],[\"or\",{\"1\":{\"110\":1,\"191\":1,\"211\":2,\"216\":1}}],[\"os\",{\"0\":{\"103\":1}}],[\"o\",{\"1\":{\"31\":1,\"81\":1,\"99\":2,\"147\":2,\"208\":1}}],[\"one\",{\"1\":{\"377\":2}}],[\"onlyone\",{\"1\":{\"196\":1}}],[\"on\",{\"1\":{\"1\":1,\"104\":1,\"191\":1,\"216\":1,\"298\":1}}],[\"of循环\",{\"0\":{\"425\":1}}],[\"off\",{\"1\":{\"103\":1}}],[\"of\",{\"0\":{\"180\":1,\"217\":1},\"1\":{\"1\":3,\"62\":2,\"99\":4,\"104\":1,\"107\":1,\"184\":1,\"191\":3,\"213\":4,\"215\":6,\"237\":1,\"382\":1}}],[\"gc的两种类型是什么\",{\"0\":{\"313\":1}}],[\"gcc\",{\"1\":{\"85\":1}}],[\"git地址\",{\"1\":{\"253\":1}}],[\"git\",{\"0\":{\"251\":1},\"1\":{\"252\":3,\"253\":1},\"2\":{\"255\":1}}],[\"game\",{\"1\":{\"227\":26}}],[\"gang\",{\"0\":{\"180\":1}}],[\"gof\",{\"0\":{\"180\":1}}],[\"good\",{\"1\":{\"1\":1}}],[\"generator函数\",{\"0\":{\"426\":1}}],[\"generator\",{\"0\":{\"403\":1}}],[\"generate\",{\"1\":{\"110\":2}}],[\"gender\",{\"1\":{\"211\":20}}],[\"getter\",{\"1\":{\"236\":1}}],[\"gettype\",{\"1\":{\"209\":4}}],[\"getallstudents\",{\"1\":{\"232\":4,\"236\":3}}],[\"getdata\",{\"1\":{\"231\":9}}],[\"getbusinessservice\",{\"1\":{\"230\":2}}],[\"getrollno\",{\"1\":{\"229\":3,\"232\":7,\"236\":7}}],[\"getrandomy\",{\"1\":{\"215\":2}}],[\"getrandomx\",{\"1\":{\"215\":2}}],[\"getrandomcolor\",{\"1\":{\"215\":2}}],[\"getcustomer\",{\"1\":{\"225\":5}}],[\"getchainofloggers\",{\"1\":{\"217\":2}}],[\"getcircle\",{\"1\":{\"215\":2}}],[\"getcolor\",{\"1\":{\"207\":6}}],[\"getmarriedwomanexpression\",{\"1\":{\"219\":2}}],[\"getmaritalstatus\",{\"1\":{\"211\":3}}],[\"getmaleexpression\",{\"1\":{\"219\":2}}],[\"getmaxcol\",{\"1\":{\"163\":1}}],[\"getmaxrow\",{\"1\":{\"163\":1}}],[\"getgender\",{\"1\":{\"211\":4}}],[\"getname\",{\"1\":{\"211\":2,\"221\":2,\"225\":7,\"229\":3,\"232\":4,\"235\":6,\"236\":4}}],[\"getinfo\",{\"1\":{\"301\":8}}],[\"getinstance\",{\"1\":{\"191\":2,\"208\":11}}],[\"getiterator\",{\"1\":{\"220\":3}}],[\"getid\",{\"1\":{\"209\":4}}],[\"getservice\",{\"1\":{\"235\":7}}],[\"getstudent\",{\"1\":{\"232\":3,\"236\":2}}],[\"getstudentrollno\",{\"1\":{\"229\":1}}],[\"getstudentname\",{\"1\":{\"229\":1}}],[\"getstatefrommemento\",{\"1\":{\"222\":3}}],[\"getstate\",{\"1\":{\"222\":6,\"223\":4,\"224\":3}}],[\"getsubordinates\",{\"1\":{\"212\":3}}],[\"getsingleton\",{\"1\":{\"208\":1}}],[\"getshape\",{\"1\":{\"206\":5,\"207\":6,\"209\":4}}],[\"getfactory\",{\"1\":{\"207\":3}}],[\"getentry\",{\"1\":{\"163\":1}}],[\"get\",{\"1\":{\"89\":1,\"191\":1,\"209\":1,\"215\":1,\"222\":4,\"232\":4,\"236\":3,\"287\":1}}],[\"gui\",{\"1\":{\"218\":1}}],[\"guide\",{\"0\":{\"136\":1},\"1\":{\"129\":2},\"2\":{\"105\":1,\"108\":1,\"125\":1,\"132\":1,\"133\":1,\"135\":1}}],[\"guitar\",{\"1\":{\"1\":1}}],[\"gggg\",{\"1\":{\"305\":1}}],[\"ggyg\",{\"1\":{\"99\":1}}],[\"ggvg\",{\"1\":{\"99\":1}}],[\"gg\",{\"1\":{\"99\":1}}],[\"g\",{\"1\":{\"99\":4,\"284\":1,\"297\":1,\"409\":1}}],[\"grow\",{\"1\":{\"395\":1}}],[\"groups\",{\"1\":{\"85\":1}}],[\"grids\",{\"1\":{\"355\":1}}],[\"grid\",{\"0\":{\"397\":1,\"398\":1},\"1\":{\"318\":1}}],[\"grained\",{\"1\":{\"231\":1}}],[\"greencircle\",{\"1\":{\"210\":5}}],[\"green\",{\"1\":{\"207\":9,\"210\":2,\"215\":11,\"298\":3}}],[\"grep\",{\"1\":{\"85\":1,\"409\":1}}],[\"gpgcheck=0\",{\"1\":{\"76\":1}}],[\"wrap\",{\"1\":{\"395\":1}}],[\"writable\",{\"1\":{\"191\":4}}],[\"writing\",{\"1\":{\"114\":1,\"115\":1,\"129\":1,\"362\":1,\"363\":1}}],[\"write\",{\"1\":{\"110\":1,\"111\":1,\"130\":1,\"216\":1,\"217\":5,\"359\":1,\"379\":1}}],[\"warning\",{\"1\":{\"364\":3}}],[\"way\",{\"1\":{\"191\":5}}],[\"wto\",{\"1\":{\"221\":2}}],[\"women\",{\"1\":{\"219\":2}}],[\"workspace\",{\"1\":{\"301\":1}}],[\"workbook\",{\"1\":{\"237\":1}}],[\"world\",{\"1\":{\"191\":1,\"208\":2,\"298\":2}}],[\"words\",{\"1\":{\"371\":1}}],[\"word\",{\"1\":{\"99\":2,\"369\":1}}],[\"wed\",{\"1\":{\"375\":1}}],[\"webpack\",{\"0\":{\"471\":1}}],[\"websocket\",{\"0\":{\"311\":1}}],[\"web\",{\"1\":{\"208\":1,\"217\":2,\"233\":1}}],[\"we\",{\"1\":{\"191\":1,\"265\":1,\"269\":1}}],[\"well\",{\"1\":{\"1\":1}}],[\"wiki\",{\"1\":{\"237\":1}}],[\"with\",{\"1\":{\"130\":1,\"213\":2,\"305\":1,\"364\":1}}],[\"will\",{\"1\":{\"113\":1,\"128\":1,\"361\":1}}],[\"windows\",{\"0\":{\"103\":1},\"1\":{\"59\":1,\"187\":1,\"208\":1,\"216\":1,\"222\":1,\"409\":1}}],[\"wq\",{\"1\":{\"99\":1}}],[\"w\",{\"1\":{\"85\":1,\"99\":5,\"339\":1}}],[\"wget\",{\"1\":{\"81\":2,\"90\":1}}],[\"white\",{\"1\":{\"215\":5}}],[\"which\",{\"1\":{\"113\":1,\"131\":1,\"361\":1}}],[\"while\",{\"1\":{\"1\":1,\"147\":1,\"191\":1}}],[\"whoami\",{\"1\":{\"85\":1}}],[\"who\",{\"1\":{\"85\":1}}],[\"when\",{\"1\":{\"2\":1}}],[\"why\",{\"1\":{\"2\":1}}],[\"whatevermethod\",{\"1\":{\"208\":1}}],[\"what\",{\"1\":{\"2\":1}}],[\"luckysheet\",{\"0\":{\"321\":1}}],[\"label\",{\"1\":{\"374\":1}}],[\"lang=\",{\"1\":{\"340\":1}}],[\"laura\",{\"1\":{\"211\":3,\"212\":2,\"225\":1}}],[\"lazy\",{\"1\":{\"208\":11}}],[\"last\",{\"1\":{\"167\":1}}],[\"layoutmanager\",{\"1\":{\"226\":1}}],[\"layout\",{\"0\":{\"104\":1,\"107\":1},\"1\":{\"61\":1,\"62\":2,\"104\":1,\"107\":1},\"2\":{\"109\":1,\"357\":1}}],[\"looking\",{\"1\":{\"235\":4}}],[\"lookupservice\",{\"1\":{\"230\":2}}],[\"lookup\",{\"1\":{\"230\":1,\"235\":2}}],[\"lora\",{\"1\":{\"220\":2}}],[\"loadfromdisk\",{\"1\":{\"216\":2}}],[\"loadcache\",{\"1\":{\"209\":2}}],[\"loading\",{\"1\":{\"208\":5,\"216\":2}}],[\"locking\",{\"1\":{\"208\":1}}],[\"locator\",{\"0\":{\"235\":1},\"1\":{\"185\":1,\"235\":1}}],[\"loggerchain\",{\"1\":{\"217\":4}}],[\"logger\",{\"1\":{\"217\":9}}],[\"logmessage\",{\"1\":{\"217\":5}}],[\"log\",{\"1\":{\"120\":2,\"147\":1,\"148\":3,\"191\":5,\"234\":2,\"298\":3,\"378\":2,\"413\":6}}],[\"lot\",{\"1\":{\"1\":1}}],[\"level\",{\"1\":{\"217\":17}}],[\"len\",{\"1\":{\"148\":4}}],[\"length>\",{\"1\":{\"191\":1}}],[\"length\",{\"1\":{\"148\":4,\"191\":2,\"215\":1,\"220\":1,\"225\":1,\"228\":1,\"231\":1,\"413\":1}}],[\"let\",{\"0\":{\"413\":1},\"1\":{\"148\":9,\"191\":3,\"298\":17,\"413\":6}}],[\"left\",{\"1\":{\"120\":3,\"148\":3,\"378\":3}}],[\"learner\",{\"1\":{\"111\":1,\"359\":1,\"379\":1}}],[\"l\",{\"1\":{\"99\":2}}],[\"lrzsz\",{\"0\":{\"88\":1},\"1\":{\"88\":1}}],[\"ll\",{\"1\":{\"85\":1,\"298\":1}}],[\"lsp\",{\"1\":{\"240\":1}}],[\"ls\",{\"1\":{\"85\":1}}],[\"lib\",{\"1\":{\"301\":1}}],[\"lipeng\",{\"1\":{\"301\":2}}],[\"liskov\",{\"0\":{\"240\":1}}],[\"list<studentvo>\",{\"1\":{\"236\":2}}],[\"list<student>\",{\"1\":{\"232\":3}}],[\"list<service>\",{\"1\":{\"235\":1}}],[\"list<filter>\",{\"1\":{\"234\":1}}],[\"list<observer>\",{\"1\":{\"223\":1}}],[\"list<order>\",{\"1\":{\"218\":1}}],[\"list<memento>\",{\"1\":{\"222\":1}}],[\"list<employee>\",{\"1\":{\"212\":2}}],[\"list<person>\",{\"1\":{\"211\":20}}],[\"list\",{\"1\":{\"142\":5,\"147\":3,\"211\":7,\"212\":2,\"218\":1,\"222\":1,\"223\":1,\"232\":2,\"234\":1,\"235\":1,\"236\":1,\"286\":1,\"298\":1}}],[\"literal\",{\"1\":{\"191\":1}}],[\"lifo\",{\"1\":{\"167\":1}}],[\"line\",{\"1\":{\"375\":2}}],[\"linear\",{\"1\":{\"374\":1}}],[\"linteroptions\",{\"1\":{\"303\":1}}],[\"links\",{\"1\":{\"130\":2,\"305\":2}}],[\"link\",{\"1\":{\"104\":2,\"364\":1}}],[\"linux中打开文件\",{\"0\":{\"97\":1}}],[\"linux上传下载工具\",{\"0\":{\"86\":1}}],[\"linux操作\",{\"0\":{\"85\":1}}],[\"linux介绍\",{\"0\":{\"78\":1}}],[\"linux\",{\"0\":{\"77\":1,\"80\":1,\"90\":1},\"1\":{\"59\":1,\"187\":1,\"409\":1},\"2\":{\"102\":1}}],[\"likes\",{\"1\":{\"1\":1}}],[\"li\",{\"1\":{\"1\":1}}],[\"two\",{\"1\":{\"377\":4}}],[\"tworst\",{\"1\":{\"143\":1}}],[\"tb\",{\"1\":{\"377\":1}}],[\"tsx\",{\"1\":{\"303\":1}}],[\"tslint\",{\"1\":{\"302\":3,\"303\":5}}],[\"tsdk\",{\"1\":{\"301\":1}}],[\"ts中的重载\",{\"1\":{\"301\":1}}],[\"ts\",{\"1\":{\"297\":1,\"303\":1}}],[\"tsconfig\",{\"1\":{\"297\":1,\"302\":1}}],[\"tsc\",{\"1\":{\"297\":3,\"301\":1}}],[\"tsinghua\",{\"1\":{\"273\":1}}],[\"tue\",{\"1\":{\"375\":1}}],[\"tuna\",{\"1\":{\"273\":1}}],[\"tutorials\",{\"1\":{\"237\":1}}],[\"tm\",{\"1\":{\"237\":1}}],[\"type=password\",{\"0\":{\"322\":1}}],[\"typeof也不再是一个百分百安全的操作\",{\"1\":{\"413\":1}}],[\"typeof\",{\"1\":{\"301\":1,\"413\":1,\"456\":1}}],[\"typescript\",{\"0\":{\"296\":1},\"1\":{\"297\":1,\"301\":4,\"302\":2}}],[\"type\",{\"1\":{\"209\":5,\"298\":1,\"307\":1,\"374\":2,\"375\":3}}],[\"triple\",{\"1\":{\"303\":1}}],[\"traceur转码器\",{\"1\":{\"410\":1}}],[\"trackrequest\",{\"1\":{\"233\":2}}],[\"translate\",{\"0\":{\"315\":1}}],[\"translator\",{\"1\":{\"156\":1}}],[\"transform导致\",{\"1\":{\"315\":1}}],[\"transform移动后可能导致浏览器渲染失真\",{\"1\":{\"315\":1}}],[\"transform变换会在浏览器上单独创建一个绘画层并重新进行渲染\",{\"1\":{\"315\":1}}],[\"transform是否会调用gpu\",{\"0\":{\"312\":1}}],[\"transferobjectpatterndemo\",{\"1\":{\"236\":2}}],[\"transfer\",{\"0\":{\"236\":1},\"1\":{\"185\":1,\"236\":1}}],[\"try\",{\"1\":{\"209\":1}}],[\"true\",{\"1\":{\"61\":2,\"62\":1,\"191\":13,\"219\":3,\"220\":1,\"225\":1,\"233\":1,\"235\":1,\"298\":2,\"303\":1,\"456\":1}}],[\"t\",{\"1\":{\"111\":1,\"112\":1,\"147\":1,\"298\":2,\"359\":1,\"360\":1,\"379\":1}}],[\"tag\",{\"0\":{\"253\":1},\"1\":{\"253\":1}}],[\"tags\",{\"1\":{\"129\":1}}],[\"task\",{\"1\":{\"230\":4}}],[\"tasklist\",{\"0\":{\"121\":1,\"372\":1}}],[\"takeorder\",{\"1\":{\"218\":3}}],[\"tavg\",{\"1\":{\"143\":1}}],[\"tabs\",{\"0\":{\"116\":1,\"117\":1,\"365\":1,\"366\":1}}],[\"table\",{\"0\":{\"399\":1},\"1\":{\"107\":1}}],[\"target\",{\"1\":{\"234\":18}}],[\"tar\",{\"1\":{\"90\":1}}],[\"tips\",{\"1\":{\"474\":1}}],[\"tip\",{\"1\":{\"364\":3}}],[\"title\",{\"0\":{\"128\":1},\"1\":{\"107\":1,\"128\":5,\"364\":10}}],[\"timeend\",{\"1\":{\"148\":2}}],[\"time\",{\"1\":{\"104\":1,\"107\":1,\"143\":1,\"148\":2}}],[\"terminalexpression\",{\"1\":{\"219\":7}}],[\"test\",{\"1\":{\"216\":4,\"231\":4}}],[\"templatepatterndemo\",{\"1\":{\"227\":2}}],[\"templatemethod\",{\"1\":{\"184\":1}}],[\"template\",{\"0\":{\"227\":1},\"1\":{\"184\":1}}],[\"temp\",{\"1\":{\"148\":2}}],[\"tex\",{\"0\":{\"120\":1,\"378\":1}}],[\"text\",{\"1\":{\"118\":1,\"315\":1,\"370\":1}}],[\"telnet连接对方主机\",{\"1\":{\"85\":1}}],[\"telnet\",{\"1\":{\"85\":1}}],[\"technics\",{\"1\":{\"1\":1}}],[\"txt文件中写上内容\",{\"1\":{\"85\":1}}],[\"txt\",{\"1\":{\"85\":1}}],[\"tcp\",{\"0\":{\"72\":1}}],[\"todos\",{\"1\":{\"301\":2}}],[\"todo\",{\"1\":{\"301\":6}}],[\"tofixed\",{\"1\":{\"298\":4}}],[\"tools\",{\"0\":{\"506\":1},\"2\":{\"254\":1,\"261\":1}}],[\"tooctalstring\",{\"1\":{\"223\":1}}],[\"touppercase\",{\"1\":{\"223\":1}}],[\"touch\",{\"1\":{\"85\":1}}],[\"tohexstring\",{\"1\":{\"223\":1}}],[\"tobinarystring\",{\"1\":{\"223\":1}}],[\"tomcat\",{\"1\":{\"217\":1}}],[\"tostring\",{\"1\":{\"191\":4,\"212\":1,\"221\":1,\"224\":4,\"298\":2}}],[\"toc\",{\"1\":{\"107\":1}}],[\"top\",{\"1\":{\"99\":1,\"104\":1,\"107\":1}}],[\"to\",{\"1\":{\"1\":1,\"61\":1,\"62\":2,\"99\":6,\"104\":1,\"107\":1,\"110\":3,\"111\":1,\"112\":1,\"114\":1,\"130\":1,\"191\":1,\"359\":1,\"360\":1,\"362\":1,\"379\":1}}],[\"three\",{\"1\":{\"377\":2}}],[\"throw\",{\"1\":{\"298\":1}}],[\"thu\",{\"1\":{\"221\":2,\"375\":1}}],[\"this\",{\"0\":{\"440\":1},\"1\":{\"61\":2,\"62\":2,\"104\":1,\"118\":1,\"191\":19,\"209\":1,\"210\":4,\"211\":7,\"212\":3,\"213\":1,\"215\":4,\"216\":2,\"217\":14,\"218\":2,\"219\":5,\"220\":1,\"221\":3,\"222\":2,\"223\":10,\"224\":3,\"225\":1,\"226\":1,\"228\":4,\"229\":4,\"230\":2,\"231\":2,\"232\":4,\"234\":2,\"236\":4,\"328\":1,\"370\":1,\"384\":1,\"474\":1}}],[\"then\",{\"1\":{\"191\":1}}],[\"these\",{\"1\":{\"114\":1,\"191\":1,\"362\":1}}],[\"them\",{\"1\":{\"107\":1,\"110\":1,\"305\":2}}],[\"theme\",{\"0\":{\"115\":1,\"363\":1},\"1\":{\"107\":2,\"115\":1,\"363\":1}}],[\"the\",{\"1\":{\"1\":2,\"61\":1,\"62\":1,\"99\":1,\"104\":4,\"107\":3,\"113\":1,\"115\":1,\"128\":1,\"129\":2,\"191\":5,\"227\":4,\"232\":2,\"236\":2,\"237\":1,\"298\":1,\"361\":1,\"363\":1}}],[\"that\",{\"1\":{\"1\":1,\"104\":1,\"110\":1}}],[\"dfd\",{\"0\":{\"249\":1}}],[\"dcl\",{\"1\":{\"208\":1}}],[\"draft\",{\"1\":{\"325\":1}}],[\"drawsquare\",{\"1\":{\"214\":2}}],[\"drawrectangle\",{\"1\":{\"214\":2}}],[\"drawing\",{\"1\":{\"210\":4}}],[\"drawcircle\",{\"1\":{\"210\":4,\"214\":2}}],[\"drawapi\",{\"1\":{\"210\":17}}],[\"draw\",{\"1\":{\"206\":19,\"207\":16,\"209\":7,\"210\":4,\"213\":10,\"214\":13,\"215\":24}}],[\"driver\",{\"1\":{\"191\":2}}],[\"d为集合\",{\"1\":{\"160\":1}}],[\"danger\",{\"1\":{\"364\":3}}],[\"daopatterndemo\",{\"1\":{\"232\":1}}],[\"dao\",{\"0\":{\"232\":1},\"1\":{\"232\":1}}],[\"dazhong\",{\"1\":{\"191\":1}}],[\"dataset\",{\"1\":{\"374\":1}}],[\"datasets\",{\"1\":{\"374\":1}}],[\"data类型的数据的时候\",{\"1\":{\"307\":1}}],[\"data2\",{\"1\":{\"231\":6}}],[\"data1\",{\"1\":{\"231\":8}}],[\"database\",{\"0\":{\"503\":1},\"1\":{\"225\":3,\"232\":3,\"236\":3}}],[\"data\",{\"0\":{\"232\":1},\"1\":{\"185\":1,\"219\":5,\"231\":17,\"232\":2,\"374\":2,\"375\":2}}],[\"date\",{\"0\":{\"464\":1},\"1\":{\"85\":1,\"129\":1,\"221\":2,\"455\":1}}],[\"darkmode\",{\"1\":{\"107\":1}}],[\"dg\",{\"1\":{\"99\":1}}],[\"dd\",{\"1\":{\"99\":1}}],[\"div>\",{\"1\":{\"305\":1}}],[\"diana\",{\"1\":{\"211\":3}}],[\"dispatchrequest\",{\"1\":{\"233\":3}}],[\"dispatch\",{\"1\":{\"233\":2}}],[\"dispatcher\",{\"1\":{\"233\":10}}],[\"displaying\",{\"1\":{\"216\":3,\"228\":8,\"233\":4}}],[\"display\",{\"0\":{\"391\":1},\"1\":{\"216\":6}}],[\"disables\",{\"1\":{\"104\":1}}],[\"disable\",{\"1\":{\"104\":1},\"2\":{\"106\":1}}],[\"disabling\",{\"0\":{\"104\":1}}],[\"distributions\",{\"0\":{\"79\":1}}],[\"different\",{\"1\":{\"110\":1}}],[\"diff\",{\"1\":{\"85\":1}}],[\"direction\",{\"1\":{\"395\":1}}],[\"directory\",{\"1\":{\"130\":1,\"305\":1}}],[\"dir\",{\"1\":{\"85\":1}}],[\"dom\",{\"0\":{\"389\":1},\"1\":{\"463\":1}}],[\"dom操作\",{\"0\":{\"341\":1}}],[\"dom相关操作与事件\",{\"1\":{\"329\":1}}],[\"doesn\",{\"1\":{\"298\":2}}],[\"douban\",{\"1\":{\"273\":2}}],[\"double\",{\"1\":{\"208\":1}}],[\"do2\",{\"1\":{\"231\":3}}],[\"do1\",{\"1\":{\"231\":3}}],[\"dotask\",{\"1\":{\"230\":5}}],[\"doprocessing\",{\"1\":{\"230\":4}}],[\"dooperation\",{\"1\":{\"226\":5}}],[\"doaction\",{\"1\":{\"224\":5}}],[\"donate\",{\"1\":{\"382\":1}}],[\"done\",{\"1\":{\"191\":1,\"301\":2}}],[\"don\",{\"1\":{\"111\":1,\"112\":1,\"359\":1,\"360\":1,\"379\":1}}],[\"doctype\",{\"0\":{\"339\":1},\"1\":{\"339\":1}}],[\"docker\",{\"0\":{\"278\":1}}],[\"document\",{\"1\":{\"114\":1,\"362\":1}}],[\"documentation\",{\"1\":{\"110\":1}}],[\"docs\",{\"1\":{\"61\":1,\"379\":1,\"400\":1}}],[\"download\",{\"1\":{\"81\":1}}],[\"doing\",{\"1\":{\"1\":1,\"301\":2}}],[\"demeter\",{\"1\":{\"244\":1}}],[\"demo\",{\"0\":{\"134\":1,\"381\":1},\"1\":{\"61\":1,\"104\":1,\"111\":1,\"359\":1,\"379\":1}}],[\"dependence\",{\"0\":{\"241\":1}}],[\"dependentobject2\",{\"1\":{\"231\":4}}],[\"dependentobject1\",{\"1\":{\"231\":4}}],[\"dependent\",{\"1\":{\"231\":1}}],[\"dept\",{\"1\":{\"212\":13}}],[\"debugfilter\",{\"1\":{\"234\":3}}],[\"debug\",{\"1\":{\"217\":6}}],[\"decoratedshape\",{\"1\":{\"213\":10}}],[\"decoratorpatterndemo\",{\"1\":{\"213\":2}}],[\"decorator\",{\"0\":{\"213\":1},\"1\":{\"183\":2,\"191\":1}}],[\"defineprops\",{\"1\":{\"191\":1}}],[\"defineproperties\",{\"1\":{\"191\":1}}],[\"defineproperty\",{\"1\":{\"191\":2}}],[\"defineprop\",{\"1\":{\"191\":4}}],[\"delete\",{\"1\":{\"287\":1}}],[\"deleted\",{\"1\":{\"232\":1,\"236\":1}}],[\"deletestudent\",{\"1\":{\"232\":2,\"236\":1}}],[\"delegate\",{\"0\":{\"230\":1},\"1\":{\"185\":1,\"230\":1}}],[\"delimited\",{\"1\":{\"99\":2}}],[\"designpatterns\",{\"1\":{\"237\":1}}],[\"design\",{\"0\":{\"182\":1,\"183\":1,\"184\":1},\"1\":{\"237\":8}}],[\"descriptions\",{\"1\":{\"62\":1}}],[\"description\",{\"0\":{\"61\":1}}],[\"devtools\",{\"1\":{\"306\":1}}],[\"dev\",{\"1\":{\"303\":1}}],[\"devops\",{\"0\":{\"176\":1}}],[\"developing\",{\"1\":{\"1\":1}}],[\"developer\",{\"1\":{\"1\":1}}],[\"details\",{\"0\":{\"266\":1,\"270\":1},\"1\":{\"263\":1,\"267\":1,\"364\":3}}],[\"detail\",{\"1\":{\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"364\":1,\"365\":1,\"366\":1,\"367\":1,\"368\":1,\"369\":1,\"370\":1,\"371\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1}}],[\"dma\",{\"1\":{\"32\":1}}],[\"d\",{\"1\":{\"13\":1,\"76\":1,\"160\":1,\"205\":1,\"301\":1,\"379\":1}}],[\"b1\",{\"1\":{\"377\":1}}],[\"bfc\",{\"1\":{\"318\":1}}],[\"boolean\",{\"0\":{\"458\":1},\"1\":{\"219\":4,\"220\":2,\"225\":3,\"233\":1,\"235\":1,\"298\":1,\"454\":1}}],[\"bought\",{\"1\":{\"218\":2}}],[\"border\",{\"1\":{\"213\":9}}],[\"bob\",{\"1\":{\"212\":2,\"225\":1}}],[\"bobby\",{\"1\":{\"211\":4}}],[\"bottom\",{\"1\":{\"99\":1,\"374\":1}}],[\"brandan\",{\"1\":{\"407\":1}}],[\"branch\",{\"1\":{\"253\":1}}],[\"broker\",{\"1\":{\"218\":9}}],[\"browser\",{\"1\":{\"191\":1}}],[\"bridgepatterndemo\",{\"1\":{\"210\":2}}],[\"bridge\",{\"0\":{\"210\":1},\"1\":{\"183\":1,\"210\":1}}],[\"breadcrumb\",{\"1\":{\"104\":1,\"107\":1}}],[\"bug\",{\"1\":{\"302\":1}}],[\"but\",{\"1\":{\"298\":1,\"305\":1}}],[\"button\",{\"1\":{\"104\":1,\"107\":3,\"212\":1}}],[\"buystockorder\",{\"1\":{\"218\":2}}],[\"buystock\",{\"1\":{\"218\":5}}],[\"buy\",{\"1\":{\"218\":2}}],[\"businessdelegatepatterndemo\",{\"1\":{\"230\":2}}],[\"businessdelegate\",{\"1\":{\"230\":11}}],[\"businesslookup\",{\"1\":{\"230\":4}}],[\"businessservice\",{\"1\":{\"230\":15}}],[\"business\",{\"0\":{\"230\":1},\"1\":{\"185\":1,\"230\":2,\"236\":1}}],[\"builder\",{\"1\":{\"182\":2}}],[\"bnf\",{\"1\":{\"156\":1}}],[\"black\",{\"1\":{\"215\":3}}],[\"blank\",{\"1\":{\"99\":2}}],[\"block\",{\"0\":{\"393\":1,\"394\":1}}],[\"bloch\",{\"1\":{\"208\":1}}],[\"blog\",{\"1\":{\"110\":1}}],[\"blue\",{\"1\":{\"207\":9,\"215\":7,\"298\":2}}],[\"by\",{\"1\":{\"104\":1,\"113\":1,\"115\":1,\"230\":4,\"361\":1,\"363\":1}}],[\"bbb\",{\"1\":{\"99\":3}}],[\"beans\",{\"1\":{\"231\":1}}],[\"bean\",{\"1\":{\"231\":4}}],[\"been\",{\"1\":{\"191\":1}}],[\"being\",{\"1\":{\"191\":1}}],[\"behavior\",{\"1\":{\"191\":1}}],[\"besides\",{\"1\":{\"130\":1,\"305\":1}}],[\"before\",{\"1\":{\"127\":1}}],[\"be\",{\"1\":{\"113\":1,\"128\":1,\"298\":1,\"361\":1}}],[\"beginning\",{\"1\":{\"99\":1}}],[\"better\",{\"1\":{\"96\":1}}],[\"believes\",{\"1\":{\"1\":1}}],[\"bigint\",{\"0\":{\"460\":1},\"1\":{\"452\":1,\"454\":1}}],[\"birth\",{\"1\":{\"191\":1}}],[\"bind\",{\"1\":{\"327\":1}}],[\"binnum\",{\"1\":{\"298\":1}}],[\"binary\",{\"1\":{\"223\":3}}],[\"binaryobserver\",{\"1\":{\"223\":4}}],[\"bin\",{\"1\":{\"90\":2}}],[\"bit\",{\"1\":{\"26\":1}}],[\"babelrc\",{\"1\":{\"410\":1}}],[\"baz\",{\"0\":{\"263\":1},\"1\":{\"138\":1,\"266\":1}}],[\"bar\",{\"0\":{\"138\":1,\"264\":1},\"1\":{\"265\":1,\"413\":2}}],[\"backgroundcolor\",{\"1\":{\"374\":1}}],[\"back\",{\"1\":{\"99\":2,\"104\":1,\"107\":1}}],[\"bak\",{\"1\":{\"90\":1}}],[\"basicsingleton\",{\"1\":{\"191\":1}}],[\"basic\",{\"0\":{\"504\":1,\"510\":1},\"1\":{\"148\":4,\"379\":1},\"2\":{\"336\":1,\"342\":1,\"346\":1,\"356\":1,\"385\":1,\"466\":1}}],[\"basically\",{\"1\":{\"110\":1}}],[\"basis\",{\"1\":{\"1\":1,\"395\":1}}],[\"basketball\",{\"1\":{\"1\":1}}],[\"bt\",{\"1\":{\"81\":1}}],[\"b\",{\"1\":{\"13\":1,\"99\":5,\"103\":1,\"121\":1,\"148\":2,\"163\":1,\"165\":1,\"187\":1,\"252\":1,\"253\":1,\"301\":1,\"372\":1,\"413\":2}}],[\"flow\",{\"1\":{\"395\":1}}],[\"flowchart\",{\"0\":{\"376\":1},\"1\":{\"377\":1}}],[\"fluid\",{\"1\":{\"355\":1}}],[\"flex布局中子元素的float\",{\"1\":{\"395\":1}}],[\"flexible\",{\"1\":{\"355\":1}}],[\"flex\",{\"0\":{\"396\":1},\"1\":{\"318\":1,\"395\":7}}],[\"flyweightpatterndemo\",{\"1\":{\"215\":2}}],[\"flyweight\",{\"0\":{\"215\":1},\"1\":{\"183\":2,\"191\":1}}],[\"func\",{\"1\":{\"191\":1}}],[\"functions\",{\"1\":{\"115\":1,\"363\":1}}],[\"function\",{\"1\":{\"104\":1,\"148\":2,\"191\":7,\"298\":1,\"301\":11,\"413\":2,\"455\":1}}],[\"false\",{\"1\":{\"219\":1,\"220\":1,\"225\":1,\"235\":1,\"298\":2}}],[\"facadepatterndemo\",{\"1\":{\"214\":2}}],[\"facade\",{\"0\":{\"214\":1},\"1\":{\"183\":2,\"191\":1}}],[\"factoryproducer\",{\"1\":{\"207\":5}}],[\"factorypatterndemo\",{\"1\":{\"206\":2}}],[\"factory\",{\"0\":{\"206\":1,\"207\":1},\"1\":{\"182\":3,\"191\":1}}],[\"faster\",{\"1\":{\"96\":1}}],[\"f+\",{\"1\":{\"99\":1}}],[\"fe\",{\"1\":{\"379\":2},\"2\":{\"336\":1,\"342\":1,\"346\":1,\"356\":1,\"385\":1,\"466\":1}}],[\"fetch在post\",{\"1\":{\"307\":1}}],[\"fetch\",{\"0\":{\"307\":1}}],[\"feature\",{\"0\":{\"264\":1,\"268\":1},\"1\":{\"263\":1,\"265\":1,\"267\":1,\"269\":1}}],[\"features\",{\"0\":{\"104\":1,\"134\":1,\"137\":1},\"1\":{\"104\":1}}],[\"females\",{\"1\":{\"211\":3}}],[\"female\",{\"1\":{\"211\":10}}],[\"femalepersons\",{\"1\":{\"211\":3}}],[\"feel\",{\"1\":{\"96\":1}}],[\"fe2prom\",{\"1\":{\"24\":1}}],[\"found\",{\"1\":{\"502\":1}}],[\"four\",{\"0\":{\"96\":1,\"180\":1}}],[\"foosingleton\",{\"1\":{\"191\":1}}],[\"foo\",{\"0\":{\"139\":1,\"268\":1},\"1\":{\"269\":1,\"413\":2}}],[\"football\",{\"1\":{\"227\":9}}],[\"footnote\",{\"0\":{\"118\":1,\"370\":1},\"1\":{\"118\":1,\"370\":1,\"384\":1}}],[\"footer\",{\"1\":{\"104\":1,\"107\":1}}],[\"following\",{\"1\":{\"104\":1,\"107\":1}}],[\"form\",{\"1\":{\"307\":1}}],[\"foreach\",{\"1\":{\"301\":1}}],[\"ford\",{\"1\":{\"191\":1}}],[\"forward\",{\"1\":{\"99\":2}}],[\"for\",{\"1\":{\"1\":2,\"61\":1,\"62\":1,\"112\":1,\"114\":1,\"130\":1,\"142\":1,\"148\":2,\"191\":1,\"211\":5,\"212\":2,\"215\":1,\"218\":1,\"220\":1,\"223\":1,\"225\":1,\"228\":1,\"231\":1,\"232\":1,\"234\":1,\"235\":2,\"236\":1,\"237\":1,\"305\":3,\"360\":1,\"362\":1,\"380\":1,\"413\":3}}],[\"firewall\",{\"1\":{\"216\":1}}],[\"firstcriteriaitems\",{\"1\":{\"211\":4}}],[\"firstcriteriapersons\",{\"1\":{\"211\":2}}],[\"first\",{\"1\":{\"128\":1,\"167\":1,\"168\":2,\"222\":2,\"223\":2,\"237\":1}}],[\"finished\",{\"1\":{\"227\":4,\"325\":1}}],[\"final\",{\"1\":{\"208\":2,\"215\":2,\"225\":1,\"227\":3}}],[\"findstr\",{\"1\":{\"409\":1}}],[\"find\",{\"1\":{\"85\":1}}],[\"fill\",{\"1\":{\"207\":16}}],[\"filterrequest\",{\"1\":{\"234\":2}}],[\"filtermanager\",{\"1\":{\"234\":16}}],[\"filters\",{\"1\":{\"234\":3}}],[\"filterchain\",{\"1\":{\"234\":9}}],[\"filter\",{\"0\":{\"211\":1,\"234\":1},\"1\":{\"183\":1,\"185\":1,\"217\":1,\"234\":17}}],[\"filelogger\",{\"1\":{\"217\":7}}],[\"files\",{\"0\":{\"119\":1,\"379\":1},\"1\":{\"110\":2,\"130\":1,\"305\":1}}],[\"filename\",{\"1\":{\"97\":2,\"216\":13}}],[\"file\",{\"1\":{\"88\":1,\"90\":1,\"110\":1,\"217\":3}}],[\"filezilla\",{\"0\":{\"87\":1}}],[\"fifp\",{\"1\":{\"168\":1}}],[\"fit\",{\"1\":{\"1\":1}}],[\"ftp连接上某服务器\",{\"1\":{\"85\":1}}],[\"ftp\",{\"1\":{\"72\":1,\"85\":1}}],[\"f\",{\"1\":{\"13\":1,\"99\":3,\"223\":1}}],[\"frames\",{\"0\":{\"511\":1}}],[\"frac\",{\"1\":{\"120\":4,\"378\":4}}],[\"fri\",{\"1\":{\"375\":1}}],[\"from\",{\"1\":{\"110\":1,\"232\":1,\"236\":1}}],[\"frontcontrollerpatterndemo\",{\"1\":{\"233\":2,\"234\":1}}],[\"frontcontroller\",{\"1\":{\"233\":9}}],[\"frontmatter\",{\"1\":{\"104\":1,\"107\":1,\"112\":4,\"128\":1,\"129\":1,\"360\":3,\"380\":1}}],[\"front\",{\"0\":{\"233\":1},\"1\":{\"1\":2,\"61\":1,\"62\":1,\"185\":1,\"233\":1}}],[\"free\",{\"1\":{\"1\":1,\"130\":1,\"298\":1}}],[\"iife\",{\"0\":{\"436\":1}}],[\"ie\",{\"1\":{\"222\":1}}],[\"i=0\",{\"1\":{\"215\":1}}],[\"i=1\",{\"1\":{\"120\":1,\"378\":1}}],[\"id\",{\"1\":{\"209\":5,\"369\":1}}],[\"ide\",{\"2\":{\"102\":1}}],[\"i++\",{\"1\":{\"142\":1,\"148\":2,\"191\":1,\"225\":1,\"228\":1,\"231\":1,\"413\":3}}],[\"i+1\",{\"1\":{\"120\":1,\"378\":1}}],[\"implements\",{\"1\":{\"206\":3,\"207\":6,\"209\":1,\"210\":2,\"211\":5,\"213\":3,\"214\":3,\"215\":1,\"216\":2,\"218\":2,\"219\":3,\"220\":2,\"224\":2,\"226\":3,\"228\":5,\"230\":2,\"232\":1,\"234\":2,\"235\":2}}],[\"import\",{\"0\":{\"320\":1},\"1\":{\"131\":1,\"209\":1,\"211\":11,\"212\":2,\"215\":1,\"218\":2,\"221\":1,\"222\":2,\"223\":2,\"232\":3,\"234\":2,\"235\":2,\"236\":2}}],[\"important\",{\"1\":{\"112\":1,\"191\":1,\"360\":1,\"371\":1}}],[\"imap\",{\"1\":{\"189\":1,\"206\":1}}],[\"images\",{\"1\":{\"130\":2,\"305\":2,\"355\":1}}],[\"image\",{\"0\":{\"122\":1,\"373\":1},\"1\":{\"216\":8}}],[\"ifitexists\",{\"1\":{\"298\":2}}],[\"if\",{\"1\":{\"111\":1,\"112\":1,\"147\":2,\"148\":5,\"191\":5,\"206\":4,\"207\":10,\"208\":4,\"211\":4,\"215\":1,\"216\":1,\"217\":2,\"219\":1,\"220\":2,\"224\":1,\"225\":1,\"226\":1,\"230\":1,\"233\":2,\"235\":6,\"301\":3,\"359\":1,\"360\":1,\"379\":1}}],[\"iter\",{\"1\":{\"220\":3}}],[\"iterator和for\",{\"0\":{\"425\":1}}],[\"iteratorpatterndemo\",{\"1\":{\"220\":2}}],[\"iterator\",{\"0\":{\"220\":1},\"1\":{\"184\":2,\"187\":2,\"220\":8}}],[\"items\",{\"1\":{\"62\":1,\"395\":1}}],[\"it\",{\"1\":{\"110\":1,\"112\":1,\"113\":2,\"360\":1,\"361\":2}}],[\"ip\",{\"1\":{\"85\":1}}],[\"ios\",{\"1\":{\"59\":1}}],[\"i\",{\"1\":{\"31\":1,\"98\":2,\"120\":1,\"130\":1,\"131\":1,\"142\":5,\"145\":1,\"148\":11,\"163\":1,\"165\":1,\"191\":7,\"208\":1,\"215\":1,\"225\":3,\"228\":3,\"231\":3,\"298\":1,\"305\":2,\"368\":2,\"378\":1,\"413\":11}}],[\"inline\",{\"0\":{\"392\":1,\"393\":1,\"396\":1,\"398\":1}}],[\"inversion\",{\"0\":{\"241\":1}}],[\"invoking\",{\"1\":{\"230\":4}}],[\"invoker\",{\"1\":{\"218\":2}}],[\"info\",{\"1\":{\"217\":3,\"364\":1}}],[\"information\",{\"0\":{\"129\":1},\"1\":{\"104\":1,\"107\":2,\"129\":1,\"217\":9,\"364\":2}}],[\"index++\",{\"1\":{\"220\":1}}],[\"indexof\",{\"1\":{\"191\":1}}],[\"index\",{\"1\":{\"191\":6,\"220\":2,\"222\":2}}],[\"industry\",{\"1\":{\"1\":1}}],[\"initialcontext\",{\"1\":{\"235\":5}}],[\"initialized\",{\"1\":{\"227\":4}}],[\"initialize\",{\"1\":{\"227\":4}}],[\"init\",{\"1\":{\"191\":2,\"297\":1}}],[\"inherit\",{\"1\":{\"191\":1}}],[\"include\",{\"0\":{\"119\":1,\"379\":1},\"1\":{\"379\":1,\"380\":1}}],[\"including\",{\"1\":{\"107\":1}}],[\"integer\",{\"1\":{\"223\":3}}],[\"interpret\",{\"1\":{\"219\":10}}],[\"interpreterpatterndemo\",{\"1\":{\"219\":3}}],[\"interpreter\",{\"0\":{\"219\":1},\"1\":{\"184\":2}}],[\"interface\",{\"0\":{\"243\":1},\"1\":{\"206\":1,\"207\":2,\"210\":1,\"211\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"218\":1,\"219\":1,\"220\":2,\"224\":1,\"226\":1,\"228\":2,\"230\":1,\"232\":2,\"234\":1,\"235\":1}}],[\"interceptingfilterdemo\",{\"1\":{\"234\":1}}],[\"intercepting\",{\"0\":{\"234\":1},\"1\":{\"185\":1}}],[\"interests\",{\"1\":{\"1\":1}}],[\"int\",{\"1\":{\"142\":3,\"147\":3,\"163\":6,\"210\":13,\"212\":2,\"215\":12,\"217\":8,\"218\":1,\"220\":1,\"222\":1,\"223\":3,\"225\":1,\"226\":15,\"228\":1,\"231\":1,\"232\":6,\"236\":5}}],[\"into\",{\"1\":{\"131\":1}}],[\"introduce\",{\"1\":{\"112\":1,\"360\":1,\"380\":1}}],[\"introduction\",{\"0\":{\"111\":1,\"265\":1,\"269\":1,\"359\":1},\"1\":{\"112\":1,\"360\":1}}],[\"intro\",{\"1\":{\"111\":1,\"359\":1,\"379\":1}}],[\"inside\",{\"1\":{\"206\":6,\"207\":12,\"209\":3}}],[\"instance\",{\"1\":{\"191\":8,\"208\":24}}],[\"instances\",{\"1\":{\"191\":1}}],[\"install\",{\"1\":{\"81\":5,\"284\":1,\"286\":1,\"297\":1,\"303\":1,\"409\":1}}],[\"insall\",{\"1\":{\"88\":1}}],[\"in\",{\"1\":{\"1\":1,\"61\":1,\"62\":1,\"107\":1,\"112\":1,\"113\":1,\"114\":1,\"128\":2,\"129\":1,\"130\":1,\"131\":1,\"167\":1,\"168\":1,\"191\":1,\"224\":4,\"225\":3,\"232\":2,\"236\":2,\"237\":1,\"305\":1,\"360\":1,\"361\":1,\"362\":1,\"364\":2}}],[\"isover\",{\"1\":{\"298\":1}}],[\"isauthenticuser\",{\"1\":{\"233\":2}}],[\"isnil\",{\"1\":{\"225\":3}}],[\"ist\",{\"1\":{\"221\":2}}],[\"ismarriedwoman\",{\"1\":{\"219\":2}}],[\"ismale\",{\"1\":{\"219\":2}}],[\"isfoo\",{\"1\":{\"191\":1}}],[\"is\",{\"1\":{\"1\":4,\"61\":1,\"62\":1,\"104\":1,\"112\":1,\"127\":1,\"129\":3,\"131\":1,\"191\":1,\"217\":9,\"219\":4,\"224\":4,\"233\":3,\"298\":1,\"360\":1,\"384\":1}}],[\"eich\",{\"1\":{\"407\":1}}],[\"e=>end\",{\"1\":{\"376\":1}}],[\"eventsource和长轮询的差别\",{\"0\":{\"310\":1}}],[\"eventloop\",{\"0\":{\"308\":1}}],[\"equals\",{\"1\":{\"303\":1}}],[\"equalsignorecase\",{\"1\":{\"206\":3,\"207\":8,\"211\":3,\"225\":1,\"230\":1,\"233\":1,\"235\":4}}],[\"edu\",{\"1\":{\"273\":3}}],[\"edition\",{\"1\":{\"237\":2}}],[\"edit\",{\"1\":{\"104\":1}}],[\"es8\",{\"0\":{\"433\":1}}],[\"es7\",{\"0\":{\"432\":1}}],[\"es2015\",{\"1\":{\"408\":1}}],[\"esharmony分出来的可行的构想es6草案冻结\",{\"1\":{\"408\":1}}],[\"es5\",{\"1\":{\"408\":1}}],[\"es5正式发布\",{\"1\":{\"408\":1}}],[\"es5中没法设置默认参数\",{\"1\":{\"301\":1}}],[\"es5中方法的实参和形参可以不一样\",{\"1\":{\"301\":1}}],[\"es\",{\"1\":{\"408\":4,\"409\":2}}],[\"estree\",{\"1\":{\"302\":1}}],[\"eslint\",{\"1\":{\"302\":5}}],[\"es6新特性有哪些\",{\"0\":{\"412\":1}}],[\"es6支持度应该还是蛮好的\",{\"1\":{\"409\":1}}],[\"es6正式成为国际标准\",{\"1\":{\"408\":1}}],[\"es6发布\",{\"1\":{\"408\":1}}],[\"es6\",{\"0\":{\"406\":1},\"1\":{\"462\":1}}],[\"es6和ts中可以设置默认参数\",{\"1\":{\"301\":1}}],[\"es6中的小撇号\",{\"1\":{\"298\":1}}],[\"es6规范\",{\"1\":{\"296\":1}}],[\"essentials\",{\"1\":{\"237\":1}}],[\"esc\",{\"1\":{\"99\":1}}],[\"esc键按两下都会进入正常模式\",{\"1\":{\"98\":1}}],[\"ejb\",{\"1\":{\"230\":4,\"231\":3}}],[\"ejbservice\",{\"1\":{\"230\":3}}],[\"errorlogger\",{\"1\":{\"217\":7}}],[\"error\",{\"1\":{\"217\":9,\"298\":4}}],[\"employee\",{\"1\":{\"212\":34}}],[\"effective\",{\"1\":{\"208\":1}}],[\"ecma发布了ecma\",{\"1\":{\"407\":1}}],[\"ecmascript\",{\"1\":{\"191\":1,\"193\":1}}],[\"echarts\",{\"0\":{\"375\":1},\"1\":{\"375\":1}}],[\"echo2\",{\"1\":{\"103\":1}}],[\"echo\",{\"1\":{\"103\":6}}],[\"eg\",{\"1\":{\"163\":1}}],[\"elementtype\",{\"1\":{\"163\":1}}],[\"elements\",{\"1\":{\"107\":1,\"237\":1}}],[\"else\",{\"1\":{\"147\":2,\"191\":1,\"206\":2,\"207\":5,\"224\":1,\"226\":1,\"230\":1,\"233\":1,\"235\":1,\"301\":3}}],[\"easily\",{\"1\":{\"110\":1}}],[\"each\",{\"1\":{\"107\":1,\"112\":1,\"131\":1,\"360\":1,\"380\":1}}],[\"engineering\",{\"1\":{\"379\":1}}],[\"enjoy\",{\"1\":{\"227\":4}}],[\"encoding\",{\"1\":{\"217\":1}}],[\"enum\",{\"1\":{\"208\":2,\"298\":3,\"301\":2}}],[\"enumerable\",{\"1\":{\"191\":4}}],[\"enumeration\",{\"1\":{\"187\":2}}],[\"entity\",{\"0\":{\"231\":1},\"1\":{\"185\":1,\"231\":1,\"283\":1}}],[\"enrich\",{\"1\":{\"114\":1,\"362\":1}}],[\"enhancement\",{\"0\":{\"114\":1,\"115\":1,\"122\":1,\"362\":1,\"363\":1,\"373\":1}}],[\"enhance\",{\"0\":{\"110\":1},\"1\":{\"115\":1,\"363\":1}}],[\"endplay\",{\"1\":{\"227\":4}}],[\"end\",{\"1\":{\"1\":2,\"376\":1,\"377\":3}}],[\"etc\",{\"1\":{\"76\":1,\"90\":4}}],[\"exclude\",{\"1\":{\"303\":1}}],[\"excerpt\",{\"1\":{\"127\":1}}],[\"exist\",{\"1\":{\"298\":2}}],[\"exists\",{\"1\":{\"235\":3,\"298\":1}}],[\"executing\",{\"1\":{\"234\":2,\"235\":6}}],[\"executestrategy\",{\"1\":{\"226\":4}}],[\"execute\",{\"1\":{\"218\":4,\"234\":8,\"235\":7}}],[\"extends\",{\"1\":{\"115\":1,\"207\":2,\"209\":3,\"210\":1,\"213\":1,\"217\":3,\"223\":3,\"225\":2,\"227\":2,\"363\":1}}],[\"extended\",{\"1\":{\"114\":1,\"362\":1}}],[\"extensions\",{\"1\":{\"113\":1,\"114\":2,\"361\":1,\"362\":2}}],[\"extension\",{\"0\":{\"113\":1,\"361\":1}}],[\"example\",{\"1\":{\"62\":1}}],[\"expr2\",{\"1\":{\"219\":10}}],[\"expr1\",{\"1\":{\"219\":10}}],[\"expression\",{\"1\":{\"219\":22}}],[\"expression4j\",{\"1\":{\"219\":1}}],[\"express\",{\"1\":{\"44\":1}}],[\"export\",{\"1\":{\"90\":2}}],[\"experiences\",{\"1\":{\"1\":1}}],[\"e\",{\"0\":{\"65\":1},\"1\":{\"13\":1,\"99\":3,\"103\":4,\"130\":1,\"209\":2,\"212\":4,\"305\":2}}],[\"h5新特性\",{\"0\":{\"348\":1}}],[\"hbuilder中\",{\"1\":{\"297\":1}}],[\"html>\",{\"1\":{\"339\":1,\"340\":1}}],[\"html\",{\"0\":{\"290\":1,\"358\":1},\"1\":{\"340\":1,\"379\":1},\"2\":{\"343\":1,\"347\":1,\"357\":1,\"386\":1}}],[\"https\",{\"1\":{\"273\":5}}],[\"http\",{\"1\":{\"81\":1,\"189\":1,\"206\":1}}],[\"having\",{\"1\":{\"369\":1}}],[\"hanlerequest\",{\"1\":{\"217\":1}}],[\"handler\",{\"1\":{\"217\":1}}],[\"harmony\",{\"1\":{\"191\":1,\"193\":1,\"409\":2}}],[\"halfsort\",{\"1\":{\"147\":1}}],[\"hasnext\",{\"1\":{\"220\":5}}],[\"hashmap<string\",{\"1\":{\"215\":1}}],[\"hashmap\",{\"1\":{\"215\":3,\"219\":1}}],[\"hashtable<string\",{\"1\":{\"209\":2}}],[\"hashtable\",{\"1\":{\"209\":3}}],[\"hasbeard\",{\"1\":{\"191\":1}}],[\"has\",{\"1\":{\"1\":2,\"107\":1,\"114\":1,\"118\":1,\"191\":1,\"362\":1,\"370\":1}}],[\"h1\",{\"1\":{\"128\":1}}],[\"h2o\",{\"1\":{\"123\":1,\"367\":1}}],[\"h\",{\"1\":{\"99\":2,\"339\":1}}],[\"hi\",{\"1\":{\"221\":2}}],[\"hibernate\",{\"1\":{\"189\":1,\"206\":1,\"227\":1}}],[\"highlight\",{\"0\":{\"137\":1}}],[\"history\",{\"1\":{\"85\":1}}],[\"him\",{\"1\":{\"1\":1}}],[\"honda\",{\"1\":{\"191\":1}}],[\"hope\",{\"1\":{\"129\":1,\"382\":1}}],[\"homeview\",{\"1\":{\"233\":7}}],[\"homepage\",{\"1\":{\"61\":1,\"62\":2}}],[\"home\",{\"0\":{\"60\":1,\"62\":1},\"1\":{\"61\":2,\"62\":1,\"233\":4,\"234\":4}}],[\"how\",{\"1\":{\"2\":1,\"111\":1,\"359\":1,\"379\":1}}],[\"help\",{\"1\":{\"286\":1}}],[\"hello\",{\"1\":{\"191\":1,\"208\":2,\"221\":2,\"298\":3}}],[\"helloworld\",{\"1\":{\"191\":2,\"297\":1}}],[\"hexnum\",{\"1\":{\"298\":1}}],[\"hex\",{\"1\":{\"223\":3}}],[\"hexaobserver\",{\"1\":{\"223\":4}}],[\"header中不需要指定content\",{\"1\":{\"307\":1}}],[\"heademployee\",{\"1\":{\"212\":3}}],[\"headmarketing\",{\"1\":{\"212\":4}}],[\"head\",{\"1\":{\"212\":4,\"237\":1}}],[\"headsales\",{\"1\":{\"212\":4}}],[\"here\",{\"1\":{\"62\":1,\"130\":1,\"191\":1,\"263\":1,\"267\":1}}],[\"he\",{\"1\":{\"1\":5}}],[\"pypi\",{\"1\":{\"273\":5}}],[\"python3\",{\"1\":{\"273\":1}}],[\"python2\",{\"1\":{\"273\":1}}],[\"python\",{\"0\":{\"272\":1,\"507\":1}}],[\"pip\",{\"1\":{\"273\":1}}],[\"pnpm将它保存在机器上的一个全局存储中\",{\"1\":{\"259\":1}}],[\"pnpm\",{\"0\":{\"259\":1}}],[\"performant\",{\"1\":{\"259\":1}}],[\"persons\",{\"1\":{\"211\":25}}],[\"person\",{\"1\":{\"191\":6,\"211\":46}}],[\"peng\",{\"1\":{\"1\":1}}],[\"pop\",{\"1\":{\"380\":1}}],[\"pop3\",{\"1\":{\"189\":1,\"206\":1}}],[\"position\",{\"1\":{\"374\":1}}],[\"post\",{\"1\":{\"287\":1}}],[\"postman增加对应接口的调试条目\",{\"1\":{\"284\":1}}],[\"pojo\",{\"1\":{\"229\":1,\"232\":1,\"236\":3}}],[\"portfolio\",{\"0\":{\"60\":1},\"1\":{\"61\":3}}],[\"push\",{\"1\":{\"148\":3,\"191\":1,\"379\":1}}],[\"publicmethod\",{\"1\":{\"191\":1}}],[\"publicproperty\",{\"1\":{\"191\":1}}],[\"public\",{\"1\":{\"130\":1,\"191\":4,\"206\":11,\"207\":23,\"208\":17,\"209\":19,\"210\":13,\"211\":22,\"212\":8,\"213\":13,\"214\":14,\"215\":11,\"216\":9,\"217\":14,\"218\":15,\"219\":15,\"220\":12,\"221\":9,\"222\":13,\"223\":18,\"224\":14,\"225\":15,\"226\":13,\"227\":6,\"228\":23,\"229\":16,\"230\":16,\"231\":17,\"232\":18,\"233\":12,\"234\":21,\"235\":19,\"236\":13,\"305\":1}}],[\"put\",{\"1\":{\"89\":1,\"209\":4,\"215\":1,\"287\":1}}],[\"pre\",{\"1\":{\"364\":1}}],[\"prettysure\",{\"1\":{\"298\":2}}],[\"prev\",{\"1\":{\"104\":1}}],[\"principle\",{\"0\":{\"239\":1,\"240\":1,\"241\":1,\"243\":1,\"245\":1},\"1\":{\"244\":1}}],[\"printdata\",{\"1\":{\"231\":3}}],[\"printstudentdetails\",{\"1\":{\"229\":2}}],[\"printstacktrace\",{\"1\":{\"209\":1}}],[\"printpersons\",{\"1\":{\"211\":5}}],[\"println\",{\"1\":{\"206\":3,\"207\":6,\"208\":1,\"209\":6,\"210\":2,\"211\":5,\"212\":3,\"213\":6,\"214\":3,\"215\":2,\"216\":3,\"217\":3,\"218\":2,\"219\":2,\"220\":1,\"221\":1,\"222\":3,\"223\":5,\"224\":4,\"225\":5,\"226\":3,\"227\":7,\"228\":4,\"229\":3,\"230\":2,\"231\":1,\"232\":4,\"233\":4,\"234\":3,\"235\":5,\"236\":4}}],[\"print\",{\"1\":{\"107\":1}}],[\"privatefunction\",{\"1\":{\"191\":3}}],[\"privatevariable\",{\"1\":{\"191\":2}}],[\"private\",{\"1\":{\"191\":1,\"208\":14,\"209\":2,\"210\":1,\"211\":7,\"212\":4,\"213\":1,\"214\":3,\"215\":9,\"216\":4,\"217\":1,\"218\":5,\"219\":5,\"220\":1,\"221\":1,\"222\":3,\"223\":2,\"224\":1,\"226\":1,\"229\":5,\"230\":3,\"231\":4,\"232\":2,\"233\":5,\"234\":2,\"235\":2,\"236\":2}}],[\"process=>operation\",{\"1\":{\"376\":1}}],[\"process\",{\"1\":{\"376\":2}}],[\"processing\",{\"1\":{\"230\":4}}],[\"promise对象\",{\"0\":{\"427\":1}}],[\"promise\",{\"0\":{\"404\":1},\"1\":{\"328\":1}}],[\"properties\",{\"0\":{\"508\":1}}],[\"property\",{\"1\":{\"191\":1,\"298\":1}}],[\"proposal\",{\"1\":{\"325\":1}}],[\"provider\",{\"1\":{\"283\":1}}],[\"provides\",{\"1\":{\"115\":1,\"363\":1}}],[\"programming\",{\"1\":{\"237\":1}}],[\"protect\",{\"1\":{\"216\":1}}],[\"protected\",{\"1\":{\"209\":1,\"210\":2,\"213\":1,\"217\":6,\"223\":1,\"225\":1}}],[\"prototypepatterndemo\",{\"1\":{\"209\":3}}],[\"prototype\",{\"0\":{\"209\":1},\"1\":{\"182\":2,\"191\":8}}],[\"proxy和reflect\",{\"0\":{\"422\":1}}],[\"proxypatterndemo\",{\"1\":{\"216\":1}}],[\"proxyimage\",{\"1\":{\"216\":5}}],[\"proxy\",{\"0\":{\"216\":1},\"1\":{\"183\":2}}],[\"profile\",{\"1\":{\"90\":5}}],[\"project\",{\"0\":{\"62\":1},\"1\":{\"62\":2,\"284\":1,\"303\":1}}],[\"p\",{\"1\":{\"99\":1}}],[\"ps\",{\"1\":{\"85\":1}}],[\"pwd\",{\"1\":{\"85\":1}}],[\"plugin\",{\"1\":{\"115\":1,\"363\":1}}],[\"plugins\",{\"1\":{\"113\":1,\"361\":1}}],[\"playground\",{\"0\":{\"383\":1,\"384\":1},\"1\":{\"384\":2}}],[\"play\",{\"1\":{\"227\":4}}],[\"player\",{\"1\":{\"224\":4}}],[\"playing\",{\"1\":{\"1\":2,\"227\":4}}],[\"plan\",{\"1\":{\"121\":2,\"372\":2}}],[\"placeorders\",{\"1\":{\"218\":2}}],[\"place\",{\"1\":{\"62\":1,\"130\":1,\"305\":1}}],[\"please\",{\"1\":{\"61\":1,\"62\":1,\"111\":1,\"114\":1,\"130\":1,\"305\":1,\"359\":1,\"362\":1,\"379\":1}}],[\"padding\",{\"1\":{\"392\":1}}],[\"package\",{\"1\":{\"257\":1,\"258\":2,\"303\":1}}],[\"parser\",{\"1\":{\"302\":1}}],[\"parsed\",{\"1\":{\"113\":1,\"361\":1}}],[\"parts\",{\"1\":{\"228\":4}}],[\"partition\",{\"1\":{\"148\":1}}],[\"partial\",{\"1\":{\"120\":1,\"378\":1}}],[\"partial^r\",{\"1\":{\"120\":1,\"378\":1}}],[\"paragraph\",{\"1\":{\"99\":2}}],[\"patterns\",{\"0\":{\"182\":1,\"183\":1,\"184\":1},\"1\":{\"237\":7}}],[\"pattern\",{\"0\":{\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"211\":2,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1},\"1\":{\"99\":1,\"182\":5,\"183\":8,\"184\":12,\"185\":8,\"210\":1,\"237\":1}}],[\"path=$path\",{\"1\":{\"90\":2}}],[\"passwd\",{\"0\":{\"74\":1},\"1\":{\"85\":1}}],[\"passion\",{\"1\":{\"1\":1}}],[\"pages\",{\"1\":{\"110\":2}}],[\"page\",{\"0\":{\"127\":1,\"128\":1,\"129\":1,\"130\":1},\"1\":{\"61\":2,\"62\":1,\"104\":4,\"107\":2,\"112\":1,\"127\":1,\"128\":2,\"129\":2,\"131\":1,\"233\":7,\"237\":1,\"360\":1,\"380\":1},\"2\":{\"133\":1}}],[\"pci\",{\"1\":{\"44\":1}}],[\"pharmaceutical\",{\"1\":{\"1\":1}}],[\"pharmacist\",{\"1\":{\"1\":1}}],[\"介绍\",{\"0\":{\"1\":1,\"155\":1,\"257\":1,\"285\":1}}],[\"audio\",{\"0\":{\"350\":1}}],[\"authenticating\",{\"1\":{\"234\":2}}],[\"authenticationfilter\",{\"1\":{\"234\":3}}],[\"authenticated\",{\"1\":{\"233\":3}}],[\"author\",{\"0\":{\"0\":1},\"1\":{\"129\":1}}],[\"ajax\",{\"1\":{\"329\":1}}],[\"await\",{\"0\":{\"405\":1},\"1\":{\"328\":1}}],[\"awt\",{\"1\":{\"212\":1,\"226\":1}}],[\"a+b+c+d\",{\"1\":{\"301\":1}}],[\"a=\",{\"1\":{\"298\":1}}],[\"at\",{\"1\":{\"298\":1}}],[\"attrs\",{\"0\":{\"369\":1}}],[\"attach\",{\"1\":{\"223\":4}}],[\"attack\",{\"1\":{\"208\":1}}],[\"attitude\",{\"1\":{\"1\":1}}],[\"age\",{\"1\":{\"298\":2,\"301\":9}}],[\"available\",{\"1\":{\"225\":3}}],[\"actionscript\",{\"1\":{\"407\":1}}],[\"actionservlet\",{\"1\":{\"218\":1}}],[\"action\",{\"1\":{\"218\":1}}],[\"accept\",{\"1\":{\"228\":7}}],[\"access\",{\"0\":{\"232\":1},\"1\":{\"185\":1,\"216\":1,\"232\":2}}],[\"according\",{\"1\":{\"110\":1}}],[\"apply\",{\"0\":{\"442\":1},\"1\":{\"327\":1,\"474\":1}}],[\"appendix\",{\"0\":{\"100\":1}}],[\"api\",{\"1\":{\"232\":1}}],[\"apache\",{\"1\":{\"217\":1}}],[\"aop\",{\"1\":{\"216\":1}}],[\"am\",{\"1\":{\"191\":3,\"368\":2}}],[\"amd\",{\"0\":{\"495\":1},\"1\":{\"191\":1,\"193\":1}}],[\"a0\",{\"1\":{\"165\":1}}],[\"adapter\",{\"1\":{\"183\":2}}],[\"addservice\",{\"1\":{\"235\":2}}],[\"addfilter\",{\"1\":{\"234\":2}}],[\"add\",{\"1\":{\"163\":1,\"191\":1,\"211\":10,\"212\":8,\"218\":1,\"222\":4,\"223\":1,\"232\":2,\"234\":1,\"235\":1,\"236\":2,\"252\":1}}],[\"address\",{\"1\":{\"72\":1}}],[\"adt\",{\"1\":{\"163\":1}}],[\"args\",{\"1\":{\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1}}],[\"array\",{\"1\":{\"455\":1}}],[\"array<number>\",{\"1\":{\"298\":1}}],[\"arraylist<studentvo>\",{\"1\":{\"236\":1}}],[\"arraylist<student>\",{\"1\":{\"232\":1}}],[\"arraylist<service>\",{\"1\":{\"235\":1}}],[\"arraylist<filter>\",{\"1\":{\"234\":1}}],[\"arraylist<observer>\",{\"1\":{\"223\":1}}],[\"arraylist<order>\",{\"1\":{\"218\":1}}],[\"arraylist<memento>\",{\"1\":{\"222\":1}}],[\"arraylist<employee>\",{\"1\":{\"212\":1}}],[\"arraylist<person>\",{\"1\":{\"211\":4}}],[\"arraylist\",{\"1\":{\"211\":4,\"212\":1,\"218\":1,\"222\":1,\"223\":2,\"232\":1,\"234\":1,\"235\":1,\"236\":1}}],[\"arr\",{\"1\":{\"148\":26,\"298\":3,\"413\":1}}],[\"are\",{\"1\":{\"111\":1,\"129\":1,\"130\":1,\"359\":1,\"379\":1}}],[\"ak\",{\"1\":{\"145\":1}}],[\"a1\",{\"1\":{\"145\":1,\"165\":1,\"377\":1}}],[\"abcstock\",{\"1\":{\"218\":13}}],[\"abc\",{\"1\":{\"218\":3}}],[\"abstractcustomer\",{\"1\":{\"225\":9}}],[\"abstractlogger\",{\"1\":{\"217\":18}}],[\"abstractfactorypatterndemo\",{\"1\":{\"207\":2}}],[\"abstractfactory\",{\"1\":{\"207\":9}}],[\"abstract\",{\"0\":{\"207\":1},\"1\":{\"182\":2,\"207\":3,\"209\":2,\"210\":2,\"213\":1,\"217\":2,\"223\":2,\"225\":3,\"227\":4}}],[\"absolute\",{\"1\":{\"130\":1,\"305\":1}}],[\"about\",{\"0\":{\"0\":1}}],[\"aaa\",{\"1\":{\"99\":3,\"252\":1}}],[\"async\",{\"0\":{\"405\":1},\"1\":{\"328\":1}}],[\"assets\",{\"1\":{\"130\":1,\"305\":1}}],[\"associate\",{\"1\":{\"99\":1}}],[\"as\",{\"1\":{\"127\":1,\"128\":1}}],[\"ascii码\",{\"1\":{\"16\":1}}],[\"a等\",{\"1\":{\"98\":1}}],[\"align属性失效\",{\"1\":{\"395\":1}}],[\"align\",{\"0\":{\"368\":1},\"1\":{\"368\":1,\"395\":3}}],[\"aliyun\",{\"1\":{\"273\":1}}],[\"allow\",{\"1\":{\"303\":1}}],[\"alert\",{\"1\":{\"301\":3}}],[\"algorithm\",{\"1\":{\"141\":1}}],[\"al\",{\"1\":{\"85\":1}}],[\"also\",{\"1\":{\"1\":1,\"107\":2,\"128\":1,\"131\":1,\"191\":1}}],[\"always\",{\"1\":{\"1\":1}}],[\"any类型是十分有用的\",{\"1\":{\"298\":1}}],[\"any\",{\"1\":{\"298\":4,\"301\":2}}],[\"anything\",{\"1\":{\"1\":1}}],[\"anotherkey\",{\"1\":{\"191\":1}}],[\"an\",{\"1\":{\"62\":1,\"104\":1,\"112\":1,\"145\":1,\"165\":1,\"217\":9}}],[\"andexpression\",{\"1\":{\"219\":4}}],[\"andcriteria\",{\"1\":{\"211\":4}}],[\"android\",{\"1\":{\"59\":1}}],[\"and\",{\"0\":{\"104\":1,\"123\":1,\"367\":1},\"1\":{\"1\":3,\"61\":1,\"104\":1,\"107\":3,\"110\":1,\"111\":2,\"115\":1,\"122\":1,\"129\":1,\"131\":1,\"191\":1,\"235\":4,\"359\":2,\"363\":1,\"373\":1,\"379\":2}}],[\"a\",{\"1\":{\"1\":6,\"13\":1,\"61\":1,\"62\":1,\"72\":1,\"85\":1,\"98\":1,\"99\":6,\"103\":1,\"111\":1,\"121\":1,\"131\":1,\"148\":2,\"163\":4,\"187\":1,\"219\":2,\"223\":1,\"235\":4,\"298\":1,\"301\":1,\"359\":1,\"360\":1,\"364\":11,\"369\":1,\"372\":1,\"374\":1,\"375\":1,\"379\":1,\"382\":1,\"413\":8}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
