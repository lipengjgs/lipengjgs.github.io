import{_ as e,c as t,o as n,e as i}from"./app-CSV6EovX.js";const r={},o=i('<h2 id="关于eslint和prettier" tabindex="-1"><a class="header-anchor" href="#关于eslint和prettier"><span>关于eslint和prettier</span></a></h2><blockquote><p>在最佳实践中前端项目总是会同时使用这两个插件，但好多用户不知道怎么用</p></blockquote><p>在项目中用命令行能够正常使用eslint，但文件中没有提示</p><p>版本太新2.4.4导致，使用2.4.2的及以前的插件版本即可</p><h2 id="关于换行格式lf和crlf" tabindex="-1"><a class="header-anchor" href="#关于换行格式lf和crlf"><span>关于换行格式LF和CRLF</span></a></h2><p>在开发过程中，‌推荐使用LF格式。‌</p><p>LF（‌Line Feed）‌和CRLF（‌Carriage Return Line Feed，‌即&quot;\\n&quot;和&quot;\\r\\n&quot;）‌都是用于表示文本文件中的行结束符，‌但它们在不同的操作系统中有不同的应用。‌LF是Unix和Linux系统中使用的行结束符，‌而CRLF则在Windows系统中更为常见。‌在代码仓库中，‌由于大多数服务器运行的是Linux系统，‌因此推荐使用LF作为行结束符。‌这样做的好处在于可以保持跨平台的一致性，‌避免因不同的行结束符导致的兼容性问题。‌</p><p>当在Windows环境下使用Git进行版本控制时，‌可以通过设置core.autocrlf选项来实现LF和CRLF之间的自动转换。‌例如，‌可以通过设置git config core.autocrlf true来在提交时自动将CRLF转换为LF，‌并在签出时代码时自动将LF转换为CRLF，‌从而确保在Windows环境下编辑和查看代码时不会出现问题。‌这种设置有助于保持代码的一致性和可读性，‌同时适应不同的操作系统环境。‌</p>',8),l=[o];function s(p,a){return n(),t("div",null,l)}const d=e(r,[["render",s],["__file","vscode.html.vue"]]),L=JSON.parse('{"path":"/soft-engineering/tools/vscode.html","title":"vscode","lang":"zh-CN","frontmatter":{"title":"vscode","footer":"","description":"关于eslint和prettier 在最佳实践中前端项目总是会同时使用这两个插件，但好多用户不知道怎么用 在项目中用命令行能够正常使用eslint，但文件中没有提示 版本太新2.4.4导致，使用2.4.2的及以前的插件版本即可 关于换行格式LF和CRLF 在开发过程中，‌推荐使用LF格式。‌ LF（‌Line Feed）‌和CRLF（‌Carriage...","head":[["meta",{"property":"og:url","content":"https://lipengjgs.github.io/soft-engineering/tools/vscode.html"}],["meta",{"property":"og:site_name","content":"SE Docs"}],["meta",{"property":"og:title","content":"vscode"}],["meta",{"property":"og:description","content":"关于eslint和prettier 在最佳实践中前端项目总是会同时使用这两个插件，但好多用户不知道怎么用 在项目中用命令行能够正常使用eslint，但文件中没有提示 版本太新2.4.4导致，使用2.4.2的及以前的插件版本即可 关于换行格式LF和CRLF 在开发过程中，‌推荐使用LF格式。‌ LF（‌Line Feed）‌和CRLF（‌Carriage..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"lipengjgs"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vscode\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lipengjgs\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"关于eslint和prettier","slug":"关于eslint和prettier","link":"#关于eslint和prettier","children":[]},{"level":2,"title":"关于换行格式LF和CRLF","slug":"关于换行格式lf和crlf","link":"#关于换行格式lf和crlf","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.29,"words":387},"filePathRelative":"soft-engineering/tools/vscode.md","autoDesc":true,"excerpt":"<h2>关于eslint和prettier</h2>\\n<blockquote>\\n<p>在最佳实践中前端项目总是会同时使用这两个插件，但好多用户不知道怎么用</p>\\n</blockquote>\\n<p>在项目中用命令行能够正常使用eslint，但文件中没有提示</p>\\n<p>版本太新2.4.4导致，使用2.4.2的及以前的插件版本即可</p>\\n<h2>关于换行格式LF和CRLF</h2>\\n<p>在开发过程中，‌推荐使用LF格式。‌</p>\\n<p>LF（‌Line Feed）‌和CRLF（‌Carriage Return Line Feed，‌即\\"\\\\n\\"和\\"\\\\r\\\\n\\"）‌都是用于表示文本文件中的行结束符，‌但它们在不同的操作系统中有不同的应用。‌LF是Unix和Linux系统中使用的行结束符，‌而CRLF则在Windows系统中更为常见。‌在代码仓库中，‌由于大多数服务器运行的是Linux系统，‌因此推荐使用LF作为行结束符。‌这样做的好处在于可以保持跨平台的一致性，‌避免因不同的行结束符导致的兼容性问题。‌</p>"}');export{d as comp,L as data};
