import{_ as e,c as a,o as n,e as i}from"./app-DDFa41zL.js";const t={},l=i('<h1 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>设计模式</span></a></h1><div class="hint-container info"><p class="hint-container-title">tips</p><p>学习JS中的设计模式，需要基础核心知识扎实，才能理解并熟练使用</p><ul><li>作用域</li><li>this</li><li>call, apply</li><li>闭包</li><li>原型</li><li>高阶函数</li></ul></div><h2 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h2><h2 id="策略模式" tabindex="-1"><a class="header-anchor" href="#策略模式"><span>策略模式</span></a></h2><h2 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式"><span>代理模式</span></a></h2><h2 id="迭代器模式" tabindex="-1"><a class="header-anchor" href="#迭代器模式"><span>迭代器模式</span></a></h2><h2 id="发布-订阅者模式" tabindex="-1"><a class="header-anchor" href="#发布-订阅者模式"><span>发布-订阅者模式/</span></a></h2><h2 id="命令模式" tabindex="-1"><a class="header-anchor" href="#命令模式"><span>命令模式</span></a></h2><h2 id="组合模式" tabindex="-1"><a class="header-anchor" href="#组合模式"><span>组合模式</span></a></h2><h2 id="模板方法模式" tabindex="-1"><a class="header-anchor" href="#模板方法模式"><span>模板方法模式</span></a></h2><h2 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式"><span>享元模式</span></a></h2><h2 id="职责链模式" tabindex="-1"><a class="header-anchor" href="#职责链模式"><span>职责链模式</span></a></h2><h2 id="中介者模式" tabindex="-1"><a class="header-anchor" href="#中介者模式"><span>中介者模式</span></a></h2><h2 id="装饰者模式" tabindex="-1"><a class="header-anchor" href="#装饰者模式"><span>装饰者模式</span></a></h2><h2 id="状态模式" tabindex="-1"><a class="header-anchor" href="#状态模式"><span>状态模式</span></a></h2><h2 id="适配器模式" tabindex="-1"><a class="header-anchor" href="#适配器模式"><span>适配器模式</span></a></h2>',16),s=[l];function h(r,c){return n(),a("div",null,s)}const d=e(t,[["render",h],["__file","design-pattern.html.vue"]]),o=JSON.parse('{"path":"/soft-engineering/fe/fe-basic/js/senior/design-pattern.html","title":"设计模式","lang":"zh-CN","frontmatter":{"description":"设计模式 tips 学习JS中的设计模式，需要基础核心知识扎实，才能理解并熟练使用 作用域 this call, apply 闭包 原型 高阶函数 单例模式 策略模式 代理模式 迭代器模式 发布-订阅者模式/ 命令模式 组合模式 模板方法模式 享元模式 职责链模式 中介者模式 装饰者模式 状态模式 适配器模式","head":[["meta",{"property":"og:url","content":"https://lipengjgs.github.io/soft-engineering/fe/fe-basic/js/senior/design-pattern.html"}],["meta",{"property":"og:site_name","content":"SE Docs"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式 tips 学习JS中的设计模式，需要基础核心知识扎实，才能理解并熟练使用 作用域 this call, apply 闭包 原型 高阶函数 单例模式 策略模式 代理模式 迭代器模式 发布-订阅者模式/ 命令模式 组合模式 模板方法模式 享元模式 职责链模式 中介者模式 装饰者模式 状态模式 适配器模式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T11:43:26.000Z"}],["meta",{"property":"article:author","content":"lipengjgs"}],["meta",{"property":"article:modified_time","content":"2024-06-27T11:43:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-27T11:43:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lipengjgs\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":2,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]},{"level":2,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]},{"level":2,"title":"迭代器模式","slug":"迭代器模式","link":"#迭代器模式","children":[]},{"level":2,"title":"发布-订阅者模式/","slug":"发布-订阅者模式","link":"#发布-订阅者模式","children":[]},{"level":2,"title":"命令模式","slug":"命令模式","link":"#命令模式","children":[]},{"level":2,"title":"组合模式","slug":"组合模式","link":"#组合模式","children":[]},{"level":2,"title":"模板方法模式","slug":"模板方法模式","link":"#模板方法模式","children":[]},{"level":2,"title":"享元模式","slug":"享元模式","link":"#享元模式","children":[]},{"level":2,"title":"职责链模式","slug":"职责链模式","link":"#职责链模式","children":[]},{"level":2,"title":"中介者模式","slug":"中介者模式","link":"#中介者模式","children":[]},{"level":2,"title":"装饰者模式","slug":"装饰者模式","link":"#装饰者模式","children":[]},{"level":2,"title":"状态模式","slug":"状态模式","link":"#状态模式","children":[]},{"level":2,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[]}],"git":{"createdTime":1719488606000,"updatedTime":1719488606000,"contributors":[{"name":"jgs","email":"12345@qq.com","commits":1}]},"readingTime":{"minutes":0.38,"words":115},"filePathRelative":"soft-engineering/fe/fe-basic/js/senior/design-pattern.md","localizedDate":"2024年6月27日","autoDesc":true,"excerpt":"\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">tips</p>\\n<p>学习JS中的设计模式，需要基础核心知识扎实，才能理解并熟练使用</p>\\n<ul>\\n<li>作用域</li>\\n<li>this</li>\\n<li>call, apply</li>\\n<li>闭包</li>\\n<li>原型</li>\\n<li>高阶函数</li>\\n</ul>\\n</div>\\n<h2>单例模式</h2>\\n<h2>策略模式</h2>\\n<h2>代理模式</h2>\\n<h2>迭代器模式</h2>\\n<h2>发布-订阅者模式/</h2>\\n<h2>命令模式</h2>"}');export{d as comp,o as data};
