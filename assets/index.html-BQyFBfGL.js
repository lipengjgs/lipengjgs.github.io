import{_ as i,c as e,o as s,f as l}from"./app-Qa8nBN6u.js";const a={},n=l(`<blockquote><p>开发人员遵循统一规范进行开发</p></blockquote><h2 id="命名" tabindex="-1"><a class="header-anchor" href="#命名"><span>命名</span></a></h2><blockquote><p>命名的过程本身就是一个抽象和思考的过程，当不能给一个模块、一个对象、一个函数，甚至一个变量找到合适的名称时，往往说明对问题的理解还不够透彻，需要重新去挖掘问题的本质，对<mark>问题域</mark>进行重新分析和抽象，有时还要调整设计和重构代码。因此，好的命名是写出好代码的基础。</p></blockquote><ol><li>项目命名: 小写形式，短横线连接</li><li>文件夹命名: 除vue工程的components下的文件夹外，采用<code>kebab-case</code>，有复数结构时，要采用复数命名法，缩写不用复数</li><li>图片资源文件：小写形式，下划线连接</li><li>文件命名： 除<code>.vue</code>组件型单文件 和 图片资源文件 外，采用<code>kebab-case</code>(包括vue页面文件eg:index.vue)</li><li>函数命名：<code>camelCase</code> (小驼峰)，操作的方法前缀尽可能用动词</li><li>样式class命名：小写形式，短横线连接</li><li>scss变量：<code>kebab-case</code>， 以<code>$</code>开头</li><li>vue组件命名: <code>PascalCase</code>(大驼峰)，组件name与文件名一致</li><li>ref命名: <code>camelCase</code> (小驼峰)，后缀加<code>Ref</code></li><li>path路径：<code>kebab-case</code></li><li>interface接口：<code>PascalCase</code></li></ol><p>注意：</p><ul><li>严禁中英文混合的命名形式，尽量避免纯中文拼音命名</li></ul><h2 id="编码" tabindex="-1"><a class="header-anchor" href="#编码"><span>编码</span></a></h2><h3 id="html" tabindex="-1"><a class="header-anchor" href="#html"><span>HTML</span></a></h3><ol><li>尽量减少嵌套层级</li></ol><h3 id="css-less-scss" tabindex="-1"><a class="header-anchor" href="#css-less-scss"><span>CSS/Less/Scss</span></a></h3><ol><li>省略值为0时的单位</li></ol><h3 id="js" tabindex="-1"><a class="header-anchor" href="#js"><span>JS</span></a></h3><ol><li>变量声明不用<code>var</code></li><li>不允许省略大括号（如if后面的大括号）</li><li>比较长一点的复杂一点的函数需要加注释</li><li>接口字段要写注释表明含义</li><li>函数的单一目的性，假如一个函数不好写单元测试，那么这个函数就需要调整</li></ol><h3 id="vue" tabindex="-1"><a class="header-anchor" href="#vue"><span>Vue</span></a></h3><ol><li><code>props</code> 要指明类型，尽量详细明确</li><li><code>v-for</code> 要设置 <code>key</code></li><li>组件上面较复杂的<code>if</code>判断要加注释</li></ol><p>注意：</p><ul><li>无必要，不加注释；有必要，尽量详细</li></ul><h2 id="ide配置" tabindex="-1"><a class="header-anchor" href="#ide配置"><span>IDE配置</span></a></h2><ol><li>安装ESLint插件，配置保存时lint和格式化</li></ol><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;editor.codeActionsOnSave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">    &quot;source.fixAll.eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;explicit&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;editor.formatOnSave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试"><span>单元测试</span></a></h2><ol><li>vite构建的vue项目建议使用<code>vitest</code></li><li>webpack构建的项目使用<code>jest</code></li><li>新写的<code>公共方法或者公共/比较独立的组件</code>需要写单元测试/组件测试 <ul><li>单元测试</li><li>组件测试</li></ul></li></ol><h2 id="关于codereview" tabindex="-1"><a class="header-anchor" href="#关于codereview"><span>关于CodeReview</span></a></h2><h2 id="mono-repo-项目结构与操作" tabindex="-1"><a class="header-anchor" href="#mono-repo-项目结构与操作"><span>mono repo 项目结构与操作</span></a></h2><h3 id="项目运行步骤-一般统一采用-pnpm-包管理器" tabindex="-1"><a class="header-anchor" href="#项目运行步骤-一般统一采用-pnpm-包管理器"><span>项目运行步骤（一般统一采用 pnpm 包管理器）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># npm淘宝镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> https://registry.npmmirror.com/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 全局安装 pnpm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pnpm</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 运行项目, pnpm运行脚本即可</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="项目中安装依赖" tabindex="-1"><a class="header-anchor" href="#项目中安装依赖"><span>项目中安装依赖</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># eg：在根目录上添加 axios 包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> axios</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -w</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># eg: 给 packages下面的 main项目 添加 axios 包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> axios</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>项目中 <code>package.json</code> 的脚本名称保持一致: 如<code>dev</code>，<code>build:dev</code>，<code>build:test</code>, <code>build:prod</code></li></ul><h3 id="微前端microp-app的集成" tabindex="-1"><a class="header-anchor" href="#微前端microp-app的集成"><span>微前端microp-app的集成</span></a></h3><ul><li>主项目 <code>main</code> 中安装 <code>micro-app</code></li><li>根据 <a href="https://micro-zoe.github.io/micro-app/docs.html#/zh-cn/start" target="_blank" rel="noopener noreferrer">文档</a> 中的使用方法在主应用中嵌入其他的项目</li></ul><h3 id="分支-版本" tabindex="-1"><a class="header-anchor" href="#分支-版本"><span>分支/版本</span></a></h3><ul><li>版本名称： V[大版本].[小版本].[修订版本]；初始版本V0.1.0</li><li><code>pnpm changeset</code>， 提交修订变更信息，<code>pnpm version</code>, 提升包版本</li><li>在dev合并到test分支时，需要打tag，升级修订版本：如V0.1.0升级到V0.1.1</li></ul><h3 id="拆分后的单仓与大仓项目结构" tabindex="-1"><a class="header-anchor" href="#拆分后的单仓与大仓项目结构"><span>拆分后的单仓与大仓项目结构</span></a></h3><blockquote><p>整体是单仓与大仓的结合方式，在一定的规则下可形成自由组合</p></blockquote><ol><li>公共组件工具仓（npm库的形式构建导出，或者直接引入使用）</li><li>登录、权限、状态等中心仓（采用<code>monorepo</code>的结构，适应多种不同权限需求：如平台使用、单个项目使用、定制使用；通过<code>submodule</code>依赖集成或者<code>microapp</code>集成需要的子项目都可以）</li><li>多个不同的业务项目单仓（既可单独运行，也可以作为子项目跟着中心仓库走，在中心仓库集中开发、调试、打包管理，假如依赖集成就需要结构和配置与中心仓库中项目保持一致，<code>import</code>导入时采用相对路径（直接使用中心仓的可以用<code>alias</code>），不要采用自动导入的方式，实行多分支管理）</li></ol><p>注意:</p><ol><li>时刻保持公共组件、子项目的的更新： <code>pnpm update &lt;package-name&gt;</code></li><li>多仓更加注意</li><li>submodule 的使用:</li></ol><p><code>git submodule add -b feature-init -f http://ip:port/cas/rep.git packages/rep</code></p><ol><li>保持公共仓与中心仓的稳定</li><li>定期清理重新安装本地的<code>node_modules</code>，因为<code>pnpm</code>会保存依赖仓库不同的提交的版本，多次update之后会越来越多</li></ol>`,40),t=[n];function d(o,c){return s(),e("div",null,t)}const p=i(a,[["render",d],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/soft-engineering/fe/specification/","title":"前端规范","lang":"zh-CN","frontmatter":{"title":"前端规范","footer":"","description":"开发人员遵循统一规范进行开发 命名 命名的过程本身就是一个抽象和思考的过程，当不能给一个模块、一个对象、一个函数，甚至一个变量找到合适的名称时，往往说明对问题的理解还不够透彻，需要重新去挖掘问题的本质，对问题域进行重新分析和抽象，有时还要调整设计和重构代码。因此，好的命名是写出好代码的基础。 项目命名: 小写形式，短横线连接 文件夹命名: 除vue工程...","head":[["meta",{"property":"og:url","content":"https://lipengjgs.github.io/soft-engineering/fe/specification/"}],["meta",{"property":"og:site_name","content":"SE Docs"}],["meta",{"property":"og:title","content":"前端规范"}],["meta",{"property":"og:description","content":"开发人员遵循统一规范进行开发 命名 命名的过程本身就是一个抽象和思考的过程，当不能给一个模块、一个对象、一个函数，甚至一个变量找到合适的名称时，往往说明对问题的理解还不够透彻，需要重新去挖掘问题的本质，对问题域进行重新分析和抽象，有时还要调整设计和重构代码。因此，好的命名是写出好代码的基础。 项目命名: 小写形式，短横线连接 文件夹命名: 除vue工程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-03T12:33:00.000Z"}],["meta",{"property":"article:author","content":"lipengjgs"}],["meta",{"property":"article:modified_time","content":"2025-04-03T12:33:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端规范\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-03T12:33:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lipengjgs\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"命名","slug":"命名","link":"#命名","children":[]},{"level":2,"title":"编码","slug":"编码","link":"#编码","children":[{"level":3,"title":"HTML","slug":"html","link":"#html","children":[]},{"level":3,"title":"CSS/Less/Scss","slug":"css-less-scss","link":"#css-less-scss","children":[]},{"level":3,"title":"JS","slug":"js","link":"#js","children":[]},{"level":3,"title":"Vue","slug":"vue","link":"#vue","children":[]}]},{"level":2,"title":"IDE配置","slug":"ide配置","link":"#ide配置","children":[]},{"level":2,"title":"单元测试","slug":"单元测试","link":"#单元测试","children":[]},{"level":2,"title":"关于CodeReview","slug":"关于codereview","link":"#关于codereview","children":[]},{"level":2,"title":"mono repo 项目结构与操作","slug":"mono-repo-项目结构与操作","link":"#mono-repo-项目结构与操作","children":[{"level":3,"title":"项目运行步骤（一般统一采用 pnpm 包管理器）","slug":"项目运行步骤-一般统一采用-pnpm-包管理器","link":"#项目运行步骤-一般统一采用-pnpm-包管理器","children":[]},{"level":3,"title":"项目中安装依赖","slug":"项目中安装依赖","link":"#项目中安装依赖","children":[]},{"level":3,"title":"微前端microp-app的集成","slug":"微前端microp-app的集成","link":"#微前端microp-app的集成","children":[]},{"level":3,"title":"分支/版本","slug":"分支-版本","link":"#分支-版本","children":[]},{"level":3,"title":"拆分后的单仓与大仓项目结构","slug":"拆分后的单仓与大仓项目结构","link":"#拆分后的单仓与大仓项目结构","children":[]}]}],"git":{"createdTime":1728306846000,"updatedTime":1743683580000,"contributors":[{"name":"lipengjgs","email":"12345@qq.com","commits":3},{"name":"lipengjgs","email":"lipengjgs@163.com","commits":2}]},"readingTime":{"minutes":4.01,"words":1202},"filePathRelative":"soft-engineering/fe/specification/README.md","localizedDate":"2024年10月7日","autoDesc":true,"excerpt":"<blockquote>\\n<p>开发人员遵循统一规范进行开发</p>\\n</blockquote>\\n<h2>命名</h2>\\n<blockquote>\\n<p>命名的过程本身就是一个抽象和思考的过程，当不能给一个模块、一个对象、一个函数，甚至一个变量找到合适的名称时，往往说明对问题的理解还不够透彻，需要重新去挖掘问题的本质，对<mark>问题域</mark>进行重新分析和抽象，有时还要调整设计和重构代码。因此，好的命名是写出好代码的基础。</p>\\n</blockquote>\\n<ol>\\n<li>项目命名: 小写形式，短横线连接</li>\\n<li>文件夹命名: 除vue工程的components下的文件夹外，采用<code>kebab-case</code>，有复数结构时，要采用复数命名法，缩写不用复数</li>\\n<li>图片资源文件：小写形式，下划线连接</li>\\n<li>文件命名： 除<code>.vue</code>组件型单文件 和 图片资源文件 外，采用<code>kebab-case</code>(包括vue页面文件eg:index.vue)</li>\\n<li>函数命名：<code>camelCase</code> (小驼峰)，操作的方法前缀尽可能用动词</li>\\n<li>样式class命名：小写形式，短横线连接</li>\\n<li>scss变量：<code>kebab-case</code>， 以<code>$</code>开头</li>\\n<li>vue组件命名: <code>PascalCase</code>(大驼峰)，组件name与文件名一致</li>\\n<li>ref命名: <code>camelCase</code> (小驼峰)，后缀加<code>Ref</code></li>\\n<li>path路径：<code>kebab-case</code></li>\\n<li>interface接口：<code>PascalCase</code></li>\\n</ol>"}');export{p as comp,r as data};
