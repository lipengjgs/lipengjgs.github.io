import{_ as e,c as s,o as i,e as t}from"./app-D6ynBPrZ.js";const n={},a=t(`<h2 id="设计理念" tabindex="-1"><a class="header-anchor" href="#设计理念"><span>设计理念</span></a></h2><blockquote><p>灵感来源于Angular</p></blockquote><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><ul><li>Controllers handling incoming requests and returning responses to the client 配合services处理数据，主要处理数据在services, Controller负责路由接口 使用：Decorators、 classes @Controller([path])</li><li>Providers</li><li>Modules</li><li>Middleware</li><li>Exception Filters</li><li>Pipes</li><li>Guards</li><li>interceptors</li><li>Custom Decorators</li></ul><h2 id="脚本快速生成物料模板" tabindex="-1"><a class="header-anchor" href="#脚本快速生成物料模板"><span>脚本快速生成物料模板</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">nest</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> g</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [name]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">nest</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> g</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> controller</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [name]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">nest</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> g</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [name]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">nest</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> g</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> resource</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [name] </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># CRUD controller</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="passport" tabindex="-1"><a class="header-anchor" href="#passport"><span>passport</span></a></h2><p>虽然仅使用@nestjs/jwt就能实现身份验证的功能，但是使用passport能在更高层次上提供更多便利。Passport 拥有丰富的 strategies 生态系统，实现了各种身份验证机制。虽然概念简单，但你可以选择的 Passport 策略集非常丰富且种类繁多。Passport 将这些不同的步骤抽象为一个标准模式，@nestjs/passport 模块将这个模式封装并标准化为熟悉的 Nest 结构</p><p>NestJs中何时使用卫士以及何时使用中间件 在NestJs中，卫士（Guards）和中间件（Middleware）是用于处理请求的两种不同的机制。</p><p>卫士是一种用于对请求进行验证和授权的机制。它可以用于保护路由、控制器或者特定的处理程序。卫士通常用于验证用户的身份、权限和角色等信息。当请求到达时，卫士会在路由处理程序之前执行，并根据验证结果决定是否允许继续处理请求。如果验证失败，卫士可以返回错误响应或者重定向到其他页面。在NestJs中，可以通过实现CanActivate接口来创建自定义的卫士。</p><p>中间件是一种用于在请求到达路由处理程序之前或之后执行一些通用逻辑的机制。它可以用于处理请求的前置或后置操作，例如日志记录、错误处理、请求转发等。中间件可以在请求到达路由处理程序之前对请求进行修改或者在路由处理程序之后对响应进行修改。在NestJs中，可以通过使用@Middleware()装饰器来创建自定义的中间件。</p><p>那么何时使用卫士，何时使用中间件呢？</p><p>使用卫士： 当需要对请求进行验证和授权时，例如验证用户的身份、权限和角色等信息。 当需要在路由处理程序之前进行验证和授权操作时。 当需要根据验证结果决定是否允许继续处理请求时。 使用中间件： 当需要在请求到达路由处理程序之前或之后执行一些通用逻辑时，例如日志记录、错误处理、请求转发等。 当需要对请求进行修改或者对响应进行修改时。 当需要在多个路由之间共享一些通用逻辑时。</p>`,13),l=[a];function r(o,p){return i(),s("div",null,l)}const c=e(n,[["render",r],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/soft-engineering/be/nestjs/","title":"nestjs概述","lang":"zh-CN","frontmatter":{"title":"nestjs概述","footer":"","description":"设计理念 灵感来源于Angular 基本概念 Controllers handling incoming requests and returning responses to the client 配合services处理数据，主要处理数据在services, Controller负责路由接口 使用：Decorators、 classes @Cont...","head":[["meta",{"property":"og:url","content":"https://lipengjgs.github.io/soft-engineering/be/nestjs/"}],["meta",{"property":"og:site_name","content":"SE Docs"}],["meta",{"property":"og:title","content":"nestjs概述"}],["meta",{"property":"og:description","content":"设计理念 灵感来源于Angular 基本概念 Controllers handling incoming requests and returning responses to the client 配合services处理数据，主要处理数据在services, Controller负责路由接口 使用：Decorators、 classes @Cont..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-05T14:37:41.000Z"}],["meta",{"property":"article:author","content":"lipengjgs"}],["meta",{"property":"article:modified_time","content":"2024-08-05T14:37:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nestjs概述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-05T14:37:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lipengjgs\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"设计理念","slug":"设计理念","link":"#设计理念","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"脚本快速生成物料模板","slug":"脚本快速生成物料模板","link":"#脚本快速生成物料模板","children":[]},{"level":2,"title":"passport","slug":"passport","link":"#passport","children":[]}],"git":{"createdTime":1722254173000,"updatedTime":1722868661000,"contributors":[{"name":"jgs","email":"12345@qq.com","commits":2}]},"readingTime":{"minutes":2.42,"words":725},"filePathRelative":"soft-engineering/be/nestjs/README.md","localizedDate":"2024年7月29日","autoDesc":true,"excerpt":"<h2>设计理念</h2>\\n<blockquote>\\n<p>灵感来源于Angular</p>\\n</blockquote>\\n<h2>基本概念</h2>\\n<ul>\\n<li>Controllers\\nhandling incoming requests and returning responses to the client\\n配合services处理数据，主要处理数据在services, Controller负责路由接口\\n使用：Decorators、 classes\\n@Controller([path])</li>\\n<li>Providers</li>\\n<li>Modules</li>\\n<li>Middleware</li>\\n<li>Exception Filters</li>\\n<li>Pipes</li>\\n<li>Guards</li>\\n<li>interceptors</li>\\n<li>Custom Decorators</li>\\n</ul>"}');export{c as comp,d as data};
