import{_ as e,c as t,o as i,f as n}from"./app-Qa8nBN6u.js";const a={},l=n('<h2 id="_1-架构的演进" tabindex="-1"><a class="header-anchor" href="#_1-架构的演进"><span>1. 架构的演进</span></a></h2><p>单进程架构 --&gt; 多进程架构 --&gt; 面向服务的架构（SOA，依旧是多进程模型，越拆越多） --&gt; 弹性架构: 在强大性能设备上会以多进程的方式运行基础服务，但是如果在资源受限的设备上，Chrome 会将很多服务整合到一个进程中，从而节省内存占用</p><p>目前的chrome架构：打开chrome浏览器程序，然后打开浏览器的任务管理器可以看到浏览器的相关进程</p><ul><li>浏览器主进程（一个）</li><li>网络进程（一个）</li><li>缓存进程（一个）</li><li>GPU进程（从主进程中独立出来的进程）</li><li>渲染进程（多个）</li><li>插件进程（多个）</li></ul><h2 id="_2-整体流程" tabindex="-1"><a class="header-anchor" href="#_2-整体流程"><span>2. 整体流程</span></a></h2><p><a href="./url-page">url到页面展示的流程</a>，其中最后的渲染流程很重要</p><h2 id="_3-渲染流程" tabindex="-1"><a class="header-anchor" href="#_3-渲染流程"><span>3. <a href="./render">渲染流程</a></span></a></h2><h2 id="_4-浏览器中的js执行机制" tabindex="-1"><a class="header-anchor" href="#_4-浏览器中的js执行机制"><span>4. 浏览器中的JS执行机制</span></a></h2><h2 id="_5-性能优化" tabindex="-1"><a class="header-anchor" href="#_5-性能优化"><span>5. 性能优化</span></a></h2><ul><li>加载阶段</li><li>交互阶段</li></ul><h2 id="_6-缓存" tabindex="-1"><a class="header-anchor" href="#_6-缓存"><span>6. 缓存</span></a></h2><h2 id="_7-浏览器安全" tabindex="-1"><a class="header-anchor" href="#_7-浏览器安全"><span>7. 浏览器安全</span></a></h2>',12),r=[l];function o(s,c){return i(),t("div",null,r)}const p=e(a,[["render",o],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/soft-engineering/fe/fe-basic/browser/","title":"概述","lang":"zh-CN","frontmatter":{"title":"概述","footer":"","description":"1. 架构的演进 单进程架构 --> 多进程架构 --> 面向服务的架构（SOA，依旧是多进程模型，越拆越多） --> 弹性架构: 在强大性能设备上会以多进程的方式运行基础服务，但是如果在资源受限的设备上，Chrome 会将很多服务整合到一个进程中，从而节省内存占用 目前的chrome架构：打开chrome浏览器程序，然后打开浏览器的任务管理器可以看到...","head":[["meta",{"property":"og:url","content":"https://lipengjgs.github.io/soft-engineering/fe/fe-basic/browser/"}],["meta",{"property":"og:site_name","content":"SE Docs"}],["meta",{"property":"og:title","content":"概述"}],["meta",{"property":"og:description","content":"1. 架构的演进 单进程架构 --> 多进程架构 --> 面向服务的架构（SOA，依旧是多进程模型，越拆越多） --> 弹性架构: 在强大性能设备上会以多进程的方式运行基础服务，但是如果在资源受限的设备上，Chrome 会将很多服务整合到一个进程中，从而节省内存占用 目前的chrome架构：打开chrome浏览器程序，然后打开浏览器的任务管理器可以看到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-07T10:13:09.000Z"}],["meta",{"property":"article:author","content":"lipengjgs"}],["meta",{"property":"article:modified_time","content":"2024-08-07T10:13:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"概述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-07T10:13:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lipengjgs\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"1. 架构的演进","slug":"_1-架构的演进","link":"#_1-架构的演进","children":[]},{"level":2,"title":"2. 整体流程","slug":"_2-整体流程","link":"#_2-整体流程","children":[]},{"level":2,"title":"3. 渲染流程","slug":"_3-渲染流程","link":"#_3-渲染流程","children":[]},{"level":2,"title":"4. 浏览器中的JS执行机制","slug":"_4-浏览器中的js执行机制","link":"#_4-浏览器中的js执行机制","children":[]},{"level":2,"title":"5. 性能优化","slug":"_5-性能优化","link":"#_5-性能优化","children":[]},{"level":2,"title":"6. 缓存","slug":"_6-缓存","link":"#_6-缓存","children":[]},{"level":2,"title":"7. 浏览器安全","slug":"_7-浏览器安全","link":"#_7-浏览器安全","children":[]}],"git":{"createdTime":1719488606000,"updatedTime":1723025589000,"contributors":[{"name":"jgs","email":"12345@qq.com","commits":4}]},"readingTime":{"minutes":0.85,"words":255},"filePathRelative":"soft-engineering/fe/fe-basic/browser/README.md","localizedDate":"2024年6月27日","autoDesc":true,"excerpt":"<h2>1. 架构的演进</h2>\\n<p>单进程架构 --&gt;\\n多进程架构 --&gt;\\n面向服务的架构（SOA，依旧是多进程模型，越拆越多） --&gt;\\n弹性架构: 在强大性能设备上会以多进程的方式运行基础服务，但是如果在资源受限的设备上，Chrome 会将很多服务整合到一个进程中，从而节省内存占用</p>\\n<p>目前的chrome架构：打开chrome浏览器程序，然后打开浏览器的任务管理器可以看到浏览器的相关进程</p>\\n<ul>\\n<li>浏览器主进程（一个）</li>\\n<li>网络进程（一个）</li>\\n<li>缓存进程（一个）</li>\\n<li>GPU进程（从主进程中独立出来的进程）</li>\\n<li>渲染进程（多个）</li>\\n<li>插件进程（多个）</li>\\n</ul>"}');export{p as comp,d as data};
