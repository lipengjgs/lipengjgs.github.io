import{_ as e,c as t,o as a,e as l}from"./app-DDFa41zL.js";const n={},r=l('<p>Dart 的最初定位也是一种运行在浏览器中的脚本语言，代替JS的，跟TS, ArkTS是JS的超集不同, Dart是完全换了语言。</p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><ul><li>同时支持即时编译 JIT 和事前编译 AOT。</li><li>开发期使用 JIT，开发周期异常短，调试方式颠覆常规（支持有状态的热重载）</li><li>发布期使用 AOT，本地代码执行更高效，代码性能和用户体验也更好</li></ul><h2 id="内存分配与垃圾回收" tabindex="-1"><a class="header-anchor" href="#内存分配与垃圾回收"><span>内存分配与垃圾回收</span></a></h2><h2 id="单线程模型" tabindex="-1"><a class="header-anchor" href="#单线程模型"><span>单线程模型</span></a></h2><p>没有线程，只有Isolate(隔离区)</p><h2 id="无需单独的声明式布局语言" tabindex="-1"><a class="header-anchor" href="#无需单独的声明式布局语言"><span>无需单独的声明式布局语言</span></a></h2><h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h2><p>Dart 是类型安全的语言，并且所有类型都是对象类型，都继承自顶层类型 Object<br> 因此一切变量的值都是类的实例（即对象），甚至数字、布尔值、函数和 null 也都是继承自Object 的对象\\</p><p>一切皆对象，包括运算符</p><h3 id="内置基本类型" tabindex="-1"><a class="header-anchor" href="#内置基本类型"><span>内置基本类型</span></a></h3><p>num、bool、String、List 和 Map</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h2><h3 id="可选参数" tabindex="-1"><a class="header-anchor" href="#可选参数"><span>可选参数</span></a></h3><blockquote><p>没有多态概念，用可选参数的方式代替</p></blockquote><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h3><h3 id="混入" tabindex="-1"><a class="header-anchor" href="#混入"><span>混入</span></a></h3><h2 id="特殊概念" tabindex="-1"><a class="header-anchor" href="#特殊概念"><span>特殊概念</span></a></h2><p>○ 三个引号：带格式字符串 ○ 下划线开头为私有变量</p>',21),i=[r];function s(h,c){return a(),t("div",null,i)}const p=e(n,[["render",s],["__file","dart.html.vue"]]),d=JSON.parse('{"path":"/soft-engineering/client/flutter/dart.html","title":"Dart","lang":"zh-CN","frontmatter":{"title":"Dart","footer":"","description":"Dart 的最初定位也是一种运行在浏览器中的脚本语言，代替JS的，跟TS, ArkTS是JS的超集不同, Dart是完全换了语言。 特性 同时支持即时编译 JIT 和事前编译 AOT。 开发期使用 JIT，开发周期异常短，调试方式颠覆常规（支持有状态的热重载） 发布期使用 AOT，本地代码执行更高效，代码性能和用户体验也更好 内存分配与垃圾回收 单线程...","head":[["meta",{"property":"og:url","content":"https://lipengjgs.github.io/soft-engineering/client/flutter/dart.html"}],["meta",{"property":"og:site_name","content":"SE Docs"}],["meta",{"property":"og:title","content":"Dart"}],["meta",{"property":"og:description","content":"Dart 的最初定位也是一种运行在浏览器中的脚本语言，代替JS的，跟TS, ArkTS是JS的超集不同, Dart是完全换了语言。 特性 同时支持即时编译 JIT 和事前编译 AOT。 开发期使用 JIT，开发周期异常短，调试方式颠覆常规（支持有状态的热重载） 发布期使用 AOT，本地代码执行更高效，代码性能和用户体验也更好 内存分配与垃圾回收 单线程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-27T03:16:56.000Z"}],["meta",{"property":"article:author","content":"lipengjgs"}],["meta",{"property":"article:modified_time","content":"2024-08-27T03:16:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dart\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-27T03:16:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lipengjgs\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":2,"title":"内存分配与垃圾回收","slug":"内存分配与垃圾回收","link":"#内存分配与垃圾回收","children":[]},{"level":2,"title":"单线程模型","slug":"单线程模型","link":"#单线程模型","children":[]},{"level":2,"title":"无需单独的声明式布局语言","slug":"无需单独的声明式布局语言","link":"#无需单独的声明式布局语言","children":[]},{"level":2,"title":"类型","slug":"类型","link":"#类型","children":[{"level":3,"title":"内置基本类型","slug":"内置基本类型","link":"#内置基本类型","children":[]}]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"类","slug":"类","link":"#类","children":[{"level":3,"title":"可选参数","slug":"可选参数","link":"#可选参数","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":3,"title":"混入","slug":"混入","link":"#混入","children":[]}]},{"level":2,"title":"特殊概念","slug":"特殊概念","link":"#特殊概念","children":[]}],"git":{"createdTime":1721223544000,"updatedTime":1724728616000,"contributors":[{"name":"jgs","email":"12345@qq.com","commits":5}]},"readingTime":{"minutes":1.01,"words":302},"filePathRelative":"soft-engineering/client/flutter/dart.md","localizedDate":"2024年7月17日","autoDesc":true,"excerpt":"<p>Dart 的最初定位也是一种运行在浏览器中的脚本语言，代替JS的，跟TS, ArkTS是JS的超集不同, Dart是完全换了语言。</p>\\n<h2>特性</h2>\\n<ul>\\n<li>同时支持即时编译 JIT 和事前编译 AOT。</li>\\n<li>开发期使用 JIT，开发周期异常短，调试方式颠覆常规（支持有状态的热重载）</li>\\n<li>发布期使用 AOT，本地代码执行更高效，代码性能和用户体验也更好</li>\\n</ul>\\n<h2>内存分配与垃圾回收</h2>\\n<h2>单线程模型</h2>\\n<p>没有线程，只有Isolate(隔离区)</p>\\n<h2>无需单独的声明式布局语言</h2>"}');export{p as comp,d as data};
