import{_ as i,c as e,a as l,e as n,o as t}from"./app-D6ynBPrZ.js";const s={},a=n('<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><ul><li><p>基本的<strong>数据组织</strong>和<strong>数据处理</strong>方法</p><ol><li>各种数据的逻辑结构表示</li><li>各种数据的存储结构表示</li><li>各种数据结构的运算定义</li><li>设计实现运算的算法(以数据结构为中心的算法设计--也就是基本算法设计方法，再高一层就是通用算法设计)</li><li>分析算法的效率(时间复杂度、空间复杂度分析，设计出求解问题的高效算法)</li></ol></li></ul><p>如何组织数据跟数据的规模以及存储的地方是有关系，就像图书与书架的关系！！</p><p>新书如何插入？如何找到某一本书？</p><p>解决问题方法的效率，跟<strong>数据的组织方式</strong>是直接相关的，跟<strong>空间的利用效率</strong>有关, 跟<strong>算法的巧妙程度</strong>有关系</p><p>定义(差不多的)：数据对象在<strong>计算机中的组织方式</strong> ， 必定与一系列加在其上的操作相关联， 完成这些操作的方法就是算法，算法与数据结构始终是一起的。</p><blockquote><p>根据数据结构的逻辑特性 -&gt; 映射到计算机中的存储结构 -&gt; 运算实现算法设计（数据运算高效实现）</p></blockquote><p>数组结构中讨论的元素关系主要是指相邻关系或邻接关系</p><ul><li>同一逻辑结构可以对应多种存储结构</li><li>同样的运算，在不同的存储结构中，其实现过程也是不同的</li></ul>',9),r=n(`<h2 id="逻辑结构" tabindex="-1"><a class="header-anchor" href="#逻辑结构"><span>逻辑结构</span></a></h2><ol><li>集合</li><li>线性结构 <ol><li>简单： 线性表、栈、队列、散列表</li><li>复杂： 广义表、多维数组、文件...</li></ol></li><li>树形结构</li><li>图形结构</li></ol><h2 id="存储结构" tabindex="-1"><a class="header-anchor" href="#存储结构"><span>存储结构</span></a></h2><ol><li>顺序存储结构</li><li>链式存储结构</li><li>索引存储结构</li><li>哈希(散列)存储结构</li></ol><h2 id="抽象数据类型" tabindex="-1"><a class="header-anchor" href="#抽象数据类型"><span>抽象数据类型</span></a></h2><ul><li>（ADT）是<strong>描述数据结构的方法</strong>， 这个是<strong>重点</strong>，面向对象时，就是将一类对象抽象成一种数据类型的过程，抽象好了可大大提高开发效率</li><li>指的是从求解问题的数学模型中抽象出来的数据逻辑结构和运算，不考虑计算机的具体实现</li><li>= 逻辑结构 + 抽象运算</li><li>实质上就是对一个求解问题的形式化描述，程序员可以在理解基础上实现它</li><li>通常把<strong>基于存储结构</strong>的运算实现的步骤或过程称为算法</li><li>数据类型： 是一个值的<strong>集合</strong>和定义在此集合上的<strong>一组操作</strong>的总称，是已经实现了的数据结构，包括<strong>数据对象集</strong>，数据集合相关联的<strong>操作集</strong>，只描述数据对象集、相关操作集是什么，不涉及其他</li><li>抽象： 指描述数据结构的方法不依赖于具体实现，与存放数据的机器无关；与数据存储的物理结构无关；与实现操作的算法和编程语言都无关</li><li>有定义数据结构就是ADT的物理实现</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>            eg:</span></span>
<span class="line"><span>            类型名称： 矩阵（Matrix）</span></span>
<span class="line"><span>            数据对象集：</span></span>
<span class="line"><span>            操作集：</span></span>
<span class="line"><span>                Matrix create(int M, int N):</span></span>
<span class="line"><span>                int getMaxRow(Matrix A):</span></span>
<span class="line"><span>                int getMaxCol(Matrix A):</span></span>
<span class="line"><span>                // 这里的ElementType 根据矩阵元素的值的类型而定，并不明确指定其类型</span></span>
<span class="line"><span>                ElementType getEntry(Matrix A, int i; int j):</span></span>
<span class="line"><span>                Matrix add(Matrix A, Matrix B):</span></span>
<span class="line"><span>                ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function o(p,c){return t(),e("div",null,[a,l(` 逻辑结构表示

    二元组 -- \`B = (D, R)\`  

    D为集合，R为集合中元素的二元关系 `),r])}const g=i(s,[["render",o],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/programming/structure/","title":"数据结构","lang":"zh-CN","frontmatter":{"title":"数据结构","footer":"","description":"定义 基本的数据组织和数据处理方法 各种数据的逻辑结构表示 各种数据的存储结构表示 各种数据结构的运算定义 设计实现运算的算法(以数据结构为中心的算法设计--也就是基本算法设计方法，再高一层就是通用算法设计) 分析算法的效率(时间复杂度、空间复杂度分析，设计出求解问题的高效算法) 如何组织数据跟数据的规模以及存储的地方是有关系，就像图书与书架的关系！！...","head":[["meta",{"property":"og:url","content":"https://lipengjgs.github.io/programming/structure/"}],["meta",{"property":"og:site_name","content":"SE Docs"}],["meta",{"property":"og:title","content":"数据结构"}],["meta",{"property":"og:description","content":"定义 基本的数据组织和数据处理方法 各种数据的逻辑结构表示 各种数据的存储结构表示 各种数据结构的运算定义 设计实现运算的算法(以数据结构为中心的算法设计--也就是基本算法设计方法，再高一层就是通用算法设计) 分析算法的效率(时间复杂度、空间复杂度分析，设计出求解问题的高效算法) 如何组织数据跟数据的规模以及存储的地方是有关系，就像图书与书架的关系！！..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-17T13:39:04.000Z"}],["meta",{"property":"article:author","content":"lipengjgs"}],["meta",{"property":"article:modified_time","content":"2024-07-17T13:39:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-17T13:39:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lipengjgs\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"逻辑结构","slug":"逻辑结构","link":"#逻辑结构","children":[]},{"level":2,"title":"存储结构","slug":"存储结构","link":"#存储结构","children":[]},{"level":2,"title":"抽象数据类型","slug":"抽象数据类型","link":"#抽象数据类型","children":[]}],"git":{"createdTime":1719488606000,"updatedTime":1721223544000,"contributors":[{"name":"jgs","email":"12345@qq.com","commits":3}]},"readingTime":{"minutes":2.95,"words":886},"filePathRelative":"programming/structure/README.md","localizedDate":"2024年6月27日","autoDesc":true,"excerpt":"<h2>定义</h2>\\n<ul>\\n<li>\\n<p>基本的<strong>数据组织</strong>和<strong>数据处理</strong>方法</p>\\n<ol>\\n<li>各种数据的逻辑结构表示</li>\\n<li>各种数据的存储结构表示</li>\\n<li>各种数据结构的运算定义</li>\\n<li>设计实现运算的算法(以数据结构为中心的算法设计--也就是基本算法设计方法，再高一层就是通用算法设计)</li>\\n<li>分析算法的效率(时间复杂度、空间复杂度分析，设计出求解问题的高效算法)</li>\\n</ol>\\n</li>\\n</ul>\\n<p>如何组织数据跟数据的规模以及存储的地方是有关系，就像图书与书架的关系！！</p>"}');export{g as comp,h as data};
