import{_ as e,c as l,o as i,f as a}from"./app-Qa8nBN6u.js";const p="/img/cs-basic/%E7%9F%AD%E9%99%A4%E6%B3%95.png",n={},t=a('<blockquote><p>计算机处理的是数据是二进制，形式上最简单，物理上最可靠</p><p>数据包括数值型数据和非数值型数据</p></blockquote><h2 id="进制" tabindex="-1"><a class="header-anchor" href="#进制"><span>进制</span></a></h2><h3 id="进制表示" tabindex="-1"><a class="header-anchor" href="#进制表示"><span>进制表示</span></a></h3><ul><li><p>0b(二进制)，0x/H(十六进制)</p><p>如 <code>0b110111</code>、 <code>0x4FFFF</code>、<code>4FFFFH</code></p></li><li><p>D(Demical) 十进制</p></li><li><p>B(Binary) 二进制</p></li><li><p>O(Octal) 八进制</p></li><li><p>H(Hexadicimal) 十六进制</p></li></ul><h3 id="进制转换" tabindex="-1"><a class="header-anchor" href="#进制转换"><span>进制转换</span></a></h3><ul><li><p>R进制转十进制：位权展开法</p><p>41000H: 4×16<sup>4</sup>+1×16<sup>3</sup>+0×16<sup>2</sup>+0×16<sup>1</sup>+0×16<sup>0</sup> = 266240</p></li><li><p>浮点数转二进制：乘2取整法</p></li><li><p>十进制转R进制：短除法</p><p><img src="'+p+'" alt=""> 快捷方式：38 = 2<sup>5</sup> + 2<sup>2</sup> + 2<sup>1</sup> = 100110</p></li><li><p>M进制转N进制：先转十进制，再转N进制</p></li><li><p>2转8、2转16（每3位三合一，每4位四合一）：快速转换</p><p>如 100 100 转 8， 三个一组：100 = 4 100 = 4，所以结果是 44<br> 如 10 0100 转 16 四个一组：0010 = 21 0100 = 4， 所以结果为 24</p></li></ul><h2 id="机器数" tabindex="-1"><a class="header-anchor" href="#机器数"><span>机器数</span></a></h2><p>0和1表示（即二进制计数制），小数点隐含不占位置</p><ol><li><p>无符号数：没有符号位，表示正数</p></li><li><p>带符号数：机器数的最高位为符号位（正0负1，单双符号位？）</p></li></ol><h2 id="真值" tabindex="-1"><a class="header-anchor" href="#真值"><span>真值</span></a></h2><p>机器数对应的实际数值</p><h2 id="定点数" tabindex="-1"><a class="header-anchor" href="#定点数"><span>定点数</span></a></h2><p>定点表示法：</p><ul><li>纯小数（定点小数，小数点固定在最高(有效数值)位之前）</li><li>纯整数（定点整数，小数点固定在最低(有效数值)位之后）</li></ul><h2 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数"><span><mark>浮点数</mark></span></a></h2><ul><li>计算机中浮点数的表示(类似科学计数法，只不过十进制变为2进制)：N=F*2<sup>E</sup> E为阶码，F为尾数；</li><li>阶符 --- 阶码 --- 数符 --- 尾数</li><li>所能表示的数值范围由阶码确定，所表示的数值精度由尾数确定</li><li>浮点数运算：科学计数法(尾数、指数、基数)；计算步骤：对阶（小对大）</li></ul><h2 id="编码方法-码制-为了便于运算-针对-带符号数" tabindex="-1"><a class="header-anchor" href="#编码方法-码制-为了便于运算-针对-带符号数"><span><mark>编码方法（码制，为了便于运算，针对：带符号数）</mark></span></a></h2><ul><li><p>原码：一个数的正常二进制（0有正0和负0）</p><p>[+1]<sub>原</sub> = 0 0000001</p></li><li><p>反码：正数的反码为原码，负数的反码是除符号位外其它各位按位取反（0有正0和负0）</p></li><li><p>补码：正数的补码为原码，负数的补码为反码末位加1并有进位则进位（0只有一种形式）</p></li><li><p>移码：原码的补码的符号位取反</p></li><li><p>数值表示范围：机器字长为n时各种码取值范围（定点整数，定点小数）</p><p>原码：-(2<sup>n-1</sup> - 1) ~ 2<sup>n-1</sup> - 1<br> 反码：-(2<sup>n-1</sup> - 1) ~ 2<sup>n-1</sup> - 1<br> 补码：-2<sup>n-1</sup> ~ 2<sup>n-1</sup> - 1<br> 移码：-2<sup>n-1</sup> ~ 2<sup>n-1</sup> - 1</p></li></ul><h2 id="校验码" tabindex="-1"><a class="header-anchor" href="#校验码"><span>校验码</span></a></h2><h3 id="_1-码距" tabindex="-1"><a class="header-anchor" href="#_1-码距"><span>1. 码距</span></a></h3><p>在两个编码中，从A码到B码转换所需要改变的位数<br> 如： 00 转为 11，码距为2<br> 一般：码距越大，越有利于检错和纠错</p><h3 id="_2-奇偶校验码" tabindex="-1"><a class="header-anchor" href="#_2-奇偶校验码"><span>2. 奇偶校验码</span></a></h3><p>在编码中<strong>增加1位校验位</strong>来使编码中1的个数为奇数或者偶数，从而使码距变为2（出错位和校验位）<br>奇校验：奇数个1<br>偶校验：偶数个1<br>只能检一位错，无法纠错</p><h3 id="_3-循环冗余校验码crc-cyclic-redundancy-check" tabindex="-1"><a class="header-anchor" href="#_3-循环冗余校验码crc-cyclic-redundancy-check"><span>3. 循环冗余校验码CRC（cyclic redundancy check）</span></a></h3><p>只能检错，不能纠错<br>CRC编码计算步骤：</p><ul><li><p>有一个约定的生成多项式</p></li><li><p>在原始信息位后加多项式最高次幂个0</p></li><li><p>将补0后的信息与多项式(对应的二进制)做模2除法，得到余数（前面加0补足最高次幂个）</p></li><li><p>将原始信息与余数连接起来得到编码</p></li></ul><h3 id="_4-海明码" tabindex="-1"><a class="header-anchor" href="#_4-海明码"><span>4. 海明码</span></a></h3><p>本质也是利用奇偶性<br>构成方法是在确定位置（2^n）上插入k个校验位，通过扩大码距实现<strong>检错和纠错</strong><br>数据位是n位，校验位是k位；根据数据位计算校验位的值（总共的位数是数据位+校验位），从而得到海明码<br><strong>2的k次方-1≥n+k</strong></p>',28),c=[t];function s(r,o){return i(),l("div",null,c)}const d=e(n,[["render",s],["__file","DataRepresentation.html.vue"]]),u=JSON.parse('{"path":"/cs-basic/basic/DataRepresentation.html","title":"数据表示","lang":"zh-CN","frontmatter":{"title":"数据表示","footer":"","description":"计算机处理的是数据是二进制，形式上最简单，物理上最可靠 数据包括数值型数据和非数值型数据 进制 进制表示 0b(二进制)，0x/H(十六进制) 如 0b110111、 0x4FFFF、4FFFFH D(Demical) 十进制 B(Binary) 二进制 O(Octal) 八进制 H(Hexadicimal) 十六进制 进制转换 R进制转十进制：位权展...","head":[["meta",{"property":"og:url","content":"https://lipengjgs.github.io/cs-basic/basic/DataRepresentation.html"}],["meta",{"property":"og:site_name","content":"SE Docs"}],["meta",{"property":"og:title","content":"数据表示"}],["meta",{"property":"og:description","content":"计算机处理的是数据是二进制，形式上最简单，物理上最可靠 数据包括数值型数据和非数值型数据 进制 进制表示 0b(二进制)，0x/H(十六进制) 如 0b110111、 0x4FFFF、4FFFFH D(Demical) 十进制 B(Binary) 二进制 O(Octal) 八进制 H(Hexadicimal) 十六进制 进制转换 R进制转十进制：位权展..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lipengjgs.github.io/img/cs-basic/短除法.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-17T03:16:36.000Z"}],["meta",{"property":"article:author","content":"lipengjgs"}],["meta",{"property":"article:modified_time","content":"2025-01-17T03:16:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据表示\\",\\"image\\":[\\"https://lipengjgs.github.io/img/cs-basic/短除法.png\\"],\\"dateModified\\":\\"2025-01-17T03:16:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lipengjgs\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"进制","slug":"进制","link":"#进制","children":[{"level":3,"title":"进制表示","slug":"进制表示","link":"#进制表示","children":[]},{"level":3,"title":"进制转换","slug":"进制转换","link":"#进制转换","children":[]}]},{"level":2,"title":"机器数","slug":"机器数","link":"#机器数","children":[]},{"level":2,"title":"真值","slug":"真值","link":"#真值","children":[]},{"level":2,"title":"定点数","slug":"定点数","link":"#定点数","children":[]},{"level":2,"title":"浮点数","slug":"浮点数","link":"#浮点数","children":[]},{"level":2,"title":"编码方法（码制，为了便于运算，针对：带符号数）","slug":"编码方法-码制-为了便于运算-针对-带符号数","link":"#编码方法-码制-为了便于运算-针对-带符号数","children":[]},{"level":2,"title":"校验码","slug":"校验码","link":"#校验码","children":[{"level":3,"title":"1. 码距","slug":"_1-码距","link":"#_1-码距","children":[]},{"level":3,"title":"2. 奇偶校验码","slug":"_2-奇偶校验码","link":"#_2-奇偶校验码","children":[]},{"level":3,"title":"3. 循环冗余校验码CRC（cyclic redundancy check）","slug":"_3-循环冗余校验码crc-cyclic-redundancy-check","link":"#_3-循环冗余校验码crc-cyclic-redundancy-check","children":[]},{"level":3,"title":"4. 海明码","slug":"_4-海明码","link":"#_4-海明码","children":[]}]}],"git":{"createdTime":1719488606000,"updatedTime":1737083796000,"contributors":[{"name":"jgs","email":"12345@qq.com","commits":1},{"name":"lipengjgs","email":"lipengjgs@163.com","commits":1}]},"readingTime":{"minutes":3.32,"words":996},"filePathRelative":"cs-basic/basic/DataRepresentation.md","localizedDate":"2024年6月27日","autoDesc":true,"excerpt":"<blockquote>\\n<p>计算机处理的是数据是二进制，形式上最简单，物理上最可靠</p>\\n<p>数据包括数值型数据和非数值型数据</p>\\n</blockquote>\\n<h2>进制</h2>\\n<h3>进制表示</h3>\\n<ul>\\n<li>\\n<p>0b(二进制)，0x/H(十六进制)</p>\\n<p>如 <code>0b110111</code>、 <code>0x4FFFF</code>、<code>4FFFFH</code></p>\\n</li>\\n<li>\\n<p>D(Demical) 十进制</p>\\n</li>\\n<li>\\n<p>B(Binary) 二进制</p>\\n</li>\\n<li>\\n<p>O(Octal) 八进制</p>\\n</li>\\n<li>\\n<p>H(Hexadicimal) 十六进制</p>\\n</li>\\n</ul>"}');export{d as comp,u as data};
