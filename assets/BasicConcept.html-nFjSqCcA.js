import{_ as i,c as e,o as s,e as l}from"./app-DdOAIDEh.js";const t={},a=l(`<h2 id="低级语言" tabindex="-1"><a class="header-anchor" href="#低级语言"><span>低级语言</span></a></h2><ol><li><p>机器语言(1940年以前)</p><p>也就是0101...</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 768+12288-1280</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">101100000000000000000011</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">000001010000000000110000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">001011010000000000000101</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>汇编语言(20世纪40年代，用符号表示指令的语言, 又称为符号语言)</p><p>人稍微看得懂一点, 有 AND... 等符号（用助记符代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址）</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 将寄存器BX的内容送到AX中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mov</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ax,bx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="高级语言-不依赖于机器硬件-按人类的思维角度出发-抽象程度高-20世纪50年代" tabindex="-1"><a class="header-anchor" href="#高级语言-不依赖于机器硬件-按人类的思维角度出发-抽象程度高-20世纪50年代"><span>高级语言(不依赖于机器硬件，按人类的思维角度出发，抽象程度高， 20世纪50年代)</span></a></h2><ul><li><strong>Fortran</strong> 第一个高级语言，应用于科学计算，效率高，目前还在（1955 年，名称取自<code>FORmula TRANslator</code>，即公式翻译器）</li><li><strong>Pasical</strong> 为教学开发，表达能力强</li><li><strong>C</strong> 指针操作能力强，高效</li><li><strong>C++</strong> 面向对象，高效</li><li><strong>Java</strong></li><li><strong>C#</strong></li><li><a href="./SeniorLang/python"><strong>Python</strong></a> 解释型</li><li><strong>Prolog</strong> 逻辑型</li><li><strong>LISP</strong> 函数式(1958 年，名称取自<code>LISt Processor</code>，即枚举处理器)</li><li><strong>JavaScript</strong> 解释型脚本语言</li><li><strong>Go</strong> ...</li></ul><h3 id="编译型语言与解释型语言的区别" tabindex="-1"><a class="header-anchor" href="#编译型语言与解释型语言的区别"><span>编译型语言与解释型语言的区别</span></a></h3>`,5),n=[a];function r(h,o){return s(),e("div",null,n)}const p=i(t,[["render",r],["__file","BasicConcept.html.vue"]]),c=JSON.parse('{"path":"/programming/language/BasicConcept.html","title":"基本概念","lang":"zh-CN","frontmatter":{"title":"基本概念","footer":"","description":"低级语言 机器语言(1940年以前) 也就是0101... 汇编语言(20世纪40年代，用符号表示指令的语言, 又称为符号语言) 人稍微看得懂一点, 有 AND... 等符号（用助记符代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址） 高级语言(不依赖于机器硬件，按人类的思维角度出发，抽象程度高， 20世纪50...","head":[["meta",{"property":"og:url","content":"https://lipengjgs.github.io/programming/language/BasicConcept.html"}],["meta",{"property":"og:site_name","content":"SE Docs"}],["meta",{"property":"og:title","content":"基本概念"}],["meta",{"property":"og:description","content":"低级语言 机器语言(1940年以前) 也就是0101... 汇编语言(20世纪40年代，用符号表示指令的语言, 又称为符号语言) 人稍微看得懂一点, 有 AND... 等符号（用助记符代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址） 高级语言(不依赖于机器硬件，按人类的思维角度出发，抽象程度高， 20世纪50..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-27T03:16:56.000Z"}],["meta",{"property":"article:author","content":"lipengjgs"}],["meta",{"property":"article:modified_time","content":"2024-08-27T03:16:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基本概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-27T03:16:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lipengjgs\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"低级语言","slug":"低级语言","link":"#低级语言","children":[]},{"level":2,"title":"高级语言(不依赖于机器硬件，按人类的思维角度出发，抽象程度高， 20世纪50年代)","slug":"高级语言-不依赖于机器硬件-按人类的思维角度出发-抽象程度高-20世纪50年代","link":"#高级语言-不依赖于机器硬件-按人类的思维角度出发-抽象程度高-20世纪50年代","children":[{"level":3,"title":"编译型语言与解释型语言的区别","slug":"编译型语言与解释型语言的区别","link":"#编译型语言与解释型语言的区别","children":[]}]}],"git":{"createdTime":1719488606000,"updatedTime":1724728616000,"contributors":[{"name":"jgs","email":"12345@qq.com","commits":1}]},"readingTime":{"minutes":0.91,"words":272},"filePathRelative":"programming/language/BasicConcept.md","localizedDate":"2024年6月27日","autoDesc":true,"excerpt":"<h2>低级语言</h2>\\n<ol>\\n<li>\\n<p>机器语言(1940年以前)</p>\\n<p>也就是0101...</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 768+12288-1280</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">101100000000000000000011</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">000001010000000000110000</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">001011010000000000000101</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>汇编语言(20世纪40年代，用符号表示指令的语言, 又称为符号语言)</p>\\n<p>人稍微看得懂一点, 有 AND... 等符号（用助记符代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址）</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 将寄存器BX的内容送到AX中</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">mov</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> ax,bx</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>"}');export{p as comp,c as data};
