import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as e,e as n}from"./app-3Ky8IqNk.js";const t={},a=n(`<h1 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h1><h2 id="背景及目标" tabindex="-1"><a class="header-anchor" href="#背景及目标"><span>背景及目标</span></a></h2><ul><li><p>基本的数据组织和数据处理方法</p><ol><li>各种数据的逻辑结构表示</li><li>各种数据的存储结构表示</li><li>各种数据结构的运算定义</li><li>设计实现运算的算法(以数据结构为中心的算法设计--也就是基本算法设计方法，再高一层就是通用算法设计)</li><li>分析算法的效率(时间复杂度、空间复杂度分析，设计出求解问题的高效算法)</li></ol></li></ul><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>如何组织数据跟数据的规模以及存储的地方是有关系，就像图书与书架的关系！！</p><p>新书如何插入？如何找到某一本书？</p><p>解决问题方法的效率，跟<strong>数据的组织方式</strong>是直接相关的，跟<strong>空间的利用效率</strong>有关, 跟<strong>算法的巧妙程度</strong>有关系</p><p>定义(差不多的)：数据对象在<strong>计算机中的组织方式</strong> ， 必定与一系列加在其上的操作相关联， 完成这些操作的方法就是算法，算法与数据结构始终是一起的。</p><blockquote><p>根据数据结构的逻辑特性 -&gt; 映射到计算机中的存储结构 -&gt; 运算实现算法设计（数据运算高效实现）</p></blockquote><p>数组结构中讨论的元素关系主要是指相邻关系或邻接关系</p><ul><li>同一逻辑结构可以对应多种存储结构</li><li>同样的运算，在不同的存储结构中，其实现过程也是不同的</li></ul><p>逻辑结构表示</p><pre><code>二元组 -- \`B = (D, R)\`  

D为集合，R为集合中元素的二元关系
</code></pre><h3 id="逻辑结构" tabindex="-1"><a class="header-anchor" href="#逻辑结构"><span>逻辑结构</span></a></h3><ol><li>集合</li><li>线性结构 <ol><li>简单： 线性表、栈、队列、散列表</li><li>复杂： 广义表、多维数组、文件...</li></ol></li><li>树形结构</li><li>图形结构</li></ol><h3 id="存储结构" tabindex="-1"><a class="header-anchor" href="#存储结构"><span>存储结构</span></a></h3><ol><li>顺序存储结构</li><li>链式存储结构</li><li>索引存储结构</li><li>哈希(散列)存储结构</li></ol><h3 id="抽象数据类型" tabindex="-1"><a class="header-anchor" href="#抽象数据类型"><span>抽象数据类型</span></a></h3><ul><li><p>（ADT）是<strong>描述数据结构的方法</strong>， 这个是<strong>重点</strong>，面向对象时，就是将一类对象抽象成一种数据类型的过程，抽象好了可大大提高开发效率</p></li><li><p>指的是从求解问题的数学模型中抽象出来的数据逻辑结构和运算，不考虑计算机的具体实现</p></li><li><p>= 逻辑结构 + 抽象运算</p></li><li><p>实质上就是对一个求解问题的形式化描述，程序员可以在理解基础上实现它</p></li><li><p>通常把<strong>基于存储结构</strong>的运算实现的步骤或过程称为算法</p></li><li><p>数据类型： 是一个值的<strong>集合</strong>和定义在此集合上的<strong>一组操作</strong>的总称，是已经实现了的数据结构，包括<strong>数据对象集</strong>，数据集合相关联的<strong>操作集</strong>，只描述数据对象集、相关操作集是什么，不涉及其他</p></li><li><p>抽象： 指描述数据结构的方法不依赖于具体实现，与存放数据的机器无关；与数据存储的物理结构无关；与实现操作的算法和编程语言都无关</p></li><li><p>有定义数据结构就是ADT的物理实现</p><pre><code>  \`\`\`s
      eg:
      类型名称： 矩阵（Matrix）
      数据对象集：
      操作集：
          Matrix create(int M, int N):
          int getMaxRow(Matrix A):
          int getMaxCol(Matrix A):
          // 这里的ElementType 根据矩阵元素的值的类型而定，并不明确指定其类型
          ElementType getEntry(Matrix A, int i; int j):
          Matrix add(Matrix A, Matrix B):
          ...
  \`\`\`
</code></pre></li></ul><h2 id="线性结构" tabindex="-1"><a class="header-anchor" href="#线性结构"><span>线性结构</span></a></h2><h3 id="线性表" tabindex="-1"><a class="header-anchor" href="#线性表"><span>线性表</span></a></h3><ol><li>简称表，是零个或多个元素的有穷序列，通常可以表示为k<sub>0</sub>, k<sub>1</sub>, ... k<sub>n-1</sub>(n&gt;=1)</li><li>线性表中的元素叫<strong>表目</strong>或者<strong>记录</strong></li><li>i 称为表目 k<sub>i</sub> 的 <strong>索引</strong> 或 <strong>下标</strong></li><li>n是<strong>表的长度</strong></li><li>长度为零的线性表叫<strong>空表</strong></li></ol><ul><li><p>特点</p><ol><li>灵活，长度可增长、缩短</li><li>二元组 <code>B = (K, R) K = {a0, a1,...an-1} R = {r}</code> r表示前驱/后继关系，具有反对称性和传递性</li></ol></li></ul><h4 id="一元多项式及其运算" tabindex="-1"><a class="header-anchor" href="#一元多项式及其运算"><span>一元多项式及其运算</span></a></h4><h3 id="栈" tabindex="-1"><a class="header-anchor" href="#栈"><span>栈</span></a></h3><ol><li><p>LIFO last in first out</p></li><li><p>插入和删除操作都限制在表的同一端进行</p></li><li><p>应用：深搜</p></li><li><p>可以用数组来实现堆栈，也可以用链表（单向链尾不能找到前一个）来实现堆栈</p><pre><code> \`\`\`js
     // 抽象数据结构
     // 通常由一个一维数组和一个记录栈顶元素位置的变量组成


 \`\`\`
</code></pre></li></ol><ul><li><p>中缀表达式转换为后缀表达式</p><ol><li>从头到尾读取中缀表达式的每个对象</li><li>假如是运算符：直接输出</li><li>假如是左括号：压入堆栈</li><li>假如是右括号，将栈顶的运算符弹出并输出，直到遇到左括号（出栈，不输出）</li><li>运算符： <ol><li>若优先级大于栈顶运算符时，则把它压栈；</li><li>若优先级小于等于栈顶运算符时，将栈顶运算符弹出并输出；</li><li>再比较新的栈顶运算符，直到该运算符大于栈顶运算符优先级为止，然后将该运算符压栈</li></ol></li><li>若各对象处理完毕，则把堆栈中存留的运算符一并输出</li></ol></li></ul><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列"><span>队列</span></a></h3><ol><li>FIFP first in first out</li><li>插入操作在表的一端，删除操作在另一端</li><li>应用：宽搜</li><li>也是一种受限制的线性表</li></ol><h2 id="树" tabindex="-1"><a class="header-anchor" href="#树"><span>树</span></a></h2><h3 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树"><span>二叉树</span></a></h3><h3 id="堆" tabindex="-1"><a class="header-anchor" href="#堆"><span>堆</span></a></h3><h2 id="图" tabindex="-1"><a class="header-anchor" href="#图"><span>图</span></a></h2><h3 id="高级数据结构" tabindex="-1"><a class="header-anchor" href="#高级数据结构"><span>高级数据结构</span></a></h3><p>一个函数不仅要做好，而且要做得漂亮</p>`,35),r=[a];function s(o,p){return e(),i("div",null,r)}const d=l(t,[["render",s],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/programming/structure/","title":"数据结构","lang":"zh-CN","frontmatter":{"description":"数据结构 背景及目标 基本的数据组织和数据处理方法 各种数据的逻辑结构表示 各种数据的存储结构表示 各种数据结构的运算定义 设计实现运算的算法(以数据结构为中心的算法设计--也就是基本算法设计方法，再高一层就是通用算法设计) 分析算法的效率(时间复杂度、空间复杂度分析，设计出求解问题的高效算法) 定义 如何组织数据跟数据的规模以及存储的地方是有关系，就...","head":[["meta",{"property":"og:url","content":"https://lipengjgs.github.io/programming/structure/"}],["meta",{"property":"og:site_name","content":"SE Docs"}],["meta",{"property":"og:title","content":"数据结构"}],["meta",{"property":"og:description","content":"数据结构 背景及目标 基本的数据组织和数据处理方法 各种数据的逻辑结构表示 各种数据的存储结构表示 各种数据结构的运算定义 设计实现运算的算法(以数据结构为中心的算法设计--也就是基本算法设计方法，再高一层就是通用算法设计) 分析算法的效率(时间复杂度、空间复杂度分析，设计出求解问题的高效算法) 定义 如何组织数据跟数据的规模以及存储的地方是有关系，就..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T11:43:26.000Z"}],["meta",{"property":"article:author","content":"lipengjgs"}],["meta",{"property":"article:modified_time","content":"2024-06-27T11:43:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-27T11:43:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lipengjgs\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"背景及目标","slug":"背景及目标","link":"#背景及目标","children":[]},{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[{"level":3,"title":"逻辑结构","slug":"逻辑结构","link":"#逻辑结构","children":[]},{"level":3,"title":"存储结构","slug":"存储结构","link":"#存储结构","children":[]},{"level":3,"title":"抽象数据类型","slug":"抽象数据类型","link":"#抽象数据类型","children":[]}]},{"level":2,"title":"线性结构","slug":"线性结构","link":"#线性结构","children":[{"level":3,"title":"线性表","slug":"线性表","link":"#线性表","children":[]},{"level":3,"title":"栈","slug":"栈","link":"#栈","children":[]},{"level":3,"title":"队列","slug":"队列","link":"#队列","children":[]}]},{"level":2,"title":"树","slug":"树","link":"#树","children":[{"level":3,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[]},{"level":3,"title":"堆","slug":"堆","link":"#堆","children":[]}]},{"level":2,"title":"图","slug":"图","link":"#图","children":[{"level":3,"title":"高级数据结构","slug":"高级数据结构","link":"#高级数据结构","children":[]}]}],"git":{"createdTime":1719488606000,"updatedTime":1719488606000,"contributors":[{"name":"jgs","email":"12345@qq.com","commits":1}]},"readingTime":{"minutes":4.68,"words":1404},"filePathRelative":"programming/structure/README.md","localizedDate":"2024年6月27日","autoDesc":true,"excerpt":"\\n<h2>背景及目标</h2>\\n<ul>\\n<li>\\n<p>基本的数据组织和数据处理方法</p>\\n<ol>\\n<li>各种数据的逻辑结构表示</li>\\n<li>各种数据的存储结构表示</li>\\n<li>各种数据结构的运算定义</li>\\n<li>设计实现运算的算法(以数据结构为中心的算法设计--也就是基本算法设计方法，再高一层就是通用算法设计)</li>\\n<li>分析算法的效率(时间复杂度、空间复杂度分析，设计出求解问题的高效算法)</li>\\n</ol>\\n</li>\\n</ul>\\n<h2>定义</h2>\\n<p>如何组织数据跟数据的规模以及存储的地方是有关系，就像图书与书架的关系！！</p>\\n<p>新书如何插入？如何找到某一本书？</p>"}');export{d as comp,g as data};
